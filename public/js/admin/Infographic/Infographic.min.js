/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "http://localhost:8080/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 398);
/******/ })
/************************************************************************/
/******/ ({

/***/ 110:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DataSource = function () {
    function DataSource() {
        _classCallCheck(this, DataSource);
    }

    _createClass(DataSource, [{
        key: "DataSourceModel",
        value: function DataSourceModel(infoID) {
            var listDatasource = null;
            $("#addDatasource").remove();
            var datasourceModel = "\n        <div class=\"modal fade\" id=\"addDatasource\">\n            <div class=\"modal-dialog modal-lg\">\n                <div class=\"modal-content\">\n\n                    <div class=\"modal-header\">\n                        <h4 class=\"modal-title\">Add Datasource</h4>\n                        <button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button>\n                    </div>\n\n                    <div class=\"modal-body\">\n                        <div class=\"row\">\n                            <div class=\"col-12\">\n                                <label for=\"\">Name</label>\n                                <input type=\"text\" id=\"name_datasource\" class=\"form-control\">\n                            </div>\n                        </div>\n                        <div class=\"row\">\n                            <div class=\"col-6\">\n                                <label for=\"\">Channel</label>\n                                <select name=\"\" id=\"webservice_id\" class=\"form-control\">\n                                    <option value=\"\">--Select Channel--</option>\n                                </select>\n                            </div>\n                            <div class=\"col-6\">\n                                <label for=\"\">Set time interval (s)</label>\n                                <input type=\"number\" id=\"add-data-time-interval\" class=\"form-control\">\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"modal-footer\">\n                        <a class=\"btn btn-success btn-block\" id=\"btn-add-new-datasource\" href=\"#\">Save</a>\n                    </div>\n                </div>\n            </div>\n        </div>";

            $('body').append(datasourceModel);
            $("#addDatasource").modal('show');

            $.ajax({
                url: 'http://localhost:8000/api/company/webservices',
                success: function success(res) {
                    listDatasource = res.data;
                    listDatasource.map(function (data) {
                        $("#webservice_id").append("<option value=\"" + data.webservice_id + "\">" + data.service_name + "</option>");
                    });
                },
                error: function error(res) {
                    console.log(res);
                }
            });

            $("#btn-add-new-datasource").unbind().click(function () {
                $.ajax({
                    url: 'http://localhost:8000/api/admin/infographic/createDatasource',
                    method: 'POST',
                    data: {
                        info_id: infoID,
                        name: $("#name_datasource").val(),
                        webservice_id: $("#webservice_id").val(),
                        timeInterval: $("#add-data-time-interval").val()
                    },
                    success: function success(res) {
                        $("#addDatasource").modal('hide');
                    },
                    error: function error(res) {
                        console.log(res);
                    }
                });
            });
        }
    }]);

    return DataSource;
}();

/* harmony default export */ __webpack_exports__["default"] = (DataSource);

/***/ }),

/***/ 111:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var WidgetObject = function () {
  function WidgetObject() {
    _classCallCheck(this, WidgetObject);
  }

  // Garph


  _createClass(WidgetObject, [{
    key: "WidgetGraphObject",
    value: function WidgetGraphObject(id, canvasTag, chartData, chartOption, type) {
      this.id = id;
      this.canvasTag = canvasTag;
      this.chartData = chartData;
      this.chartOption = chartOption;
      this.type = type;
    }

    // Text

  }, {
    key: "MapWidgetObject",
    value: function MapWidgetObject(id, mapTag, type) {
      this.id = id;
      this.mapTag = mapTag;
      this.type = type;
    }

    // Text

  }, {
    key: "HeadFontObject",
    value: function HeadFontObject(id, spanTag, type) {
      this.id = id;
      this.spanTag = spanTag;
      this.type = type;
    }

    // Table

  }, {
    key: "WidgetTableObject",
    value: function WidgetTableObject(id, tableTag, type) {
      this.id = id;
      this.tableTag = tableTag;
      this.type = type;
    }

    // Image

  }, {
    key: "WidgetImageObject",
    value: function WidgetImageObject(id, divImgTag, type) {
      this.id = id;
      this.divImgTag = divImgTag;
      this.type = type;
    }

    // Shape

  }, {
    key: "WidgetShapeObject",
    value: function WidgetShapeObject(id, divTag, type) {
      this.id = id;
      this.divTag = divTag;
      this.type = type;
    }
  }]);

  return WidgetObject;
}();

/* harmony default export */ __webpack_exports__["default"] = (WidgetObject);

/***/ }),

/***/ 2:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export showLoadingModal */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return deepCopy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return convertHex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return randomHexColor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return LOADING; });
/* unused harmony export getTime */
/* harmony export (immutable) */ __webpack_exports__["c"] = aproximateHour;
/* unused harmony export filter_hour */
/* unused harmony export ERROR_INPUT */
/* harmony export (immutable) */ __webpack_exports__["b"] = addEventValidate;
/* harmony export (immutable) */ __webpack_exports__["e"] = checkError;
/* harmony export (immutable) */ __webpack_exports__["l"] = resetInputValidate;
/* harmony export (immutable) */ __webpack_exports__["i"] = getFlatObject;
/* harmony export (immutable) */ __webpack_exports__["j"] = getRndInteger;
/* harmony export (immutable) */ __webpack_exports__["h"] = diff_hours;
/* harmony export (immutable) */ __webpack_exports__["d"] = checkAuthRes;
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var showLoadingModal = function showLoadingModal(el, status) {
    var loading = " <div id=\"loading-save\" style=\"display:none;\">\n                        <div class=\"lds-ring\">\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                        </div>\n                        <h6 class='text-center'>Saving Data ...</h6>\n                    </div>";
    var _el = el;

    if (!_el.find("#loading-save").length) {
        _el.find(".modal-body").after(loading);
    }

    if (status) {
        _el.find("form").hide();
        _el.find(".modal-footer").hide();
        _el.find("#loading-save").show();
    } else {
        _el.find("form").show();
        _el.find(".modal-footer").show();
        _el.find("#loading-save").hide();
    }
};

var deepCopy = function deepCopy(data) {
    return data.map(function (item) {
        return Object.assign({}, item);
    });
};

var convertHex = function convertHex(hex, opacity) {
    hex = hex.replace('#', '');
    var r = parseInt(hex.substring(0, 2), 16);
    var g = parseInt(hex.substring(2, 4), 16);
    var b = parseInt(hex.substring(4, 6), 16);

    var result = 'rgba(' + r + ',' + g + ',' + b + ',' + opacity / 100 + ')';
    return result;
};

var randomHexColor = function randomHexColor() {
    return '#' + (Math.random() * 0xFFFFFF << 0).toString(16);
};

var resetText = null;

var LOADING = {
    set: function set(el) {
        resetText = el.html();
        var textLoading = el.attr('data-loading-text');
        el.html(textLoading);
        el.prop('disabled', true);
    },
    reset: function reset(el) {
        el.html(resetText);
        el.prop('disabled', false);
    }
};

function getTime(hours, minutes) {
    var time = null;
    minutes = minutes + "";
    if (hours < 12) {
        time = "AM";
    } else {
        time = "PM";
    }
    if (hours == 0) {
        hours = 12;
    }
    if (hours > 12) {
        hours = hours - 12;
    }
    if (minutes.length == 1) {
        minutes = "0" + minutes;
    }
    return hours + ":" + minutes + " " + time;
}

function aproximateHour(mins) {
    var minutes = Math.round(mins % 60);
    if (minutes == 60 || minutes == 0) {
        return mins / 60;
    }
    return Math.trunc(mins / 60) + minutes / 100;
}

function filter_hour(value, type) {
    return value % 60 == 0 ? 1 : 0;
}

var ERROR_INPUT = {
    set: function set(target, errorList) {
        $(".text-alert").remove();
        Object.keys(target).map(function (key) {
            if (errorList[key]) {
                $(target[key].el).removeClass('input-error');
                $(target[key].el).addClass('input-error');
                $(target[key].el).after("<p class=\"text-alert small\" style=\"color:red\">" + errorList[key] + "</p>");

                $(target[key].el).focus(function () {
                    $(target[key].el).removeClass('input-error');
                    $(target[key].el).next(".text-alert").remove();
                });

                setTimeout(function () {
                    $(target[key].el).removeClass('input-error');
                    $(".text-alert").remove();
                }, 6000);
            }
        });
    },
    reset: function reset(el) {
        $(el).removeClass('input-error');
        $(".text-alert").remove();
    }
};

function addEventValidate(validateInput) {
    var inputs = $(validateInput.parent).find("input, textarea, select");
    inputs.each(function () {
        $(this).change(function () {
            // let attr = $(this).attr('name');
            // let val = $(this).val();
            // let check = {};
            // check[attr] = val == '' ? null : val;
            // let errors = validate(check, validateInput.validate) || {};
            // console.log(attr, check[attr], errors);
            // showErrorsForInput($(this), errors[attr]);
            var elInput = $(this);
            var check = {};
            var attr = "";
            inputs.each(function () {
                attr = $(this).attr('name');
                var val = $(this).val();
                check[attr] = val == '' ? null : val;
            });
            var errors = validate(check, validateInput.validate) || {};
            console.log(elInput, errors);
            showErrorsForInput(elInput, errors[elInput.attr('name')]);
        });
    });
}

function showErrors(validateInput, errors) {
    var inputs = $(validateInput.parent).find("input, textarea, select");
    console.log(errors);
    // let isError = true;
    // inputs.each(function () {
    //     let attr = $(this).attr('name');
    //     let val = $(this).val();
    //     let check = {};
    //     check[attr] = val == '' ? null : val;
    //     let errors = validate(check, validateInput.validate) || {};
    //     showErrorsForInput($(this), errors[attr]);
    // })
    // return isError;
    var key = Object.keys(errors);
    inputs.each(function () {
        var elInput = $(this);
        var attr = elInput.attr('name');
        key.map(function (_key) {
            if (_key === attr) {
                showErrorsForInput(elInput, errors[attr]);
            }
        });
    });
}

function checkError(validateInput) {
    var inputs = $(validateInput.parent).find("input, textarea, select");
    var isError = true;
    var check = {};
    inputs.each(function () {
        var attr = $(this).attr('name');
        var val = $(this).val();
        check[attr] = val == '' ? null : val;
    });
    var errors = validate(check, validateInput.validate) || {};
    if (!validate.isEmpty(errors)) {
        showErrors(validateInput, errors);
        isError = true;
    } else {
        isError = false;
    }
    console.log('isError = ' + isError);
    return isError;
}

// Shows the errors for a specific input
function showErrorsForInput(input, errors) {
    //console.log(input, errors);
    if (!validate.isEmpty(errors)) {
        input.removeClass("has-success");
        input.addClass("has-error");
        input.parent().find(".messages-error").html(errors[0]);
    } else {
        input.removeClass("has-error");
        input.addClass("has-success");
        input.parent().find(".messages-error").html('');
    }
}

function resetInputValidate() {
    $("input, textarea, select").removeClass('has-success');
    $("input, textarea, select").removeClass('has-error');
    $(".messages-error").html('');
}

function getFlatObject(object) {
    function iter(o, p) {
        if (Array.isArray(o)) {
            o.forEach(function (a, i) {
                iter(a, p.concat(i));
            });
            return;
        }
        if (o !== null && (typeof o === "undefined" ? "undefined" : _typeof(o)) === 'object') {
            Object.keys(o).forEach(function (k) {
                iter(o[k], p.concat(k));
            });
            return;
        }
        path[p.join('/')] = o;
    }

    var path = {};
    iter(object, []);
    return path;
}

function getRndInteger(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

function diff_hours(dt2, dt1) {

    var diff = (dt2.getTime() - dt1.getTime()) / 1000;
    diff /= 60 * 60;
    return Math.abs(Math.round(diff));
}

function checkAuthRes(xhr) {
    if (xhr.getResponseHeader('authorization')) {
        var token = xhr.getResponseHeader('authorization').split(" ")[1];
        // $.ajax({
        //     url : "http://localhost:8000/SetCookie",
        //     method:"POST",
        //     data : {
        //         token : token
        //     },
        //     success : (res) => {
        //         console.log(res);
        //     },
        //     error :(res) =>{
        //         console.log(res)
        //     }
        // })
        setCookie('token', token);
    }
}

/***/ }),

/***/ 398:
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(399);


/***/ }),

/***/ 399:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__WidgetObject_min_js__ = __webpack_require__(111);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__DataSource_min_js__ = __webpack_require__(110);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_object_path__ = __webpack_require__(55);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_object_path___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_object_path__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utility_js__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utility__ = __webpack_require__(2);
function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }







var END_POINT = 'http://localhost:8000/api/';
var path = $("#pathImg").val();
var infoID = $("#infoID").val();
var infoName = $("#infoName").val();
var CircularJSON = window.CircularJSON;
var listInfoDatasource = [];
var widgetObjectList = [];

var yearlyDataTest = {
  2016: {
    RelativeHumidity: "50",
    VaporPressure: "40",
    LandVisibility: "30",
    WindDirection: "20",
    WindSpeed: "10",
    Rainfall: "5"
  },
  2017: {
    RelativeHumidity: "100",
    VaporPressure: "80",
    LandVisibility: "70",
    WindDirection: "10",
    WindSpeed: "10",
    Rainfall: "50"
  },
  2018: {
    RelativeHumidity: "90",
    VaporPressure: "85",
    LandVisibility: "45",
    WindDirection: "24",
    WindSpeed: "55",
    Rainfall: "8"
  }
};

var timeSeriesTest = {
  dataTimeSeries: [{
    RelativeHumidity: "90",
    VaporPressure: "85",
    LandVisibility: "45",
    WindDirection: "24",
    WindSpeed: "55",
    Rainfall: "8",
    Date: "12/02/2016"
  }, {
    RelativeHumidity: "100",
    VaporPressure: "80",
    LandVisibility: "70",
    WindDirection: "10",
    WindSpeed: "10",
    Rainfall: "50",
    Date: "13/04/2017"
  }, {
    RelativeHumidity: "50",
    VaporPressure: "40",
    LandVisibility: "30",
    WindDirection: "20",
    WindSpeed: "10",
    Rainfall: "5",
    Date: "14/06/2018"
  }]
};

var Workspace = function Workspace() {
  _classCallCheck(this, Workspace);

  /* Initial Function */
  this.initialAndRun = function () {
    $("#btn-add-datasource").unbind().click(function () {
      var datasourceModel = new __WEBPACK_IMPORTED_MODULE_1__DataSource_min_js__["default"]();
      datasourceModel.DataSourceModel(infoID);
    });

    $("#btnGraph").unbind().click(function () {
      graphMenu();
      console.log("test");
    });

    $("#btnMap").unbind().click(function () {
      mapMenu();
    });

    $("#btnFont").unbind().click(function () {
      fontMenu();
    });

    $("#btnImage").unbind().click(function () {
      imageMenu();
    });

    $("#btnShapes").unbind().click(function () {
      shapesMenu();
    });

    $("#btn_save").unbind().click(function () {
      /* Update position widget data */
      for (var i = 0; i < widgetObjectList.length; i++) {
        if (widgetObjectList[i].type == "line" || widgetObjectList[i].type == "bar" || widgetObjectList[i].type == "pie" || widgetObjectList[i].type == "radar") {
          var graph = $("#canvas_" + widgetObjectList[i].id).data('graph');
          widgetObjectList[i].canvasTag = document.getElementById("div_canvas_" + widgetObjectList[i].id).outerHTML;
          console.log(graph.data);
          console.log(graph.options);
          widgetObjectList[i].chartData = graph.data;
          widgetObjectList[i].chartOption = graph.options;
          console.log(widgetObjectList[i].chartData);
          console.log(widgetObjectList[i].chartOption);
        } else if (widgetObjectList[i].type == "map") {
          widgetObjectList[i].mapTag = document.getElementById("div_map_" + widgetObjectList[i].id).outerHTML;
        } else if (widgetObjectList[i].type == "head") {
          widgetObjectList[i].spanTag = document.getElementById("span_" + widgetObjectList[i].id).outerHTML;
        } else if (widgetObjectList[i].type == "table") {
          widgetObjectList[i].tableTag = document.getElementById("table_" + widgetObjectList[i].id).outerHTML;
        } else if (widgetObjectList[i].type == "image") {
          widgetObjectList[i].divImgTag = document.getElementById("div_" + widgetObjectList[i].id).outerHTML;
        } else if (widgetObjectList[i].type == "square" || widgetObjectList[i].type == "circle" || widgetObjectList[i].type == "string") {
          widgetObjectList[i].divTag = document.getElementById("div_" + widgetObjectList[i].id).outerHTML;
        }
      }

      /* Save info data to database  */
      $.ajax({
        url: END_POINT + 'infographic/updateInfoData',
        method: 'PUT',
        data: {
          info_id: infoID,
          info_data: CircularJSON.stringify(widgetObjectList)
        },
        success: function success(res) {
          alert("success");
        },
        error: function error(res) {
          alert("error");
        }
      }); //Ajax
    }); //Btn save

    $("#btn_fullscreen").unbind().click(function () {
      var popup = window.open();
      popup.document.write("<h1 id='loading'>Loading...</h1>");

      //Set object for fullscreen
      $(".sPosition").removeClass("fCorner");
      $(".propertyMenu-2").html('');

      //Generate to image
      html2canvas(document.querySelector("#workspace")).then(function (canvas) {
        var myImage = canvas.toDataURL("image/png");
        var img = '<img src="' + myImage + '">';

        popup.document.write(img);
        popup.document.title = "Preview";
        popup.document.getElementById("loading").remove();
      }); //Html2canvas
    }); //Btn fullscreen

    $("#btn_download_list a").unbind().click(function () {
      var type = $(this).attr('valuetype');
      var popup = window.open();
      popup.document.write("<h1>Please wait for download...</h1>");

      //Set object for fullscreen
      $(".sPosition").removeClass("fCorner");
      $(".propertyMenu-2").html('');

      //Generate to image
      html2canvas(document.querySelector("#workspace")).then(function (canvas) {
        popup.close();
        var myLinkImage = canvas.toDataURL("image/png");

        if (type == "pdf") {
          var pdf = new jsPDF();
          var width = pdf.internal.pageSize.getWidth();
          var height = pdf.internal.pageSize.getHeight();

          pdf.addImage(myLinkImage, 'PNG', 0, 0, width, height);
          pdf.save(infoName + ".pdf");
        } else if (type == "image") {
          var a = document.createElement("a");
          a.href = myLinkImage;
          a.setAttribute("download", infoName + ".png");
          var b = document.createEvent("MouseEvents");
          b.initEvent("click", false, true);
          a.dispatchEvent(b);
        }
      }); //Html2canvas
    }); //Btn download
  }; // Initial and run

  /* Load widget data from database */
  this.loadWidgetData = function (object) {
    for (var i = 0; i < object.length; i++) {
      if (object[i].type == "line" || object[i].type == "bar" || object[i].type == "pie" || object[i].type == "radar") {
        var Graphwidget = new Graph();
        Graphwidget.loadGraphData(object[i].id, object[i].canvasTag, object[i].chartData, object[i].chartOption, object[i].type);
      } else if (object[i].type == "map") {
        var mapwidget = new Map();
        mapwidget.loadMapWidget(object[i].id, object[i].mapTag);
      } else if (object[i].type == "head") {
        var fontHead = new Font();
        fontHead.loadHeadGraph(object[i].id, object[i].spanTag);
      } else if (object[i].type == "table") {
        var fontHead = new Font();
        fontHead.loadTableWidget(object[i].id, object[i].tableTag);
      } else if (object[i].type == "image") {
        var imagewidget = new Imagesy();
        imagewidget.loadImageWidget(object[i].id, object[i].divImgTag);
      } else if (object[i].type == "square" || object[i].type == "circle" || object[i].type == "string") {
        var shapewidget = new Shape();
        shapewidget.loadShapeWidget(object[i].id, object[i].divTag, object[i].type);
      }
    }
  }; // Load widget data

  /* Initial Element Action Function */
  var graphMenu = function graphMenu() {
    if ($("#btnGraph").hasClass("actives")) {
      UnActive("btnGraph");
    } else {
      SetActive("btnGraph");

      $("#selectMenu").html('\n            <div class="row select-menu-2-context">\n              <span>Add graph</span>\n            </div>\n            <div class="row select-menu-2-paper">\n              <div id="g1" class="row select-menu-2-block">\n                <img src="' + path + '/graph/line.png" class="image-back" style="width:60%; height:60%;"/>\n                <div class="row select-menu-2-title"><span>Line</span></div>\n                <div class="middle-center"><div class="text-popup">Insert</div></div>\n              </div>\n              <div id="g2" class="row select-menu-2-block">\n                <img src="' + path + '/graph/bar.png" class="image-back" style="width:60%; height:60%;"/>\n                <div class="row select-menu-2-title"><span>Bar</span></div>\n                <div class="middle-center"><div class="text-popup">Insert</div></div>\n              </div>\n              <div id="g3" class="row select-menu-2-block">\n                <img  src="' + path + '/graph/pie.png" class="image-back" style="width:60%; height:60%;"/>\n                <div class="row select-menu-2-title"><span>Pie</span></div>\n                <div class="middle-center"><div class="text-popup">Insert</div></div>\n              </div>\n              <div id="g4" class="row select-menu-2-block">\n                <img  src="' + path + '/graph/radar.png" class="image-back" style="width:60%; height:60%;"/>\n                <div class="row select-menu-2-title"><span>Radar</span></div>\n                <div class="middle-center"><div class="text-popup">Insert</div></div>\n              </div>\n            </div>');

      $("#g1").unbind().click(function () {
        var lineGraph = new Graph();
        lineGraph.createLineGraph();
      });

      $("#g2").unbind().click(function () {
        var barGraph = new Graph();
        barGraph.createBarGraph();
      });

      $("#g3").unbind().click(function () {
        var pieGraph = new Graph();
        pieGraph.createPieGraph();
      });

      $("#g4").unbind().click(function () {
        var radarGraph = new Graph();
        radarGraph.createRadarGraph();
      });
    }
  };

  var mapMenu = function mapMenu() {
    if ($("#btnMap").hasClass("actives")) {
      UnActive("btnMap");
    } else {
      SetActive("btnMap");

      $("#selectMenu").html('\n            <div class="row select-menu-2-context">\n              <span>Add map</span>\n            </div>\n            <div class="row select-menu-2-paper">\n              <div id="m1" class="row select-menu-2-block">\n                <img src="' + path + '/map/map.png" class="image-back" style="width:60%; height:60%;"/>\n                <div class="row select-menu-2-title"><span>Thailand</span></div>\n                <div class="middle-center"><div class="text-popup">Insert</div></div>\n              </div>\n            </div>');

      $("#m1").unbind().click(function () {
        var mapWidget = new Map();
        mapWidget.createMapWidget();
      });
    }
  };

  var fontMenu = function fontMenu() {
    if ($("#btnFont").hasClass("actives")) {
      UnActive("btnFont");
    } else {
      SetActive("btnFont");

      $("#selectMenu").html('\n            <div class="row select-menu-2-context">\n              <span>Add text</span>\n            </div>\n            <div class="row select-menu-2-paper">\n              <div id="f1" class="row select-menu-2-block">\n                <img src="' + path + '/font/head.png" class="image-back" style="width:60%; height:60%;"/>\n                <div class="row select-menu-2-title"><span>Title</span></div>\n                <div class="middle-center"><div class="text-popup">Insert</div></div>\n              </div>\n              <div id="f2" class="row select-menu-2-block">\n                <img src="' + path + '/font/subtitle.png" class="image-back" style="width:60%; height:60%;"/>\n                <div class="row select-menu-2-title"><span>Subtitle</span></div>\n                <div class="middle-center"><div class="text-popup">Insert</div></div>\n              </div>\n              <div id="f3" class="row select-menu-2-block">\n                <img src="' + path + '/font/table.png" class="image-back" style="width:60%; height:60%;"/>\n                <div class="row select-menu-2-title"><span>Table</span></div>\n                <div class="middle-center"><div class="text-popup">Insert</div></div>\n              </div>\n            </div>');

      $("#f1").unbind().click(function () {
        var fontHead = new Font();
        fontHead.createHeadGraph("title");
      });

      $("#f2").unbind().click(function () {
        var fontHead = new Font();
        fontHead.createHeadGraph("subtitle");
      });

      $("#f3").unbind().click(function () {
        var tableGraph = new Font();
        tableGraph.createTableGraph();
      });
    }
  };

  var imageMenu = function imageMenu() {
    if ($("#btnImage").hasClass("actives")) {
      UnActive("btnImage");
    } else {
      SetActive("btnImage");

      $("#selectMenu").html('\n            <div class="row select-menu-2-context">\n              <span>Add image</span>\n            </div>\n            <div class="row select-menu-2-paper">\n              <div id="i1" class="row select-menu-2-block">\n                <img src="' + path + '/image/browse.png" class="image-back" style="width:60%; height:60%;"/>\n                <div class="row select-menu-2-title"><span>Browse</span></div>\n                <div class="middle-center"><div class="text-popup">Insert</div></div>\n              </div>\n              <input type="file" id="inputfile_image" style="display:none;" />\n            </div>');

      $("#i1").unbind().click(function () {
        var imageWidget = new Imagesy();

        $("#inputfile_image").click();

        $('#inputfile_image').change(function () {
          var reader = new FileReader();
          reader.readAsDataURL($(this)[0].files[0]);
          reader.onload = function (e) {
            imageWidget.createImageWidget(e.target.result);
            /*Reset button */
            $("#btnImage").click();
            $("#btnImage").click();
          };
        });
      });
    }
  };

  var shapesMenu = function shapesMenu() {
    if ($("#btnShapes").hasClass("actives")) {
      UnActive("btnShapes");
    } else {
      SetActive("btnShapes");

      $("#selectMenu").html('\n            <div class="row select-menu-2-context">\n              <span>Add text</span>\n            </div>\n            <div class="row select-menu-2-paper">\n              <div id="s1" class="row select-menu-2-block">\n                <img src="' + path + '/shape/square.png" class="image-back" style="width:60%; height:60%;"/>\n                <div class="row select-menu-2-title"><span>Square</span></div>\n                <div class="middle-center"><div class="text-popup">Insert</div></div>\n              </div>\n              <div id="s2" class="row select-menu-2-block">\n                <img src="' + path + '/shape/circle.png" class="image-back" style="width:60%; height:60%;"/>\n                <div class="row select-menu-2-title"><span>Circle</span></div>\n                <div class="middle-center"><div class="text-popup">Insert</div></div>\n              </div>\n              <div id="s3" class="row select-menu-2-block">\n                <img src="' + path + '/shape/string.png" class="image-back" style="width:60%; height:60%;"/>\n                <div class="row select-menu-2-title"><span>String</span></div>\n                <div class="middle-center"><div class="text-popup">Insert</div></div>\n              </div>\n            </div>');

      $("#s1").unbind().click(function () {
        var shapeWidget = new Shape();
        shapeWidget.createShapeWidget("square");
      });

      $("#s2").unbind().click(function () {
        var shapeWidget = new Shape();
        shapeWidget.createShapeWidget("circle");
      });

      $("#s3").unbind().click(function () {
        var shapeWidget = new Shape();
        shapeWidget.createShapeWidget("string");
      });
    }
  };

  /* Custom Function */
  var UnActive = function UnActive(id) {
    $("#" + id).removeClass("actives");
    $("#selectMenu").html('');
    $("#selectMenu").hide();
  };

  var SetActive = function SetActive(id) {
    $("#selectMenu").show();
    $(".vertical-menu").find("a").removeClass("actives");
    $("#" + id).addClass("actives");
  };
} // Constructor
; // Workspace

var Widget = function Widget() {
  _classCallCheck(this, Widget);

  /* Create freetranform */
  this.createWidget = function (id, typeid) {
    var widgetObject = interact('#' + typeid + id).draggable({
      autoScroll: true,
      inertia: true,
      restrict: {
        restriction: 'parent',
        endOnly: true,
        elementRect: { top: 0, left: 0, bottom: 1, right: 1 }
      }
    }).resizable({
      // resize from all edges and corners
      edges: { left: true, right: true, bottom: true, top: true },

      // keep the edges inside the parent
      restrictEdges: {
        outer: 'parent',
        endOnly: true
      },

      // minimum size
      restrictSize: {
        min: { width: 100, height: 50 }
      },

      inertia: true
    }).on('doubletap', function () {
      $(".sPosition").removeClass("fCorner");

      /* Clear property */
      $(".propertyMenu-2").html('');
    }).on('resizemove', function (event) {
      changefocus(id, typeid);
      var target = event.target,
          x = parseFloat(target.getAttribute('data-x')) || 0,
          y = parseFloat(target.getAttribute('data-y')) || 0,
          z = parseFloat(target.getAttribute('data-z')) || 0;

      // update the element's style
      target.style.width = event.rect.width + 'px';
      target.style.height = event.rect.height + 'px';

      //console.log(target);
      //$(target).attr('width', event.rect.width);
      //$(target).attr('height', event.rect.height);

      // translate when resizing from top or left edges
      x += event.deltaRect.left;
      y += event.deltaRect.top;

      target.style.webkitTransform = target.style.transform = 'translate(' + x + 'px,' + y + 'px) rotate(' + z + 'deg)';

      target.setAttribute('data-x', x);
      target.setAttribute('data-y', y);
      target.setAttribute('data-z', z);

      $("#width_" + id).val(Math.round(event.rect.width));
      $("#height_" + id).val(Math.round(event.rect.height));
      $("#width_" + id).change();
      $("#height_" + id).change();
    });

    return widgetObject;
  };

  /* Custom function */
  var changefocus = function changefocus(id, typeid) {
    $(".sPosition").removeClass("fCorner");
    $('#' + typeid + id).addClass("fCorner");
  };

  this.clearfocus = function () {
    $(".sPosition").removeClass("fCorner");
  };
};

/* Graph */


var Graph = function (_Widget) {
  _inherits(Graph, _Widget);

  function Graph() {
    _classCallCheck(this, Graph);

    var _this = _possibleConstructorReturn(this, (Graph.__proto__ || Object.getPrototypeOf(Graph)).call(this));

    _this.createLineGraph = function () {
      var id = Math.floor(100000 + Math.random() * 900000);
      _this.clearfocus();

      $("#workspace").append('<div id="div_canvas_' + id + '" class="sPosition fCorner"><canvas id="canvas_' + id + '" state-mode="classic"/></div>');

      var speedData = {
        labels: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
        datasets: [{
          label: "Demo Data 1",
          data: [0, 59, 75, 20, 20, 55, 40],
          backgroundColor: 'rgba(255, 255, 255, 0)',
          borderColor: '#05acd3'
        }, {
          label: "Demo Data 2",
          data: [0, 29, 25, 20, 20, 25, 20],
          backgroundColor: 'rgba(255, 255, 255, 0)',
          borderColor: '#00ce68'
        }]
      };

      var chartOptions = {
        responsive: true,
        maintainAspectRatio: false,
        legend: {
          display: true,
          position: 'top',
          labels: {
            boxWidth: 80,
            fontColor: 'black'
          }
        },
        scales: {
          yAxes: [{
            scaleLabel: {
              display: true,
              labelString: 'Y Label'
            }
          }],
          xAxes: [{
            scaleLabel: {
              display: true,
              labelString: 'X Label'
            }
          }]
        }
      };

      var ctx = $("#canvas_" + id);
      var myChart = new Chart(ctx, {
        type: 'line',
        data: speedData,
        options: chartOptions
      });

      ctx.data("graph", myChart);

      /* Clear other property */
      $(".propertyMenu-2").html('');

      var property = new ContentProperty();
      property.createGraphProp(id, myChart, "#div_canvas_" + id, "line");

      /* Click each widget event */
      var widgetObject = _this.createWidget(id, "div_canvas_");
      widgetObject.on('tap', function (event) {
        /* Change focus */
        $(".sPosition").removeClass("fCorner");
        $("#div_canvas_" + id).addClass("fCorner");

        /* Clear other property */
        $(".propertyMenu-2").html('');

        var property = new ContentProperty();
        property.createGraphProp(id, myChart, "#div_canvas_" + id, "line");
      }).on('dragmove', function (event) {
        /* Change focus */
        $(".sPosition").removeClass("fCorner");
        $("#div_canvas_" + id).addClass("fCorner");

        var target = event.target,


        // keep the dragged position in the data-x/data-y attributes
        x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx,
            y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy,
            z = parseFloat(target.getAttribute('data-z')) || 0;

        // translate the element
        target.style.webkitTransform = target.style.transform = 'translate(' + x + 'px, ' + y + 'px) rotate(' + z + 'deg)';

        // update the posiion attributes
        target.setAttribute('data-x', x);
        target.setAttribute('data-y', y);
        target.setAttribute('data-z', z);

        /* Clear other property */
        $(".propertyMenu-2").html('');

        var property = new ContentProperty();
        property.createGraphProp(id, myChart, "#div_canvas_" + id, "line");
      });

      /* Save widget */
      var saveObject = new __WEBPACK_IMPORTED_MODULE_0__WidgetObject_min_js__["default"]();
      console.log(myChart.options);
      saveObject.WidgetGraphObject(id, null, null, null, "line");
      console.log(saveObject.chartOption);
      widgetObjectList.push(saveObject);
      widgetObjectList = deepCopy(widgetObjectList);
      console.log(widgetObjectList[0].chartOption);
    };

    _this.createBarGraph = function () {
      var id = Math.floor(100000 + Math.random() * 900000);
      _this.clearfocus();

      $("#workspace").append('<div id="div_canvas_' + id + '" class="sPosition fCorner"><canvas id="canvas_' + id + '" state-mode="classic"/></div>');

      var speedData = {
        labels: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
        datasets: [{
          label: "Demo Data 1",
          data: [0, 59, 75, 20, 20, 55, 40],
          backgroundColor: '#05acd3'
        }, {
          label: "Demo Data 2",
          data: [0, 29, 25, 20, 20, 25, 20],
          backgroundColor: '#00ce68'
        }]
      };

      var chartOptions = {
        responsive: true,
        maintainAspectRatio: false,
        legend: {
          display: true,
          position: 'top',
          labels: {
            boxWidth: 80,
            fontColor: 'black'
          }
        },
        scales: {
          yAxes: [{
            scaleLabel: {
              display: true,
              labelString: 'Y Label'
            }
          }],
          xAxes: [{
            scaleLabel: {
              display: true,
              labelString: 'X Label'
            }
          }]
        }
      };

      var ctx = $("#canvas_" + id);
      var myChart = new Chart(ctx, {
        type: 'bar',
        data: speedData,
        options: chartOptions
      });

      ctx.data("graph", myChart);

      /* Clear other property */
      $(".propertyMenu-2").html('');

      var property = new ContentProperty();
      property.createGraphProp(id, myChart, "#div_canvas_" + id, "bar");

      /* Click each widget event */
      var widgetObject = _this.createWidget(id, "div_canvas_");
      widgetObject.on('tap', function (event) {
        /* Change focus */
        $(".sPosition").removeClass("fCorner");
        $("#div_canvas_" + id).addClass("fCorner");

        /* Clear other property */
        $(".propertyMenu-2").html('');

        var property = new ContentProperty();
        property.createGraphProp(id, myChart, "#div_canvas_" + id, "bar");
      }).on('dragmove', function (event) {
        /* Change focus */
        $(".sPosition").removeClass("fCorner");
        $("#div_canvas_" + id).addClass("fCorner");

        var target = event.target,


        // keep the dragged position in the data-x/data-y attributes
        x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx,
            y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy,
            z = parseFloat(target.getAttribute('data-z')) || 0;

        // translate the element
        target.style.webkitTransform = target.style.transform = 'translate(' + x + 'px, ' + y + 'px) rotate(' + z + 'deg)';

        // update the posiion attributes
        target.setAttribute('data-x', x);
        target.setAttribute('data-y', y);
        target.setAttribute('data-z', z);

        /* Clear other property */
        $(".propertyMenu-2").html('');

        var property = new ContentProperty();
        property.createGraphProp(id, myChart, "#div_canvas_" + id, "bar");
      });

      /* Save widget */
      var saveObject = new __WEBPACK_IMPORTED_MODULE_0__WidgetObject_min_js__["default"]();
      console.log(myChart.options);
      saveObject.WidgetGraphObject(id, null, myChart.data, myChart.options, "bar");
      console.log(saveObject.chartOption);
      widgetObjectList.push(saveObject);
      widgetObjectList = deepCopy(widgetObjectList);
      console.log(widgetObjectList[0].chartOption);
    };

    _this.createPieGraph = function () {
      var id = Math.floor(100000 + Math.random() * 900000);
      _this.clearfocus();

      $("#workspace").append('<div id="div_canvas_' + id + '" class="sPosition fCorner"><canvas id="canvas_' + id + '" state-mode="classic"/></div>');

      var speedData = {
        labels: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
        datasets: [{
          label: "Demo Data 1",
          data: [0, 59, 75, 20, 20, 55, 40],
          backgroundColor: '#05acd3'
        }, {
          label: "Demo Data 2",
          data: [0, 29, 25, 20, 20, 25, 20],
          backgroundColor: '#00ce68'
        }]
      };

      var chartOptions = {
        responsive: true,
        maintainAspectRatio: false,
        legend: {
          display: true,
          position: 'top',
          labels: {
            boxWidth: 80,
            fontColor: 'black'
          }
        },
        scales: {
          yAxes: [{
            scaleLabel: {
              display: true,
              labelString: 'Y Label'
            }
          }],
          xAxes: [{
            scaleLabel: {
              display: true,
              labelString: 'X Label'
            }
          }]
        }
      };

      var ctx = $("#canvas_" + id);
      var myChart = new Chart(ctx, {
        type: 'pie',
        data: speedData,
        options: chartOptions
      });

      ctx.data("graph", myChart);

      /* Clear other property */
      $(".propertyMenu-2").html('');

      var property = new ContentProperty();
      property.createGraphProp(id, myChart, "#div_canvas_" + id, "pie");

      /* Click each widget event */
      var widgetObject = _this.createWidget(id, "div_canvas_");
      widgetObject.on('tap', function (event) {
        /* Change focus */
        $(".sPosition").removeClass("fCorner");
        $("#div_canvas_" + id).addClass("fCorner");

        /* Clear other property */
        $(".propertyMenu-2").html('');

        var property = new ContentProperty();
        property.createGraphProp(id, myChart, "#div_canvas_" + id, "pie");
      }).on('dragmove', function (event) {
        /* Change focus */
        $(".sPosition").removeClass("fCorner");
        $("#div_canvas_" + id).addClass("fCorner");

        var target = event.target,


        // keep the dragged position in the data-x/data-y attributes
        x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx,
            y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy,
            z = parseFloat(target.getAttribute('data-z')) || 0;

        // translate the element
        target.style.webkitTransform = target.style.transform = 'translate(' + x + 'px, ' + y + 'px) rotate(' + z + 'deg)';

        // update the posiion attributes
        target.setAttribute('data-x', x);
        target.setAttribute('data-y', y);
        target.setAttribute('data-z', z);

        /* Clear other property */
        $(".propertyMenu-2").html('');

        var property = new ContentProperty();
        property.createGraphProp(id, myChart, "#div_canvas_" + id, "pie");
      });

      /* Save widget */
      var saveObject = new __WEBPACK_IMPORTED_MODULE_0__WidgetObject_min_js__["default"]();
      console.log(myChart.options);
      saveObject.WidgetGraphObject(id, null, myChart.data, myChart.options, "pie");
      console.log(saveObject.chartOption);
      widgetObjectList.push(saveObject);
      widgetObjectList = deepCopy(widgetObjectList);
      console.log(widgetObjectList[0].chartOption);
    };

    _this.createRadarGraph = function () {
      var id = Math.floor(100000 + Math.random() * 900000);
      _this.clearfocus();

      $("#workspace").append('<div id="div_canvas_' + id + '" class="sPosition fCorner"><canvas id="canvas_' + id + '" state-mode="classic"/></div>');

      var speedData = {
        labels: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
        datasets: [{
          label: "Demo Data 1",
          data: [0, 59, 75, 20, 20, 55, 40],
          backgroundColor: 'rgba(255, 255, 255, 0)',
          borderColor: '#05acd3'
        }, {
          label: "Demo Data 2",
          data: [0, 29, 25, 20, 20, 25, 20],
          backgroundColor: 'rgba(255, 255, 255, 0)',
          borderColor: '#00ce68'
        }]
      };

      var chartOptions = {
        responsive: true,
        maintainAspectRatio: false,
        legend: {
          display: true,
          position: 'top',
          labels: {
            boxWidth: 80,
            fontColor: 'black'
          }
        },
        scales: {
          yAxes: [{
            scaleLabel: {
              display: true,
              labelString: 'Y Label'
            }
          }],
          xAxes: [{
            scaleLabel: {
              display: true,
              labelString: 'X Label'
            }
          }]
        }
      };

      var ctx = $("#canvas_" + id);
      var myChart = new Chart(ctx, {
        type: 'radar',
        data: speedData,
        options: chartOptions
      });

      ctx.data("graph", myChart);

      /* Clear other property */
      $(".propertyMenu-2").html('');

      var property = new ContentProperty();
      property.createGraphProp(id, myChart, "#div_canvas_" + id, "radar");

      /* Click each widget event */
      var widgetObject = _this.createWidget(id, "div_canvas_");
      widgetObject.on('tap', function (event) {
        /* Change focus */
        $(".sPosition").removeClass("fCorner");
        $("#div_canvas_" + id).addClass("fCorner");

        /* Clear other property */
        $(".propertyMenu-2").html('');

        var property = new ContentProperty();
        property.createGraphProp(id, myChart, "#div_canvas_" + id, "radar");
      }).on('dragmove', function (event) {
        /* Change focus */
        $(".sPosition").removeClass("fCorner");
        $("#div_canvas_" + id).addClass("fCorner");

        var target = event.target,


        // keep the dragged position in the data-x/data-y attributes
        x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx,
            y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy,
            z = parseFloat(target.getAttribute('data-z')) || 0;

        // translate the element
        target.style.webkitTransform = target.style.transform = 'translate(' + x + 'px, ' + y + 'px) rotate(' + z + 'deg)';

        // update the posiion attributes
        target.setAttribute('data-x', x);
        target.setAttribute('data-y', y);
        target.setAttribute('data-z', z);

        /* Clear other property */
        $(".propertyMenu-2").html('');

        var property = new ContentProperty();
        property.createGraphProp(id, myChart, "#div_canvas_" + id, "radar");
      });

      /* Save widget */
      var saveObject = new __WEBPACK_IMPORTED_MODULE_0__WidgetObject_min_js__["default"]();
      console.log(myChart.options);
      saveObject.WidgetGraphObject(id, null, myChart.data, myChart.options, "radar");
      console.log(saveObject.chartOption);
      widgetObjectList.push(saveObject);
      widgetObjectList = deepCopy(widgetObjectList);
      console.log(widgetObjectList[0].chartOption);
    };

    _this.loadGraphData = function (id, canvasTag, chartData, chartOptions, chartType) {
      _this.clearfocus();
      $("#workspace").append(canvasTag);

      var ctx = $("#canvas_" + id);
      var myChart2 = new Chart(ctx, {
        type: chartType,
        options: chartOptions
      });

      addLabel(myChart2, chartData.labels);
      addDatasets(myChart2, chartData.datasets);

      ctx.data("graph", myChart2);

      /* Clear other property */
      $(".propertyMenu-2").html('');
      _this.clearfocus();

      /* Click each widget event */
      var widgetObject = _this.createWidget(id, "div_canvas_");
      widgetObject.on('tap', function (event) {
        /* Change focus */
        $(".sPosition").removeClass("fCorner");
        $("#div_canvas_" + id).addClass("fCorner");

        /* Clear other property */
        $(".propertyMenu-2").html('');

        var property = new ContentProperty();
        property.createGraphProp(id, myChart2, "#div_canvas_" + id, chartType);
      }).on('dragmove', function (event) {
        /* Change focus */
        $(".sPosition").removeClass("fCorner");
        $("#div_canvas_" + id).addClass("fCorner");

        var target = event.target,


        // keep the dragged position in the data-x/data-y attributes
        x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx,
            y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy,
            z = parseFloat(target.getAttribute('data-z')) || 0;

        // translate the element
        target.style.webkitTransform = target.style.transform = 'translate(' + x + 'px, ' + y + 'px) rotate(' + z + 'deg)';

        // update the posiion attributes
        target.setAttribute('data-x', x);
        target.setAttribute('data-y', y);
        target.setAttribute('data-z', z);

        /* Clear other property */
        $(".propertyMenu-2").html('');

        var property = new ContentProperty();
        property.createGraphProp(id, myChart2, "#div_canvas_" + id, chartType);
      });

      /* Save widget */
      var saveObject = new __WEBPACK_IMPORTED_MODULE_0__WidgetObject_min_js__["default"]();
      saveObject.WidgetGraphObject(id, null, myChart2.data, myChart2.options, chartType);
      widgetObjectList.push(saveObject);
      widgetObjectList = deepCopy(widgetObjectList);
    };

    var addLabel = function addLabel(chart, labels) {
      for (var i = 0; i < labels.length; i++) {
        chart.data.labels.push(labels[i]);
      }
      chart.update();
    };

    var addDatasets = function addDatasets(chart, dataSets) {
      for (var i = 0; i < dataSets.length; i++) {
        var newData = {
          label: dataSets[i].label,
          data: dataSets[i].data,
          backgroundColor: dataSets[i].backgroundColor,
          borderColor: dataSets[i].borderColor
        };

        chart.data.datasets.push(newData);
      }
      chart.update();
    };
    return _this;
  }

  return Graph;
}(Widget); //Widget class

var Map = function (_Widget2) {
  _inherits(Map, _Widget2);

  function Map() {
    _classCallCheck(this, Map);

    var _this2 = _possibleConstructorReturn(this, (Map.__proto__ || Object.getPrototypeOf(Map)).call(this));

    _this2.createMapWidget = function () {
      var id = Math.floor(100000 + Math.random() * 900000);
      _this2.clearfocus();

      $("#workspace").append('<div id="div_map_' + id + '" class="sPosition fCorner crispyOutter"><div id="map_' + id + '" class="crispyInner"></div></div>');

      $('#map_' + id).css('height', 300);
      $('#map_' + id).css('width', 300);

      var mymap = void 0;
      var mapid = "map_" + id;

      mymap = L.map(mapid, {
        dragging: true,
        zoomControl: true,
        scrollWheelZoom: false,
        zoomAnimation: false
      });

      $.getJSON('https://raw.githubusercontent.com/apisit/thailand.json/master/thailand.json').then(function (geoJSON) {
        var osm = new L.TileLayer.BoundaryCanvas("https://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}", {
          boundary: geoJSON,
          minZoom: 5,
          maxZoom: 9,
          attribution: '&copy; Tiles &copy; Esri &mdash; Esri, DeLorme, NAVTEQ'
        });

        mymap.addLayer(osm);
        var ukLayer = L.geoJSON(geoJSON);
        mymap.fitBounds(ukLayer.getBounds());
      });

      // mymap.on('mouseover', console.log("in"));
      // mymap.on('mouseout', console.log("out"));

      /* Clear other property */
      $(".propertyMenu-2").html('');

      var property = new ContentProperty();
      property.createMapProp(id, "#div_map_" + id, "map", mymap);

      /* Click each widget event */
      var widgetObject = _this2.createWidget(id, "div_map_");
      widgetObject.on('tap', function (event) {
        /* Change focus */
        $(".sPosition").removeClass("fCorner");
        $("#div_map_" + id).addClass("fCorner");

        /* Clear other property */
        $(".propertyMenu-2").html('');

        var property = new ContentProperty();
        property.createMapProp(id, "#div_map_" + id, "map", mymap);
      }).on('dragmove', function (event) {
        /* Change focus */
        $(".sPosition").removeClass("fCorner");
        $("#div_map_" + id).addClass("fCorner");

        var target = event.target,


        // keep the dragged position in the data-x/data-y attributes
        x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx,
            y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy,
            z = parseFloat(target.getAttribute('data-z')) || 0;

        // translate the element
        target.style.webkitTransform = target.style.transform = 'translate(' + x + 'px, ' + y + 'px) rotate(' + z + 'deg)';

        // update the posiion attributes
        target.setAttribute('data-x', x);
        target.setAttribute('data-y', y);
        target.setAttribute('data-z', z);

        /* Clear other property */
        $(".propertyMenu-2").html('');

        var property = new ContentProperty();
        property.createMapProp(id, "#div_map_" + id, "map", mymap);
      });

      /* Save widget */
      var saveObject = new __WEBPACK_IMPORTED_MODULE_0__WidgetObject_min_js__["default"]();
      saveObject.MapWidgetObject(id, null, "map");
      widgetObjectList.push(saveObject);
    };

    _this2.loadMapWidget = function (id, mapTag) {
      _this2.clearfocus();

      $("#workspace").append(mapTag);

      $('#map_' + id).css('height', 300);
      $('#map_' + id).css('width', 300);

      var mymap = void 0;
      var mapid = "map_" + id;

      mymap = L.map(mapid, {
        dragging: true,
        zoomControl: true,
        scrollWheelZoom: false,
        zoomAnimation: false
      });

      $.getJSON('https://raw.githubusercontent.com/apisit/thailand.json/master/thailand.json').then(function (geoJSON) {
        var osm = new L.TileLayer.BoundaryCanvas("https://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}", {
          boundary: geoJSON,
          minZoom: 5,
          maxZoom: 9,
          attribution: '&copy; Tiles &copy; Esri &mdash; Esri, DeLorme, NAVTEQ'
        });

        mymap.addLayer(osm);
        var ukLayer = L.geoJSON(geoJSON);
        mymap.fitBounds(ukLayer.getBounds());
      });

      /* Clear other property */
      $(".propertyMenu-2").html('');
      _this2.clearfocus();

      /* Click each widget event */
      /* Click each widget event */
      var widgetObject = _this2.createWidget(id, "div_map_");
      widgetObject.on('tap', function (event) {
        /* Change focus */
        $(".sPosition").removeClass("fCorner");
        $("#div_map_" + id).addClass("fCorner");

        /* Clear other property */
        $(".propertyMenu-2").html('');

        var property = new ContentProperty();
        property.createMapProp(id, "#div_map_" + id, "map", mymap);
      }).on('dragmove', function (event) {
        /* Change focus */
        $(".sPosition").removeClass("fCorner");
        $("#div_map_" + id).addClass("fCorner");

        var target = event.target,


        // keep the dragged position in the data-x/data-y attributes
        x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx,
            y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy,
            z = parseFloat(target.getAttribute('data-z')) || 0;

        // translate the element
        target.style.webkitTransform = target.style.transform = 'translate(' + x + 'px, ' + y + 'px) rotate(' + z + 'deg)';

        // update the posiion attributes
        target.setAttribute('data-x', x);
        target.setAttribute('data-y', y);
        target.setAttribute('data-z', z);

        /* Clear other property */
        $(".propertyMenu-2").html('');

        var property = new ContentProperty();
        property.createMapProp(id, "#div_map_" + id, "map", mymap);
      });

      /* Save widget */
      var saveObject = new __WEBPACK_IMPORTED_MODULE_0__WidgetObject_min_js__["default"]();
      saveObject.MapWidgetObject(id, null, "map");
      widgetObjectList.push(saveObject);
    };
    return _this2;
  }

  return Map;
}(Widget);

/* Font */


var Font = function (_Widget3) {
  _inherits(Font, _Widget3);

  function Font() {
    _classCallCheck(this, Font);

    var _this3 = _possibleConstructorReturn(this, (Font.__proto__ || Object.getPrototypeOf(Font)).call(this));

    _this3.createHeadGraph = function (type) {
      var id = Math.floor(100000 + Math.random() * 900000);
      _this3.clearfocus();

      if (type == "title") {
        $("#workspace").append('<span id="span_' + id + '" class="sPosition fCorner" style="font-size: 100px;">Title</span>');
      } else if (type == "subtitle") {
        $("#workspace").append('<span id="span_' + id + '" class="sPosition fCorner" style="font-size: 40px; color: rgb(73, 73, 73);">subtitle</span>');
      }

      /* Clear other property */
      $(".propertyMenu-2").html('');

      var property = new ContentProperty();
      property.createTextProp(id, "#span_" + id, "text");

      /* Click each widget event */
      var widgetObject = _this3.createWidget(id, "span_");
      widgetObject.on('tap', function (event) {
        /* Change focus */
        $(".sPosition").removeClass("fCorner");
        $("#span_" + id).addClass("fCorner");

        /* Clear other property */
        $(".propertyMenu-2").html('');

        var property = new ContentProperty();
        property.createTextProp(id, "#span_" + id, "text");
      }).on('dragmove', function (event) {
        /* Change focus */
        $(".sPosition").removeClass("fCorner");
        $("#span_" + id).addClass("fCorner");

        var target = event.target,


        // keep the dragged position in the data-x/data-y attributes
        x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx,
            y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy,
            z = parseFloat(target.getAttribute('data-z')) || 0;

        // translate the element
        target.style.webkitTransform = target.style.transform = 'translate(' + x + 'px, ' + y + 'px) rotate(' + z + 'deg)';

        // update the posiion attributes
        target.setAttribute('data-x', x);
        target.setAttribute('data-y', y);
        target.setAttribute('data-z', z);

        /* Clear other property */
        $(".propertyMenu-2").html('');

        var property = new ContentProperty();
        property.createTextProp(id, "#span_" + id, "text");
      });

      /* Save widget */
      var saveObject = new __WEBPACK_IMPORTED_MODULE_0__WidgetObject_min_js__["default"]();
      saveObject.HeadFontObject(id, null, "head");
      widgetObjectList.push(saveObject);
    };

    _this3.loadHeadGraph = function (id, spanTag) {
      _this3.clearfocus();

      $("#workspace").append(spanTag);

      /* Clear other property */
      $(".propertyMenu-2").html('');
      _this3.clearfocus();

      /* Click each widget event */
      var widgetObject = _this3.createWidget(id, "span_");
      widgetObject.on('tap', function (event) {
        /* Change focus */
        $(".sPosition").removeClass("fCorner");
        $("#span_" + id).addClass("fCorner");

        /* Clear other property */
        $(".propertyMenu-2").html('');

        var property = new ContentProperty();
        property.createTextProp(id, "#span_" + id, "text");
      }).on('dragmove', function (event) {
        /* Change focus */
        $(".sPosition").removeClass("fCorner");
        $("#span_" + id).addClass("fCorner");

        var target = event.target,


        // keep the dragged position in the data-x/data-y attributes
        x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx,
            y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy,
            z = parseFloat(target.getAttribute('data-z')) || 0;

        // translate the element
        target.style.webkitTransform = target.style.transform = 'translate(' + x + 'px, ' + y + 'px) rotate(' + z + 'deg)';

        // update the posiion attributes
        target.setAttribute('data-x', x);
        target.setAttribute('data-y', y);
        target.setAttribute('data-z', z);

        /* Clear other property */
        $(".propertyMenu-2").html('');

        var property = new ContentProperty();
        property.createTextProp(id, "#span_" + id, "text");
      });

      /* Save widget */
      var saveObject = new __WEBPACK_IMPORTED_MODULE_0__WidgetObject_min_js__["default"]();
      saveObject.HeadFontObject(id, null, "head");
      widgetObjectList.push(saveObject);
    };

    _this3.createTableGraph = function () {
      var id = Math.floor(100000 + Math.random() * 900000);
      _this3.clearfocus();

      $("#workspace").append('\n                                <table id="table_' + id + '" class="sPosition fCorner table" table-class="1">\n                                  <tr>\n                                    <th>Column</th>\n                                    <th>Column</th>\n                                    <th>Column</th>\n                                  </tr>\n                                  <tr>\n                                    <td>Data</td>\n                                    <td>Data</td>\n                                    <td>Data</td>\n                                  </tr>\n                                  <tr>\n                                    <td>Data</td>\n                                    <td>Data</td>\n                                    <td>Data</td>\n                                  </tr>\n                                </table>\n                              ');

      var editor = new SimpleTableCellEditor("table_" + id);
      editor.SetEditable("td", {
        keys: {
          validation: [13],
          cancellation: [27]
        }
      });

      editor.SetEditable("th", {
        keys: {
          validation: [13],
          cancellation: [27]
        }
      });

      /* Clear other property */
      $(".propertyMenu-2").html('');

      var property = new ContentProperty();
      property.createTableProp(id, "#table_" + id, "table");

      /* Click each widget event */
      var widgetObject = _this3.createWidget(id, "table_");
      widgetObject.on('tap', function (event) {
        /* Change focus */
        $(".sPosition").removeClass("fCorner");
        $("#table_" + id).addClass("fCorner");

        /* Clear other property */
        $(".propertyMenu-2").html('');

        var property = new ContentProperty();
        property.createTableProp(id, "#table_" + id, "table");
      }).on('dragmove', function (event) {
        /* Change focus */
        $(".sPosition").removeClass("fCorner");
        $("#table_" + id).addClass("fCorner");

        var target = event.target,


        // keep the dragged position in the data-x/data-y attributes
        x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx,
            y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy,
            z = parseFloat(target.getAttribute('data-z')) || 0;

        // translate the element
        target.style.webkitTransform = target.style.transform = 'translate(' + x + 'px, ' + y + 'px) rotate(' + z + 'deg)';

        // update the posiion attributes
        target.setAttribute('data-x', x);
        target.setAttribute('data-y', y);
        target.setAttribute('data-z', z);

        /* Clear other property */
        $(".propertyMenu-2").html('');

        var property = new ContentProperty();
        property.createTableProp(id, "#table_" + id, "table");
      });

      /* Save widget */
      var saveObject = new __WEBPACK_IMPORTED_MODULE_0__WidgetObject_min_js__["default"]();
      saveObject.WidgetTableObject(id, null, "table");
      widgetObjectList.push(saveObject);
    };

    _this3.loadTableWidget = function (id, tableTag) {
      _this3.clearfocus();

      $("#workspace").append(tableTag);

      var editor = new SimpleTableCellEditor("table_" + id);
      editor.SetEditable("td", {
        keys: {
          validation: [13],
          cancellation: [27]
        }
      });

      editor.SetEditable("th", {
        keys: {
          validation: [13],
          cancellation: [27]
        }
      });

      /* Clear other property */
      $(".propertyMenu-2").html('');
      _this3.clearfocus();

      /* Click each widget event */
      var widgetObject = _this3.createWidget(id, "table_");
      widgetObject.on('tap', function (event) {
        /* Change focus */
        $(".sPosition").removeClass("fCorner");
        $("#table_" + id).addClass("fCorner");

        /* Clear other property */
        $(".propertyMenu-2").html('');

        var property = new ContentProperty();
        property.createTableProp(id, "#table_" + id, "table");
      }).on('dragmove', function (event) {
        /* Change focus */
        $(".sPosition").removeClass("fCorner");
        $("#table_" + id).addClass("fCorner");

        var target = event.target,


        // keep the dragged position in the data-x/data-y attributes
        x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx,
            y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy,
            z = parseFloat(target.getAttribute('data-z')) || 0;

        // translate the element
        target.style.webkitTransform = target.style.transform = 'translate(' + x + 'px, ' + y + 'px) rotate(' + z + 'deg)';

        // update the posiion attributes
        target.setAttribute('data-x', x);
        target.setAttribute('data-y', y);
        target.setAttribute('data-z', z);

        /* Clear other property */
        $(".propertyMenu-2").html('');

        var property = new ContentProperty();
        property.createTableProp(id, "#table_" + id, "table");
      });

      /* Save widget */
      var saveObject = new __WEBPACK_IMPORTED_MODULE_0__WidgetObject_min_js__["default"]();
      saveObject.WidgetTableObject(id, null, "table");
      widgetObjectList.push(saveObject);
    };
    return _this3;
  } //Constructor


  return Font;
}(Widget); //Font class

var Imagesy = function (_Widget4) {
  _inherits(Imagesy, _Widget4);

  function Imagesy() {
    _classCallCheck(this, Imagesy);

    var _this4 = _possibleConstructorReturn(this, (Imagesy.__proto__ || Object.getPrototypeOf(Imagesy)).call(this));

    _this4.createImageWidget = function (src_image) {
      var id = Math.floor(100000 + Math.random() * 900000);
      _this4.clearfocus();

      $("#workspace").append('<div id="div_' + id + '" class="sPosition fCorner"><img id="image_' + id + '" src="' + src_image + '" class="scaleImage" /></div>');

      $('#div_' + id).css('height', 150);
      $('#div_' + id).css('width', 150);

      /* Clear other property */
      $(".propertyMenu-2").html('');

      var property = new ContentProperty();
      property.createImageProp(id, "#div_" + id, "#image_" + id, "image");

      /* Click each widget event */
      var widgetObject = _this4.createWidget(id, "div_");
      widgetObject.on('tap', function (event) {
        /* Change focus */
        $(".sPosition").removeClass("fCorner");
        $("#div_" + id).addClass("fCorner");

        /* Clear other property */
        $(".propertyMenu-2").html('');

        var property = new ContentProperty();
        property.createImageProp(id, "#div_" + id, "#image_" + id, "image");
      }).on('dragmove', function (event) {
        /* Change focus */
        $(".sPosition").removeClass("fCorner");
        $("#div_" + id).addClass("fCorner");

        var target = event.target,


        // keep the dragged position in the data-x/data-y attributes
        x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx,
            y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy,
            z = parseFloat(target.getAttribute('data-z')) || 0;

        // translate the element
        target.style.webkitTransform = target.style.transform = 'translate(' + x + 'px, ' + y + 'px) rotate(' + z + 'deg)';

        // update the posiion attributes
        target.setAttribute('data-x', x);
        target.setAttribute('data-y', y);
        target.setAttribute('data-z', z);

        /* Clear other property */
        $(".propertyMenu-2").html('');

        var property = new ContentProperty();
        property.createImageProp(id, "#div_" + id, "#image_" + id, "image");
      });

      /* Save widget */
      var saveObject = new __WEBPACK_IMPORTED_MODULE_0__WidgetObject_min_js__["default"]();
      saveObject.WidgetImageObject(id, null, "image");
      widgetObjectList.push(saveObject);
    };

    _this4.loadImageWidget = function (id, divImgTag) {
      _this4.clearfocus();
      $("#workspace").append(divImgTag);

      $('#div_' + id).css('height', 150);
      $('#div_' + id).css('width', 150);

      /* Clear other property */
      $(".propertyMenu-2").html('');

      var property = new ContentProperty();
      property.createImageProp(id, "#div_" + id, "#image_" + id, "image");

      /* Click each widget event */
      var widgetObject = _this4.createWidget(id, "div_");
      widgetObject.on('tap', function (event) {
        /* Change focus */
        $(".sPosition").removeClass("fCorner");
        $("#div_" + id).addClass("fCorner");

        /* Clear other property */
        $(".propertyMenu-2").html('');

        var property = new ContentProperty();
        property.createImageProp(id, "#div_" + id, "#image_" + id, "image");
      }).on('dragmove', function (event) {
        /* Change focus */
        $(".sPosition").removeClass("fCorner");
        $("#div_" + id).addClass("fCorner");

        var target = event.target,


        // keep the dragged position in the data-x/data-y attributes
        x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx,
            y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy,
            z = parseFloat(target.getAttribute('data-z')) || 0;

        // translate the element
        target.style.webkitTransform = target.style.transform = 'translate(' + x + 'px, ' + y + 'px) rotate(' + z + 'deg)';

        // update the posiion attributes
        target.setAttribute('data-x', x);
        target.setAttribute('data-y', y);
        target.setAttribute('data-z', z);

        /* Clear other property */
        $(".propertyMenu-2").html('');

        var property = new ContentProperty();
        property.createImageProp(id, "#div_" + id, "#image_" + id, "image");
      });

      /* Save widget */
      var saveObject = new __WEBPACK_IMPORTED_MODULE_0__WidgetObject_min_js__["default"]();
      saveObject.WidgetImageObject(id, null, "image");
      widgetObjectList.push(saveObject);
    };
    return _this4;
  } //Constructor


  return Imagesy;
}(Widget); //Image class

var Shape = function (_Widget5) {
  _inherits(Shape, _Widget5);

  function Shape() {
    _classCallCheck(this, Shape);

    var _this5 = _possibleConstructorReturn(this, (Shape.__proto__ || Object.getPrototypeOf(Shape)).call(this));

    _this5.createShapeWidget = function (type) {
      var id = Math.floor(100000 + Math.random() * 900000);
      _this5.clearfocus();

      if (type == "square") {
        $("#workspace").append('<div id="div_' + id + '" class="sPosition fCorner"><div id="shape_' + id + '" class="square"></div></div>');
      } else if (type == "circle") {
        $("#workspace").append('<div id="div_' + id + '" class="sPosition fCorner"><div id="shape_' + id + '" class="circle"></div></div>');
      } else if (type == "string") {
        $("#workspace").append('<div id="div_' + id + '" class="sPosition fCorner"><div id="shape_' + id + '" class="string"></div></div>');
      }

      $('#div_' + id).css('height', 150);
      $('#div_' + id).css('width', 150);

      /* Clear other property */
      $(".propertyMenu-2").html('');

      var property = new ContentProperty();
      property.createShapeProp(id, "#div_" + id, "#shape_" + id, type);

      /* Click each widget event */
      var widgetObject = _this5.createWidget(id, "div_");
      widgetObject.on('tap', function (event) {
        /* Change focus */
        $(".sPosition").removeClass("fCorner");
        $("#div_" + id).addClass("fCorner");

        /* Clear other property */
        $(".propertyMenu-2").html('');

        var property = new ContentProperty();
        property.createShapeProp(id, "#div_" + id, "#shape_" + id, type);
      }).on('dragmove', function (event) {
        /* Change focus */
        $(".sPosition").removeClass("fCorner");
        $("#div_" + id).addClass("fCorner");

        var target = event.target,


        // keep the dragged position in the data-x/data-y attributes
        x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx,
            y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy,
            z = parseFloat(target.getAttribute('data-z')) || 0;

        // translate the element
        target.style.webkitTransform = target.style.transform = 'translate(' + x + 'px, ' + y + 'px) rotate(' + z + 'deg)';

        // update the posiion attributes
        target.setAttribute('data-x', x);
        target.setAttribute('data-y', y);
        target.setAttribute('data-z', z);

        /* Clear other property */
        $(".propertyMenu-2").html('');

        var property = new ContentProperty();
        property.createShapeProp(id, "#div_" + id, "#shape_" + id, type);
      });

      /* Save widget */
      var saveObject = new __WEBPACK_IMPORTED_MODULE_0__WidgetObject_min_js__["default"]();
      saveObject.WidgetShapeObject(id, null, type);
      widgetObjectList.push(saveObject);
    };

    _this5.loadShapeWidget = function (id, divTag, type) {
      _this5.clearfocus();
      console.log(divTag);
      $("#workspace").append(divTag);

      /* Clear other property */
      $(".propertyMenu-2").html('');
      _this5.clearfocus();

      /* Click each widget event */
      var widgetObject = _this5.createWidget(id, "div_");
      widgetObject.on('tap', function (event) {
        /* Change focus */
        $(".sPosition").removeClass("fCorner");
        $("#div_" + id).addClass("fCorner");

        /* Clear other property */
        $(".propertyMenu-2").html('');

        var property = new ContentProperty();
        property.createShapeProp(id, "#div_" + id, "#shape_" + id, type);
      }).on('dragmove', function (event) {
        /* Change focus */
        $(".sPosition").removeClass("fCorner");
        $("#div_" + id).addClass("fCorner");

        var target = event.target,


        // keep the dragged position in the data-x/data-y attributes
        x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx,
            y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy,
            z = parseFloat(target.getAttribute('data-z')) || 0;

        // translate the element
        target.style.webkitTransform = target.style.transform = 'translate(' + x + 'px, ' + y + 'px) rotate(' + z + 'deg)';

        // update the posiion attributes
        target.setAttribute('data-x', x);
        target.setAttribute('data-y', y);
        target.setAttribute('data-z', z);

        /* Clear other property */
        $(".propertyMenu-2").html('');

        var property = new ContentProperty();
        property.createShapeProp(id, "#div_" + id, "#shape_" + id, type);
      });

      /* Save widget */
      var saveObject = new __WEBPACK_IMPORTED_MODULE_0__WidgetObject_min_js__["default"]();
      saveObject.WidgetShapeObject(id, null, type);
      widgetObjectList.push(saveObject);
    };
    return _this5;
  } //Constructor


  return Shape;
}(Widget); //Shape class

var Property = function Property() {
  _classCallCheck(this, Property);

  /* Create UI & function property */
  $("#propertySpace").html('<div class="propertyMenu-2">\n                                <div class="propertyMenu-2-context"></div>\n                                <div class="propertyMenu-2-paper"></div>\n                              </div>');

  this.createContext = function (id, full_id, type, myChart) {
    $(".propertyMenu-2-context").append('  \n            <div class="container">\n                <div class="row row-block border-bottom-only">\n                    <div class="col-2">\n                        <button type="button" id="backest_widget_' + id + '" class="btn btn-default"><i class="far fa-caret-square-down"></i></button>\n                    </div>\n                    <div class="col-3">\n                        <button type="button" id="topest_widget_' + id + '"  class="btn btn-default"><i class="far fa-caret-square-up"></i></button>\n                    </div>\n                    <div class="col-2">\n                        <button type="button" id="align_left_widget_' + id + '" class="btn btn-default"><i class="fas fa-align-left"></i></button>\n                    </div>\n                    <div class="col-2">\n                        <button type="button" id="align_center_widget_' + id + '" class="btn btn-default"><i class="fas fa-align-center"></i></button>\n                    </div>\n                    <div class="col-2">         \n                        <button type="button" id="align_right_widget_' + id + '" class="btn btn-default"><i class="fas fa-align-right"></i></button>\n                    </div>\n                </div>\n                <div class="row row-block">\n                    <div class="col-7">\n                        <button type="button" id="download_widget_' + id + '" class="btn btn-default form-control">Download</button>\n                    </div>\n                    <div class="col-2">\n                        <button type="button" id="preview_widget_' + id + '" class="btn btn-default" ><i class="fas fa-desktop"></i></button>\n                    </div>\n                    <div class="col-1">\n                        <button type="button" id="delete_widget_' + id + '" class="btn btn-default" ><i class="fas fa-trash-alt"></i></button>\n                    </div>\n                </div>\n            </div>');

    $("#backest_widget_" + id).click(function () {
      $(".sPosition").each(function (index) {
        if ($(this).hasClass("fCorner")) {
          $(this).css("z-index", 0);
        } else {
          $(this).css("z-index", index + 1);
        }
      });
    });

    $("#topest_widget_" + id).click(function () {
      $(".sPosition").each(function (index) {
        if ($(this).hasClass("fCorner")) {
          $(this).css("z-index", $(".sPosition").length);
        } else {
          $(this).css("z-index", index);
        }
      });
    });

    $("#align_left_widget_" + id).click(function () {
      var transform = $(full_id).css('transform').split(',');
      var transformY = transform[5].split(')')[0];

      $(full_id).css('transform', 'translate(0px, ' + transformY + 'px)');
      $(full_id).attr('data-x', 0);
      $(full_id).attr('data-y', transformY);
    });

    $("#align_center_widget_" + id).click(function () {
      var transform = $(full_id).css('transform').split(',');
      var transformY = transform[5].split(')')[0];
      var transformX = 595 / 2 - $(full_id).width() / 2;

      $(full_id).css('transform', 'translate(' + transformX + 'px, ' + transformY + 'px)');
      $(full_id).attr('data-x', transformX);
      $(full_id).attr('data-y', transformY);
    });

    $("#align_right_widget_" + id).click(function () {
      var transform = $(full_id).css('transform').split(',');
      var transformY = transform[5].split(')')[0];
      var transformX = 595 - $(full_id).width();

      $(full_id).css('transform', 'translate(' + transformX + 'px, ' + transformY + 'px)');
      $(full_id).attr('data-x', transformX);
      $(full_id).attr('data-y', transformY);
    });

    $("#download_widget_" + id).click(function () {
      var transform = $(full_id).css('transform');
      var data_x = $(full_id).css('data-x');
      var data_y = $(full_id).css('data-y');
      var width = $(full_id).css('width');
      var height = $(full_id).css('height');

      $(full_id).css('transform', 'translate(0px, 0px)');
      $(full_id).css('data-x', 0);
      $(full_id).css('data-y', 0);
      $(full_id).css('width', 1920);
      $(full_id).css('height', 1080);
      $(full_id).removeClass("fCorner");

      $("#modelDownload_" + id).remove();
      var modalDownload = '\n        <div class="modal" id="modelDownload_' + id + '" class="modelcropper">\n            <div class="modal-dialog">\n                <div class="modal-content">\n                    <div class="modal-header">\n                        <h4 class="modal-title">Download</h4>\n                        <button type="button" id="close_download_' + id + '" class="close" data-dismiss="modal">&times;</button>\n                    </div>\n\n                    <div class="modal-body">\n                        <div class="row justify-content-center">\n                            <div class="col-5 header-line">\n                               <span class="header-title">Save as file</span>\n                               <div class="row">\n                                  <div class="col-6">\n                                    <button type="button" id="download_as_pdf_' + id + '" class="btn btn-default" style="width:inherit;" data-loading-text="<i class=\'fas fa-circle-notch fa-spin\'></i>LOADING..."><i class="far fa-file-pdf" style="margin-right:10px"></i>PDF</button>\n                                  </div>\n                                  <div class="col-6">\n                                    <button type="button" id="download_as_excel_' + id + '" class="btn btn-default" style="width:inherit;" data-loading-text="<i class=\'fas fa-circle-notch fa-spin\'></i>LOADING..."><i class="fas fa-file-excel" style="margin-right:10px"></i>EXCEL</button>\n                                  </div>\n                               </div>\n                            </div>\n                            <div class="col-5 header-line">\n                              <span class="header-title">Save as image</span>\n                                <div class="row">\n                                  <div class="col-6">\n                                    <button type="button" id="download_as_png_' + id + '" class="btn btn-default" style="width:inherit;" data-loading-text="<i class=\'fas fa-circle-notch fa-spin\'></i>LOADING..."><i class="far fa-file-image" style="margin-right:10px"></i>PNG</button>\n                                  </div>\n                                  <div class="col-6">\n                                    <button type="button" id="download_as_jpg_' + id + '" class="btn btn-default" style="width:inherit;" data-loading-text="<i class=\'fas fa-circle-notch fa-spin\'></i>LOADING..."><i class="far fa-image" style="margin-right:10px"></i>JPG</button>\n                                  </div>\n                               </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>';

      $('body').append(modalDownload);
      $("#modelDownload_" + id).modal('show');

      $("#download_as_pdf_" + id).click(function () {
        __WEBPACK_IMPORTED_MODULE_4__utility__["a" /* LOADING */].set($("#download_as_pdf_" + id));

        html2canvas(document.querySelector(full_id)).then(function (canvas) {
          var myLinkImage = canvas.toDataURL("image/png");
          var pdf = new jsPDF();

          pdf.addImage(myLinkImage, 'JPEG', 0, 0, pdf.internal.pageSize.getWidth(), pdf.internal.pageSize.getHeight());
          pdf.save(infoName + ".pdf");

          __WEBPACK_IMPORTED_MODULE_4__utility__["a" /* LOADING */].reset($("#download_as_pdf_" + id));
        });
      });

      $("#download_as_png_" + id).click(function () {
        __WEBPACK_IMPORTED_MODULE_4__utility__["a" /* LOADING */].set($("#download_as_png_" + id));

        html2canvas(document.querySelector(full_id)).then(function (canvas) {
          var myLinkImage = canvas.toDataURL("image/png");

          var a = document.createElement("a");
          a.href = myLinkImage;
          a.setAttribute("download", infoName + ".png");
          var b = document.createEvent("MouseEvents");
          b.initEvent("click", false, true);
          a.dispatchEvent(b);

          __WEBPACK_IMPORTED_MODULE_4__utility__["a" /* LOADING */].reset($("#download_as_png_" + id));
        });
      });

      $("#download_as_jpg_" + id).click(function () {
        __WEBPACK_IMPORTED_MODULE_4__utility__["a" /* LOADING */].set($("#download_as_jpg_" + id));

        html2canvas(document.querySelector(full_id)).then(function (canvas) {
          var myLinkImage = canvas.toDataURL("image/png");

          var a = document.createElement("a");
          a.href = myLinkImage;
          a.setAttribute("download", infoName + ".jpg");
          var b = document.createEvent("MouseEvents");
          b.initEvent("click", false, true);
          a.dispatchEvent(b);

          __WEBPACK_IMPORTED_MODULE_4__utility__["a" /* LOADING */].reset($("#download_as_jpg_" + id));
        });
      });

      $('#modelDownload_' + id).on('hidden.bs.modal', function (e) {
        restoreSetting();

        $("#modelDownload_" + id).modal('hide');
        $("#modelDownload_" + id).modal('dispose');
        $("#modelDownload_" + id).remove();
      });

      function restoreSetting() {
        $(full_id).css('transform', transform);
        $(full_id).css('data-x', data_x);
        $(full_id).css('data-y', data_y);
        $(full_id).css('width', width);
        $(full_id).css('height', height);
        $(full_id).addClass("fCorner");
      }
    });

    $("#preview_widget_" + id).click(function () {
      var popup = window.open();
      popup.document.write("<h1 id='loading'>Loading...</h1>");

      var transform = $(full_id).css('transform');
      var data_x = $(full_id).css('data-x');
      var data_y = $(full_id).css('data-y');

      $(full_id).css('transform', 'translate(0px, 0px)');
      $(full_id).css('data-x', 0);
      $(full_id).css('data-y', 0);
      $(full_id).removeClass("fCorner");

      html2canvas(document.querySelector(full_id)).then(function (div) {
        var myImage = div.toDataURL("image/png");

        $(full_id).css('transform', transform);
        $(full_id).css('data-x', data_x);
        $(full_id).css('data-y', data_y);
        $(full_id).addClass("fCorner");

        var img = '<img src="' + myImage + '">';
        popup.document.write(img);
        popup.document.title = "Preview";
        popup.document.getElementById("loading").remove();
      });
    });

    $("#delete_widget_" + id).click(function () {
      widgetObjectList = arrayRemove(widgetObjectList, id);

      if (type == "line" || type == "bar" || type == "pie" || type == "radar") {
        var ctx = document.getElementById("div_canvas_" + id);
        myChart.destroy();
        ctx.remove();
      } else if (type == "map") {
        var _ctx = document.getElementById("div_map_" + id);
        _ctx.remove();
      } else if (type == "text") {
        var _ctx2 = document.getElementById("span_" + id);
        _ctx2.remove();
      } else if (type == "table") {
        var _ctx3 = document.getElementById("table_" + id);
        _ctx3.remove();
      } else if (type == "image") {
        var _ctx4 = document.getElementById("div_" + id);
        _ctx4.remove();
      } else if (type == "square" || type == "circle" || type == "string") {
        var _ctx5 = document.getElementById("div_" + id);
        _ctx5.remove();
      }
      $(".propertyMenu-2").html('');
    });
  };

  this.createEditdata = function (id, myChart, full_id, type) {
    var countChartData = 0;
    var selectDatasourceList = [];
    var selectDataList = [];
    var selectAggList = [];
    var selectDatasourceListSeries = [];
    var selectDataListSeries = [];
    var stateMode;
    var dailyLables;
    var monthlyLables;
    var yearlyLables;
    var apiList = [];
    var periodType;

    $(".propertyMenu-2-paper").append('                \n          <div class="propertyMenu-2-block">\n            <button type="button" id="edit_chart_data_' + id + '" class="btn btn-default form-control button-width">Edit data</button>     \n          </div>');

    $("#edit_chart_data_" + id).click(function () {
      $("#model_edit_chart_data_" + id).remove();

      selectDatasourceList = [];
      selectDataList = [];
      selectAggList = [];
      selectDatasourceListSeries = [];
      selectDataListSeries = [];
      stateMode = "classic";
      apiList = [];
      periodType = "daily";

      var modalEditChartData = '\n        <div class="modal" id="model_edit_chart_data_' + id + '">\n            <div class="modal-dialog">\n                <div class="modal-content">\n                    <div class="modal-header">\n                        <h4 class="modal-title">Edit data chart</h4>\n                        <button type="button" class="close" data-dismiss="modal">&times;</button>\n                    </div>\n\n                    <div class="modal-body">\n                      <div class="row" style="box-shadow: 0 3px 2px -2px grey; margin-bottom:15px;"> \n                        <div class="col-12">\n                          <ul class="nav nav-tabs" style="border-bottom:none; padding-top:5px; padding-bottom:10px;">\n                            <li class="multi-border"><span class="btn-default" id="btn_classic_' + id + '" style="margin:25px;">Classic</span></li>\n                            <li><span id="btn_series_' + id + '" style="margin:25px;">Time series</span></li>\n                          </ul>   \n                        </div>           \n                      </div>\n                      <div id="classic_' + id + '" style="display:none;">  \n                        <div class="row">\n                          <div class="col-5">\n                            <div class="row" style="padding-top:5px; padding-bottom:5px;">\n                              <div class="col-4 mt-2">\n                                <span>Select period</span>\n                              </div>\n                              <div class="col-8">\n                                <ul class="nav nav-tabs" id="period_tab_' + id + '" style="border-bottom:none; padding-top:5px; padding-bottom:5px;">\n                                  <li><button class="btn btn-primary period-tab" data-toggle="tab" href="#daily_' + id + '" id="btn_daily_' + id + '" value="daily" style="margin-right:5px;">Daily</button></li>\n                                  <li><button class="btn btn-primary period-tab" data-toggle="tab" href="#monthly_' + id + '" id="btn_monthly_' + id + '" value="monthly" style="margin-right:5px;">Monthly</button></li>\n                                  <li><button class="btn btn-primary period-tab" data-toggle="tab" href="#yearly_' + id + '" id="btn_yearly_' + id + '" value="yearly" style="margin-right:5px;">Yearly</button></li>\n                                </ul>\n                              </div>\n                            </div>\n                            <div class="tab-content" style="padding-top:5px; padding-bottom:5px;">\n                              <div id="daily_' + id + '" class="tab-pane fade">  \n                                <div class="row" style="padding-top:5px; padding-bottom:5px;">\n                                  <div class="col-6">\n                                    <span>Start date</span>\n                                  </div>\n                                  <div class="col-6">\n                                    <span>End date</span>\n                                  </div>\n                                </div>            \n                                <div class="row" style="padding-top:5px; padding-bottom:5px;">\n                                  <div class="col-6">\n                                    <input type="text" id="start_daily_' + id + '" class="form-control"/>\n                                  </div>\n                                  <div class="col-6">\n                                    <input type="text" id="end_daily_' + id + '" class="form-control"/>\n                                  </div>\n                                </div>\n                              </div>\n                              <div id="monthly_' + id + '" class="tab-pane fade">\n                                <div class="row" style="padding-top:5px; padding-bottom:5px;">\n                                  <div class="col-6">\n                                    <span>Start month</span>\n                                  </div>\n                                  <div class="col-6">\n                                    <span>End month</span>\n                                  </div>\n                                </div>            \n                                <div class="row" style="padding-top:5px; padding-bottom:5px;">\n                                  <div class="col-6">\n                                    <input type="text" id="start_monthly_' + id + '" class="form-control"/>\n                                  </div>\n                                  <div class="col-6">\n                                    <input type="text" id="end_monthly_' + id + '" class="form-control"/>\n                                  </div>\n                                </div>\n                              </div>\n                              <div id="yearly_' + id + '" class="tab-pane fade">\n                                <div class="row" style="padding-top:5px; padding-bottom:5px;">\n                                  <div class="col-6">\n                                    <span>Start year</span>\n                                  </div>\n                                  <div class="col-6">\n                                    <span>End year</span>\n                                  </div>\n                                </div>            \n                                <div class="row" style="padding-top:5px; padding-bottom:5px;">\n                                  <div class="col-6">\n                                    <input type="text" id="start_yearly_' + id + '" class="form-control"/>\n                                  </div>\n                                  <div class="col-6">\n                                    <input type="text" id="end_yearly_' + id + '" class="form-control"/>\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                          <div class="col-7" id="div_preview_canvas_' + id + '_classic">\n                            <canvas id="preview_canvas_' + id + '_classic"></canvas>\n                          </div>\n                        </div>\n                        <hr>\n                        <div class="row" style="padding-top:5px; padding-bottom:10px; box-shadow: 0 3px 2px -2px grey;">\n                          <div class="col-6">\n                            <span>Set data</span>\n                            <button id="add_new_data_' + id + '" class="btn btn-default btn-sm btn-radius"><i class="fas fa-plus"></i>Add new data</button>\n                          </div>\n                          <div class="col-1 mt-2">\n                            <span>X Label </span>\n                          </div>\n                          <div class="col-2">\n                            <input type="text" id="x_label_classic_' + id + '" class="form-control" value="' + myChart.options.scales.xAxes[0].scaleLabel.labelString + '"/>\n                          </div>\n                          <div class="col-1 mt-2">\n                            <span>Y Label </span>\n                          </div>\n                          <div class="col-2">\n                            <input type="text" id="y_label_classic_' + id + '"  class="form-control" value="' + myChart.options.scales.yAxes[0].scaleLabel.labelString + '"/>\n                          </div>\n                        </div>\n                        <div id="chart_data_' + id + '" class="row taboverflow" style="padding-top:5px; padding-bottom:5px;">\n                        </div>\n                      </div>\n\n                      <div id="series_' + id + '" style="display:none;">\n                        <div class="row" style="height:150px;">\n                          <div class="col-5">\n                            <div class="row">\n                              <div class="col-12" style="padding-top:5px; padding-bottom:5px;">\n                                <span>Time series period</span>\n                              </div>\n                            </div>\n                            <div class="row">\n                              <div class="col-12" style="padding-top:5px; padding-bottom:5px;">\n                                <select type="text" id="select_period_series_' + id + '" class="form-control">\n                                  <option value="0">-Select-</option>\n                                  <option value="15day">15 Day later</option>\n                                  <option value="6month">6 Month later</option>\n                                  <option value="1year">1 Year later</option>\n                                  <option value="custom">Custom</option>\n                                </select>     \n                              </div>\n                            </div>\n                            <div class="row" id="div_custom_' + id + '" style="display:none;">\n                              <div class="col-3" style="padding-top:5px; padding-bottom:5px;">\n                                <input type="text" class="form-control"/>\n                              </div>\n                              <div class="col-9" style="padding-top:5px; padding-bottom:5px;">\n                                <select type="text" class="form-control">\n                                  <option value="0">-Select-</option>\n                                  <option value="day">Day later</option>\n                                  <option value="week">Week later</option>\n                                  <option value="month">Month later</option>\n                                  <option value="year">Year later</option>\n                                </select>  \n                              </div>\n                            </div>\n                          </div>\n                          <div class="col-7" id="div_preview_canvas_' + id + '_series">\n                            <canvas id="preview_canvas_' + id + '_series"></canvas>\n                          </div>\n                        </div>\n                        <hr>\n                        <div class="row" style="padding-top:5px; padding-bottom:10px; box-shadow: 0 3px 2px -2px grey;">\n                          <div class="col-6">\n                            <span>Set data</span>\n                            <button id="add_new_data_' + id + '_series" class="btn btn-default btn-sm btn-radius"><i class="fas fa-plus"></i>Add new data</button>\n                          </div>\n                          <div class="col-1 mt-2">\n                            <span>X Label </span>\n                          </div>\n                          <div class="col-2">\n                            <input type="text" id="x_label_series_' + id + '" class="form-control" value="' + myChart.options.scales.xAxes[0].scaleLabel.labelString + '"/>\n                          </div>\n                          <div class="col-1 mt-2">\n                            <span>Y Label </span>\n                          </div>\n                          <div class="col-2">\n                            <input type="text" id="y_label_series_' + id + '" class="form-control" value="' + myChart.options.scales.yAxes[0].scaleLabel.labelString + '"/>\n                          </div>\n                        </div>\n                        <div id="chart_data_' + id + '_series" class="row taboverflow" style="padding-top:5px; padding-bottom:5px;">\n                        </div>\n                      </div>\n    \n                    </div>\n                    <div class="modal-footer" style="box-shadow: 0 -3px 2px -2px grey;">\n                        <button type="button" id="save_chart_data_' + id + '" class="btn btn-success">Apply</button>\n                    </div>\n                </div>\n            </div>\n        </div>';

      $('body').append(modalEditChartData);
      $("#model_edit_chart_data_" + id).modal('show');

      if (type == "pie" || type == "radar") {
        $('#btn_series_' + id).prop('disabled', true);
      }
      var stateModeCheck = $('#canvas_' + id);

      $('#btn_classic_' + id).click(function () {
        stateMode = "classic";
        $("#classic_" + id).fadeIn();
        $("#series_" + id).hide();
        setButtonPeriod(id, stateModeCheck.attr('period-type'), stateModeCheck.attr('start-value'), stateModeCheck.attr('end-value'));
      });

      $('#btn_series_' + id).click(function () {
        stateMode = "series";
        $("#series_" + id).fadeIn();
        $("#classic_" + id).hide();
      });

      if (stateModeCheck.attr('state-mode') == "classic") {
        $("#btn_classic_" + id).click();

        setButtonPeriod(id, stateModeCheck.attr('period-type'), stateModeCheck.attr('start-value'), stateModeCheck.attr('end-value'));

        var classicChart = cloneCanvas(myChart, id, type, "classic");
        setDefaultData(classicChart);
        setValueClassicChart(classicChart);

        var seriesChart = newSeriesCanvas(id, type, "series");
        setDefaultDataSeries(seriesChart);
      } else if (stateModeCheck.attr('state-mode') == "series") {
        $("#btn_series_" + id).click();

        var seriesChart = cloneCanvas(myChart, id, type, "series");
        setDefaultDataSeries(seriesChart);
        setValueSeriesChart(seriesChart);

        var classicChart = newClassicCanvas(id, type, "classic");
        setDefaultData(classicChart);
      }

      $('#select_period_series_' + id).change(function () {
        if ($('#select_period_series_' + id).val() == "custom") {
          $("#div_custom_" + id).show();
        } else {
          $("#div_custom_" + id).hide();
        }
      });

      //Function overall
      $("#btn_daily_" + id).click(function () {

        classicChart.data.labels = [];
        dailyLables = [];

        for (var i = 0; i < classicChart.data.datasets.length; i++) {
          classicChart.data.datasets.data = [];
        }

        var ctx = $("#chart_data_" + id);
        ctx.contents().remove();

        setDefaultData(classicChart);
      });

      $("#btn_monthly_" + id).click(function () {

        classicChart.data.labels = [];
        monthlyLables = [];

        for (var i = 0; i < classicChart.data.datasets.length; i++) {
          classicChart.data.datasets.data = [];
        }

        var ctx = $("#chart_data_" + id);
        ctx.contents().remove();

        setDefaultData(classicChart);
      });

      $("#add_new_data_" + id).click(function () {

        var newData = void 0;

        if (type == "bar" || type == "pie") {
          newData = {
            label: "New data",
            data: [100, 80, 60],
            backgroundColor: '#343a40'
          };
        } else {
          newData = {
            label: "New data",
            data: [100, 80, 60],
            backgroundColor: 'rgba(255, 255, 255, 0)',
            borderColor: '#343a40'
          };
        }

        classicChart.data.datasets.push(newData);
        classicChart.update();

        var ctx = $("#chart_data_" + id);
        ctx.contents().remove();

        selectDatasourceList.push(0);
        selectDataList.push("Null");
        selectAggList.push(0);

        setDefaultData(classicChart);
      });

      $("#add_new_data_" + id + "_series").click(function () {

        var newData = void 0;

        if (type == "bar" || type == "pie") {
          newData = {
            label: "New data",
            data: [{ x: new Date('2019', '02', '15'), y: 50 }],
            backgroundColor: '#343a40'
          };
        } else {
          newData = {
            label: "New data",
            data: [{ x: new Date('2019', '02', '15'), y: 50 }],
            backgroundColor: 'rgba(255, 255, 255, 0)',
            borderColor: '#343a40'
          };
        }

        seriesChart.data.datasets.push(newData);
        seriesChart.update();

        var ctx = $("#chart_data_" + id + "_series");
        ctx.contents().remove();

        selectDatasourceListSeries.push(0);
        selectDataListSeries.push("Null");

        setDefaultDataSeries(seriesChart);
      });

      $("#x_label_classic_" + id).change(function () {
        classicChart.options.scales.xAxes[0].scaleLabel.labelString = $("#x_label_classic_" + id).val();
        classicChart.update();
      });

      $("#y_label_classic_" + id).change(function () {
        classicChart.options.scales.yAxes[0].scaleLabel.labelString = $("#y_label_classic_" + id).val();
        classicChart.update();
      });

      $("#x_label_series_" + id).change(function () {
        seriesChart.options.scales.xAxes[0].scaleLabel.labelString = $("#x_label_series_" + id).val();
        seriesChart.update();
      });

      $("#y_label_series_" + id).change(function () {
        seriesChart.options.scales.yAxes[0].scaleLabel.labelString = $("#y_label_series_" + id).val();
        seriesChart.update();
      });

      $("#save_chart_data_" + id).click(function () {

        if (stateMode == "classic") {
          addOptions(myChart, classicChart.options);
          addLabel(myChart, classicChart.data.labels);
          addDatasets(myChart, classicChart.data.datasets);
        } else if (stateMode == "series") {
          addOptions(myChart, seriesChart.options);
          addLabel(myChart, seriesChart.data.labels);
          addDatasets(myChart, seriesChart.data.datasets);
        }

        var ctxAttr = $('#canvas_' + id);
        ctxAttr.attr('state-mode', stateMode);
        ctxAttr.attr('period-type', periodType);
        ctxAttr.attr('start-value', $("start_" + periodType + "_" + id).val());
        ctxAttr.attr('end-value', $("end_" + periodType + "_" + id).val());

        var ctx = $('#canvas_' + id);
        ctx.data("graph", myChart);

        $(".propertyMenu-2").html('');

        var property = new ContentProperty();
        property.createGraphProp(id, myChart, "#div_canvas_" + id, type);

        $("#model_edit_chart_data_" + id).modal('hide');
      });
    });

    function setButtonPeriod(id, periodType, startValue, endValue) {
      if (periodType == "daily") {
        $("#btn_daily_" + id).click();
        $("#start_daily_" + id).val(startValue);
        $("#end_daily_" + id).val(endValue);
        dailyLables = myChart.data.labels;
      } else if (periodType == "monthly") {
        $("#btn_monthly_" + id).click();
        $("#start_monthly_" + id).val(startValue);
        $("#end_monthly_" + id).val(endValue);
        monthlyLables = myChart.data.labels;
      } else if (periodType == "yearly") {
        $("#btn_yearly_" + id).click();
        $("#start_yearly_" + id).val(startValue);
        $("#end_yearly_" + id).val(endValue);
        yearlyLables = myChart.data.labels;
      } else {
        $("#btn_daily_" + id).click();
      }
    }

    function setValueClassicChart(classicChart) {
      for (var k = 0; k < classicChart.data.datasets.length; k++) {
        var ctx = $('#canvas_' + id);

        if (ctx.attr('select-datasource-list') != null) {
          selectDatasourceList.push(ctx.attr('select-datasource-list').split(',')[k]);
        } else {
          selectDatasourceList.push(0);
        }

        if (ctx.attr('select-keydata-list') != null) {
          selectDataList.push(ctx.attr('select-keydata-list').split(',')[k]);
        } else {
          selectDataList.push("Null");
        }

        if (ctx.attr('select-agg-list') != null) {
          selectAggList.push(ctx.attr('select-agg-list').split(',')[k]);
        } else {
          selectAggList.push(0);
        }
      }
    }

    function setValueSeriesChart(seriesChart) {
      for (var k = 0; k < seriesChart.data.datasets.length; k++) {
        var ctx = $('#canvas_' + id);

        if (ctx.attr('select-datasource-list-series') != null) {
          selectDatasourceListSeries.push(ctx.attr('select-datasource-list-series').split(',')[k]);
        } else {
          selectDatasourceListSeries.push(0);
        }

        if (ctx.attr('select-keydata-list-series') != null) {
          selectDataListSeries.push(ctx.attr('select-keydata-list-series').split(',')[k]);
        } else {
          selectDataListSeries.push("Null");
        }
      }
    }

    function newClassicCanvas(id, type, stateType) {
      var ctx = document.getElementById("preview_canvas_" + id + "_" + stateType);

      var demoData = void 0;

      if (type == "bar" || type == "pie") {
        demoData = {
          labels: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
          datasets: [{
            label: "Demo Data 1",
            data: [0, 59, 75, 20, 20, 55, 40],
            backgroundColor: '#05acd3'
          }, {
            label: "Demo Data 2",
            data: [0, 29, 25, 20, 20, 25, 20],
            backgroundColor: '#00ce68'
          }]
        };
      } else {
        demoData = {
          labels: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
          datasets: [{
            label: "Demo Data 1",
            data: [0, 59, 75, 20, 20, 55, 40],
            backgroundColor: 'rgba(255, 255, 255, 0)',
            borderColor: '#05acd3'
          }, {
            label: "Demo Data 2",
            data: [0, 29, 25, 20, 20, 25, 20],
            backgroundColor: 'rgba(255, 255, 255, 0)',
            borderColor: '#00ce68'
          }]
        };
      }

      var chartOptions = {
        responsive: true,
        maintainAspectRatio: false,
        legend: {
          display: true,
          position: 'top',
          labels: {
            boxWidth: 80,
            fontColor: 'black'
          }
        },
        scales: {
          yAxes: [{
            scaleLabel: {
              display: true,
              labelString: 'Y Label'
            }
          }],
          xAxes: [{
            scaleLabel: {
              display: true,
              labelString: 'X Label'
            }
          }]
        }
      };

      var myChart2 = new Chart(ctx, {
        type: type,
        data: demoData,
        options: chartOptions
      });

      return myChart2;
    }

    function newSeriesCanvas(id, type, stateType) {
      var ctx = document.getElementById("preview_canvas_" + id + "_" + stateType);

      var demoData = void 0;

      if (type == "bar" || type == "pie") {
        demoData = {
          datasets: [{
            label: "Demo Data",
            data: [{ x: new Date(2017, 5, 11), y: 100 }, { x: new Date(2019, 2, 21), y: 50 }],
            backgroundColor: '#05acd3'
          }]
        };
      } else {
        demoData = {
          datasets: [{
            label: "Demo Data",
            data: [{ x: new Date(2017, 5, 11), y: 100 }, { x: new Date(2019, 2, 21), y: 50 }],
            backgroundColor: 'rgba(255, 255, 255, 0)',
            borderColor: '#05acd3'
          }]
        };
      }

      var chartOptions = {
        responsive: true,
        maintainAspectRatio: false,
        legend: {
          display: true,
          position: 'top',
          labels: {
            boxWidth: 80,
            fontColor: 'black'
          }
        },
        scales: {
          xAxes: [{
            type: 'time',
            distribution: 'linear',
            ticks: {
              source: 'auto'
            },
            scaleLabel: {
              display: true,
              labelString: 'X Label'
            }
          }],
          yAxes: [{
            scaleLabel: {
              display: true,
              labelString: 'Y Label'
            }
          }]
        }
      };

      var myChart2 = new Chart(ctx, {
        type: type,
        data: demoData,
        options: chartOptions
      });

      return myChart2;
    }

    function cloneCanvas(myChart, id, type, stateType) {

      var ctx = document.getElementById("preview_canvas_" + id + "_" + stateType);
      var myChart2 = new Chart(ctx, {
        type: type,
        options: myChart.options
      });

      addLabel(myChart2, myChart.data.labels);
      addDatasets(myChart2, myChart.data.datasets);

      return myChart2;
    }

    function addLabel(chart, labels) {
      chart.data.labels = [];
      for (var i = 0; i < labels.length; i++) {
        chart.data.labels.push(labels[i]);
      }
      chart.update();
    }

    function addDatasets(chart, dataSets) {
      chart.data.datasets = [];
      for (var i = 0; i < dataSets.length; i++) {
        var newData = {
          label: dataSets[i].label,
          data: dataSets[i].data,
          backgroundColor: dataSets[i].backgroundColor,
          borderColor: dataSets[i].borderColor
        };

        chart.data.datasets.push(newData);
      }
      chart.update();
    }

    function addOptions(chart, option) {
      chart.options = option;
      chart.update();
    }

    function setDefaultData(chart) {
      var colorChart = void 0;

      for (var i = 0; i < chart.data.datasets.length; i++) {
        if (type == "bar" || type == "pie") {
          colorChart = chart.data.datasets[i].backgroundColor;
        } else {
          colorChart = chart.data.datasets[i].borderColor;
        }

        $("#chart_data_" + id).append('\n              <div id="div_preview_chart_' + id + '_' + i + '" class="col-12">\n                <div class="row" style="padding-top:5px; padding-bottom:5px;">\n                  <div class="col-2">\n                    <span>Datasource</span>\n                  </div>\n                  <div class="col-4">\n                    <span>Data</span>\n                  </div>\n                  <div class="col-2">\n                    <span>Aggregate</span>\n                  </div>\n                  <div class="col-2">\n                    <span>Label</span>\n                  </div>\n                  <div class="col-1">\n                    <span>Color</span>\n                  </div>\n                </div>\n                <div class="row" style="padding-top:5px; padding-bottom:5px;">\n                  <div class="col-2">\n                    <select type="text" id="select_datasource_list_' + id + '_' + i + '" name="list_datasource" class="form-control">\n                      <option value="0">-Select-</option>\n                    </select>\n                  </div>\n                  <div class="col-4">\n                    <input type="text" list="datalist_keydata_list_' + id + '_' + i + '" id="id_keydata_list_' + id + '_' + i + '" class="form-control" />\n                    <datalist id="datalist_keydata_list_' + id + '_' + i + '">\n                      <option value="Null"></option>\n                    </datalist> \n                  </div>\n                  <div class="col-2">         \n                    <select type="text" id="select_agg_list_' + id + '_' + i + '" class="form-control">\n                      <option value="0">-Select-</option>\n                      <option value="1">Avg</option>\n                      <option value="2">Max</option>\n                      <option value="3">Min</option>\n                    </select>\n                  </div>\n                  <div class="col-2">\n                    <input type="text" id="label_preview_chart_' + id + '_' + i + '" class="form-control" value="' + chart.data.datasets[i].label + '"/>\n                  </div>\n                  <div class="col-1">\n                    <input type="color" id="color_preview_chart_' + id + '_' + i + '" class="form-control" value="' + colorChart + '"/>\n                  </div>\n                  <div class="col-1">\n                    <button type="button" id="delete_preview_chart_' + id + '_' + i + '" class="btn btn-default" ><i class="fas fa-trash-alt"></i></button>\n                  </div>\n                </div>\n              </div>');

        countChartData++;

        $("#label_preview_chart_" + id + "_" + i).keyup(labelPreviewChartUpdate(chart, i));
        $("#color_preview_chart_" + id + "_" + i).change(colorPreviewChartUpdate(chart, i));
        $("#delete_preview_chart_" + id + "_" + i).click(deletePreviewChartUpdate(chart, i));

        $("#select_datasource_list_" + id + "_" + i).change(dataValueUpdata(chart, i));
        $("#id_keydata_list_" + id + "_" + i).change(dataKeyValueUpdata(chart, i));
        $("#select_agg_list_" + id + "_" + i).change(dataAggValueUpdata(i));

        $("#delete_preview_chart_" + id + "_0").remove();
      }

      // console.log(yearlyDataTest);

      // console.log(objectPath.get(yearlyDataTest,"2016.RelativeHumidity"));

      // console.log(getFlatObject(yearlyDataTest));

      $.ajax({
        url: 'http://localhost:8000/api/infographic/getDatasource',
        method: 'GET',
        data: {
          info_id: infoID
        },
        success: function success(res) {
          listInfoDatasource = res.data;
          listInfoDatasource.map(function (data, index) {
            $("select[name='list_datasource']").append('<option value="' + (index + 1) + '">' + data.name + '</option>');
          });

          for (var j = 0; j < selectDatasourceList.length; j++) {
            document.getElementById("select_datasource_list_" + id + "_" + j).selectedIndex = selectDatasourceList[j];
            $("#select_datasource_list_" + id + "_" + j).change();
            $("#id_keydata_list_" + id + "_" + j).val(selectDataList[j]);
            document.getElementById("select_agg_list_" + id + "_" + j).selectedIndex = selectAggList[j];
          }
        },
        error: function error(res) {
          console.log(res);
        }
      });
    }

    function dataValueUpdata(chart, index) {
      return function () {
        if (stateMode == "series") {
          var selectValue = $("#select_datasource_list_" + id + "_" + index + "_series").val();

          if (selectValue != 0) {
            $("#datalist_keydata_list_" + id + "_" + index + "_series").html('<option value="Null"></option>');
            $("#id_keydata_list_" + id + "_" + index + "_series").val("Null");

            //Demo test ISUS
            var keyValueList = Object(__WEBPACK_IMPORTED_MODULE_3__utility_js__["i" /* getFlatObject */])(timeSeriesTest.dataTimeSeries[0]);

            for (var key in keyValueList) {
              if (key != "Date") {
                $("#datalist_keydata_list_" + id + "_" + index + "_series").append('<option value="' + key + '"></option>');
              }
            }
            $("#id_keydata_list_" + id + "_" + index + "_series").val("");

            // chart.data.labels = Object.keys(yearlyDataTest);
            // chart.update();
          } else {
            $("#datalist_keydata_list_" + id + "_" + index + "_series").html('<option value="Null"></option>');
            $("#id_keydata_list_" + id + "_" + index + "_series").val("Null");
          }

          selectDatasourceListSeries[index] = selectValue;
          var ctx = $('#canvas_' + id);
          ctx.attr('select-datasource-list-series', selectDatasourceListSeries);
        } else {
          var _selectValue = $("#select_datasource_list_" + id + "_" + index).val();

          if (_selectValue != 0) {
            $("#datalist_keydata_list_" + id + "_" + index).html('<option value="Null"></option>');
            $("#id_keydata_list_" + id + "_" + index).val("Null");

            //Demo test ISUS
            for (var i = 0; i < $('.period-tab').length; i++) {
              if ($('.period-tab')[i].className.includes("active")) {
                periodType = $('.period-tab')[i].value;
              }
            }

            if (periodType == "daily") {
              $.ajax({
                url: 'http://localhost:8000/api/infographic/getApiDaily',
                method: 'GET',
                data: {
                  info_id: infoID
                },
                success: function success(res) {
                  apiList[index] = res.data;
                  var keyValueList = Object(__WEBPACK_IMPORTED_MODULE_3__utility_js__["i" /* getFlatObject */])(apiList[index]["daily"][0]);
                  for (var key in keyValueList) {
                    if (key.includes("$")) {
                      $("#datalist_keydata_list_" + id + "_" + index).append('<option value="' + key + '"></option>');
                    }
                  }
                  $("#id_keydata_list_" + id + "_" + index).val("");

                  if (chart.data.labels.length == 7 && chart.data.labels[0] == "Su") {
                    chart.data.labels = [];
                    dailyLables = [];
                    chart.data.datasets[index].data = [];
                  }

                  var check = 0;
                  for (var _i = 0; _i < apiList[index]["daily"].length; _i++) {
                    for (var j = 0; j < chart.data.labels.length; j++) {
                      if (apiList[index]["daily"][_i]["day"] == chart.data.labels[j]) {
                        check = 1;
                        break;
                      }
                    }
                    if (check != 1) {
                      dailyLables.push(apiList[index]["daily"][_i]["day"]);
                    }
                  }

                  chart.data.labels = dailyLables;
                  chart.update();
                },
                error: function error(res) {
                  console.log(res);
                }
              });
            } else if (periodType == "monthly") {
              $.ajax({
                url: 'http://localhost:8000/api/infographic/getApiMonthly',
                method: 'GET',
                data: {
                  info_id: infoID
                },
                success: function success(res) {
                  apiList[index] = res.data;
                  var keyValueList = Object(__WEBPACK_IMPORTED_MODULE_3__utility_js__["i" /* getFlatObject */])(apiList[index]["monthly"][0]);
                  for (var key in keyValueList) {
                    if (key.includes("$")) {
                      $("#datalist_keydata_list_" + id + "_" + index).append('<option value="' + key + '"></option>');
                    }
                  }
                  // $("#id_keydata_list_" + id + "_" + index).val("");

                  if (chart.data.labels.length == 7 && chart.data.labels[0] == "Su") {
                    chart.data.labels = [];
                    monthlyLables = [];
                    chart.data.datasets[index].data = [];
                  }

                  var check = 0;
                  for (var _i2 = 0; _i2 < apiList[index]["monthly"].length; _i2++) {
                    for (var j = 0; j < chart.data.labels.length; j++) {
                      if (apiList[index]["monthly"][_i2]["day"] == chart.data.labels[j]) {
                        check = 1;
                        break;
                      }
                    }
                    if (check != 1) {
                      monthlyLables.push(apiList[index]["monthly"][_i2]["day"]);
                    }
                  }

                  chart.data.labels = monthlyLables;
                  chart.update();
                },
                error: function error(res) {
                  console.log(res);
                }
              });
            }
          } else {
            $("#datalist_keydata_list_" + id + "_" + index).html('<option value="Null"></option>');
            $("#id_keydata_list_" + id + "_" + index).val("Null");
          }

          selectDatasourceList[index] = _selectValue;
          var ctx = $('#canvas_' + id);
          ctx.attr('select-datasource-list', selectDatasourceList);
        }
      };
    }

    function dataKeyValueUpdata(chart, index) {
      return function () {
        if (stateMode == "series") {
          var selectKeyValue = $("#id_keydata_list_" + id + "_" + index + "_series").val();

          if (selectKeyValue != "Null") {
            chart.data.datasets[index].data = [];

            var keyValueList = Object(__WEBPACK_IMPORTED_MODULE_3__utility_js__["i" /* getFlatObject */])(timeSeriesTest);

            for (var key in keyValueList) {
              if (key.includes(selectKeyValue)) {
                var _path = key.replace(new RegExp('\\/', 'g'), '.');
                var dateFormat = __WEBPACK_IMPORTED_MODULE_2_object_path___default.a.get(timeSeriesTest, _path.replace(selectKeyValue, 'Date')).split('/');
                var day = dateFormat[0];
                var month = dateFormat[1];
                var year = dateFormat[2];

                var t = { x: new Date(year, month, day), y: __WEBPACK_IMPORTED_MODULE_2_object_path___default.a.get(timeSeriesTest, _path) };
                chart.data.datasets[index].data.push(t);
              }
            }
            chart.update();
          }

          selectDataListSeries[index] = $("#id_keydata_list_" + id + "_" + index + "_series").val();
          var ctx = $('#canvas_' + id);
          ctx.attr('select-keydata-list-series', selectDataListSeries);
        } else {
          var _selectKeyValue = $("#id_keydata_list_" + id + "_" + index).val();

          if (_selectKeyValue != "Null") {
            // let keyValueList = getFlatObject(apiList[index]["daily"]);
            // console.log(objectPath.get(apiList[index],"daily.0." + selectKeyValue));

            if (periodType == "daily") {
              for (var i = 0; i < apiList[index]["daily"].length; i++) {
                for (var j = 0; j < chart.data.labels.length; j++) {
                  var dateApi = __WEBPACK_IMPORTED_MODULE_2_object_path___default.a.get(apiList[index], "daily." + i + ".day");
                  if (chart.data.labels[j] == dateApi) {
                    chart.data.datasets[index].data[j] = __WEBPACK_IMPORTED_MODULE_2_object_path___default.a.get(apiList[index], "daily." + i + "." + _selectKeyValue);
                    break;
                  }
                }
              }
            } else if (periodType == "monthly") {
              for (var _i3 = 0; _i3 < apiList[index]["monthly"].length; _i3++) {
                for (var _j = 0; _j < chart.data.labels.length; _j++) {
                  var _dateApi = __WEBPACK_IMPORTED_MODULE_2_object_path___default.a.get(apiList[index], "monthly." + _i3 + ".day");
                  if (chart.data.labels[_j] == _dateApi) {
                    console.log(__WEBPACK_IMPORTED_MODULE_2_object_path___default.a.get(apiList[index], "monthly." + _i3 + "." + _selectKeyValue));
                    chart.data.datasets[index].data[_j] = __WEBPACK_IMPORTED_MODULE_2_object_path___default.a.get(apiList[index], "monthly." + _i3 + "." + _selectKeyValue);
                    break;
                  }
                }
              }
            }
            chart.update();

            // chart.data.datasets[index].data = [];

            // for(var key in keyValueList)
            // {
            //   if(key.includes(selectKeyValue))
            //   {
            //     var t = objectPath.get(yearlyDataTest, key.replace('/', '.'));
            //     chart.data.datasets[index].data.push(t);
            //   }       
            // }
            // chart.update();
          }

          selectDataList[index] = $("#id_keydata_list_" + id + "_" + index).val();
          var ctx = $('#canvas_' + id);
          ctx.attr('select-keydata-list', selectDataList);
        }
      };
    }

    function dataAggValueUpdata(index) {
      return function () {
        var selectValue = $("#select_agg_list_" + id + "_" + index).val();

        if (selectValue != 0) {}

        selectAggList[index] = $("#select_agg_list_" + id + "_" + index).val();
        var ctx = $('#canvas_' + id);
        ctx.attr('select-agg-list', selectAggList);
      };
    }

    function colorPreviewChartUpdate(chart, index) {
      return function () {
        if (type == "bar" || type == "pie") {
          if (stateMode == "series") {
            chart.data.datasets[index].backgroundColor = $("#color_preview_chart_" + id + "_" + index + "_series").val();
          } else {
            chart.data.datasets[index].backgroundColor = $("#color_preview_chart_" + id + "_" + index).val();
          }
        } else {
          if (stateMode == "series") {
            chart.data.datasets[index].borderColor = $("#color_preview_chart_" + id + "_" + index + "_series").val();
          } else {
            chart.data.datasets[index].borderColor = $("#color_preview_chart_" + id + "_" + index).val();
          }
        }

        chart.update();
      };
    }

    function labelPreviewChartUpdate(chart, index) {
      return function () {
        if (stateMode == "series") {
          chart.data.datasets[index].label = $("#label_preview_chart_" + id + "_" + index + "_series").val();
          chart.update();
        } else {
          chart.data.datasets[index].label = $("#label_preview_chart_" + id + "_" + index).val();
          chart.update();
        }
      };
    }

    function deletePreviewChartUpdate(chart, index) {
      return function () {
        if (stateMode == "series") {
          chart.data.datasets.splice(index, 1);
          chart.update();

          var ctx = $("#chart_data_" + id + "_series");
          ctx.contents().remove();

          setDefaultDataSeries(chart);

          selectDatasourceListSeries.splice(index, 1);
          selectDataListSeries.splice(index, 1);
        } else {
          chart.data.datasets.splice(index, 1);
          chart.update();

          var _ctx6 = $("#chart_data_" + id);
          _ctx6.contents().remove();

          setDefaultData(chart);

          selectDatasourceList.splice(index, 1);
          selectDataList.splice(index, 1);
          selectAggList.splice(index, 1);
        }
      };
    }

    function setDefaultDataSeries(chart) {
      var colorChart = void 0;

      for (var i = 0; i < chart.data.datasets.length; i++) {
        if (type == "bar" || type == "pie") {
          colorChart = chart.data.datasets[i].backgroundColor;
        } else {
          colorChart = chart.data.datasets[i].borderColor;
        }

        $("#chart_data_" + id + "_series").append('\n              <div id="div_preview_chart_' + id + '_' + i + '_series" class="col-12">\n                <div class="row" style="padding-top:5px; padding-bottom:5px;">\n                  <div class="col-2">\n                    <span>Datasource</span>\n                  </div>\n                  <div class="col-6">\n                    <span>Data</span>\n                  </div>\n                  <div class="col-2">\n                    <span>Label</span>\n                  </div>\n                  <div class="col-1">\n                    <span>Color</span>\n                  </div>\n                </div>\n                <div class="row" style="padding-top:5px; padding-bottom:5px;">\n                  <div class="col-2">\n                    <select type="text" id="select_datasource_list_' + id + '_' + i + '_series" name="list_datasource_series" class="form-control">\n                      <option value="0">-Select-</option>\n                    </select>\n                  </div>\n                  <div class="col-6">\n                    <input type="text" list="datalist_keydata_list_' + id + '_' + i + '_series" id="id_keydata_list_' + id + '_' + i + '_series" class="form-control" />\n                    <datalist id="datalist_keydata_list_' + id + '_' + i + '_series">\n                      <option value="Null"></option>\n                    </datalist> \n                  </div>\n                  <div class="col-2">\n                    <input type="text" id="label_preview_chart_' + id + '_' + i + '_series" class="form-control" value="' + chart.data.datasets[i].label + '"/>\n                  </div>\n                  <div class="col-1">\n                    <input type="color" id="color_preview_chart_' + id + '_' + i + '_series" class="form-control" value="' + colorChart + '"/>\n                  </div>\n                  <div class="col-1">\n                    <button type="button" id="delete_preview_chart_' + id + '_' + i + '_series" class="btn btn-default" ><i class="fas fa-trash-alt"></i></button>\n                  </div>\n                </div>\n              </div>');

        countChartData++;

        $("#label_preview_chart_" + id + "_" + i + "_series").keyup(labelPreviewChartUpdate(chart, i));
        $("#color_preview_chart_" + id + "_" + i + "_series").change(colorPreviewChartUpdate(chart, i));
        $("#delete_preview_chart_" + id + "_" + i + "_series").click(deletePreviewChartUpdate(chart, i));

        $("#select_datasource_list_" + id + "_" + i + "_series").change(dataValueUpdata(chart, i));
        $("#id_keydata_list_" + id + "_" + i + "_series").change(dataKeyValueUpdata(chart, i));

        $("#delete_preview_chart_" + id + "_0" + "_series").remove();
      }

      $.ajax({
        url: 'http://localhost:8000/api/infographic/getDatasource',
        method: 'GET',
        data: {
          info_id: infoID
        },
        success: function success(res) {
          listInfoDatasource = res.data;
          console.log(listInfoDatasource);
          listInfoDatasource.map(function (data, index) {
            $("select[name='list_datasource_series']").append('<option value="' + (index + 1) + '">' + data.name + '</option>');
          });

          for (var j = 0; j < selectDatasourceListSeries.length; j++) {
            document.getElementById("select_datasource_list_" + id + "_" + j + "_series").selectedIndex = selectDatasourceListSeries[j];
            $("#select_datasource_list_" + id + "_" + j + "_series").change();
            $("#id_keydata_list_" + id + "_" + j + "_series").val(selectDataListSeries[j]);
            console.log(selectDataListSeries[j]);
          }
        },
        error: function error(res) {
          console.log(res);
        }
      });
    }
  };

  this.createCropImage = function (id, full_id, full_id_image) {
    var cropObject = void 0;

    $(".propertyMenu-2-paper").append('                \n          <div class="propertyMenu-2-block">\n            <button type="button" id="crop_image_widget_' + id + '" class="btn btn-default form-control button-width">Crop image</button>     \n          </div>');

    $("#crop_image_widget_" + id).click(function () {
      $("#modelCrop_" + id).remove();
      var modalCrop = '\n        <div class="modal" id="modelCrop_' + id + '" class="modelcropper">\n            <div class="modal-dialog">\n                <div class="modal-content">\n                    <div class="modal-header">\n                        <h4 class="modal-title">Crop image</h4>\n                        <button type="button" class="close" data-dismiss="modal">&times;</button>\n                    </div>\n\n                    <div class="modal-body">\n                        <div class="row">\n                            <div class="col-11 text-center">\n                                <img id="image_crop_' + id + '" style="max-width: 100%; max-height:50%;" />\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class="modal-footer">\n                        <button type="button" id="save_image_crop_' + id + '" class="btn btn-success">Save</button>\n                    </div>\n                </div>\n            </div>\n        </div>';

      $('body').append(modalCrop);
      $("#modelCrop_" + id).modal('show');
      $("#image_crop_" + id).attr("src", $(full_id_image).attr("src"));
      var image = document.getElementById('image_crop_' + id);
      cropObject = new Cropper(image, {});

      $("#save_image_crop_" + id).click(function () {
        $(full_id_image).attr("src", cropObject.getCroppedCanvas({ width: 500, height: 500 }).toDataURL());
        cropObject.destroy();
        $("#modelCrop_" + id).modal('hide');
        $("#modelCrop_" + id).modal('dispose');
        $("#modelCrop_" + id).remove();
      });
    });
  };

  this.createTextchange = function (id, full_id) {
    $(".propertyMenu-2-paper").append('                      \n          <div class="propertyMenu-2-block">\n            <div class="container">\n                <div class="row row-block">\n                    <span>Text change</span>\n                </div>\n                <div class="row row-block">\n                    <input type="text" id="inputtext_' + id + '" class="form-control"/>\n                </div>\n            </div>    \n          </div>');

    // Set start value
    $("#inputtext_" + id).val($("#span_" + id).html());

    $("#inputtext_" + id).keyup(function () {
      $("#span_" + id).html($("#inputtext_" + id).val());
    });
  };

  this.createImportData = function (id, full_id) {
    $(".propertyMenu-2-paper").append('                \n          <div class="propertyMenu-2-block">\n            <button type="button" class="btn btn-default form-control button-width">Import data</button>    \n          </div>');
  };

  this.createScale = function (id, full_id, type) {
    $(".propertyMenu-2-paper").append('  \n          <div class="propertyMenu-2-block">\n            <div class="container">\n                <div class="row row-block">\n                    <div class="col-6">\n                        <span>Width (px)</span>\n                    </div>\n                    <div class="col-6">\n                        <span>Height (px)</span>\n                    </div>\n                </div>\n                <div class="row row-block">\n                    <div class="col-6">\n                        <input type="text" id="width_' + id + '" class="form-control" />\n                    </div>\n                    <div class="col-6">\n                        <input type="text" id="height_' + id + '" class="form-control" />\n                    </div>\n                </div>\n            </div>    \n          </div>');

    // Set start value
    $("#width_" + id).val(Math.round($(full_id).width()));
    $("#height_" + id).val(Math.round($(full_id).height()));

    $("#width_" + id).unbind().change(function () {
      $(full_id).css('width', $("#width_" + id).val());
      $(full_id).css('height', $("#height_" + id).val());

      if (type == "map") {
        $("#map_" + id).css('width', $("#width_" + id).val() - 100);
        $("#map_" + id).css('height', $("#height_" + id).val() - 100);
      }
    });

    $("#height_" + id).unbind().change(function () {
      $(full_id).css('width', $("#width_" + id).val());
      $(full_id).css('height', $("#height_" + id).val());

      if (type == "map") {
        $("#map_" + id).css('width', $("#width_" + id).val() - 100);
        $("#map_" + id).css('height', $("#height_" + id).val() - 100);
      }
    });
  };

  this.createAddColumnAndRow = function (id, full_id) {
    $(".propertyMenu-2-paper").append('    \n          <div class="propertyMenu-2-block">\n            <div class="container">\n                <div class="row row-block">\n                    <span>New column name</span>\n                </div>\n                <div class="row row-block">\n                    <div class="col-7">\n                        <input type="text" id="column_name_' + id + '" class="form-control"/>\n                    </div>\n                    <div class="col-2">\n                        <button type="button" id="add_column_' + id + '" class="btn btn-default" ><i class="fas fa-angle-right"></i></button>\n                    </div>\n                    <div class="col-1">\n                        <button type="button" id="add_row_' + id + '" class="btn btn-default" ><i class="fas fa-angle-down"></i></button>\n                    </div>\n                </div>\n                <div class="row-block">\n                    <button type="button" id="delete_column_' + id + '" class="btn btn-default form-control button-width">Delete column</button>\n                </div>\n                <div class="row-block">\n                    <button type="button" id="delete_row_' + id + '" class="btn btn-default form-control button-width">Delete row</button>\n                </div>\n            </div>    \n          </div>');

    $("#add_column_" + id).unbind().click(function () {
      var tableObject = $(full_id);
      var countCells = tableObject[0].rows[0].cells.length;

      for (var i = 0; i < tableObject[0].rows.length; i++) {
        var row = tableObject[0].rows[i];
        var cells;

        if (i == 0) {
          cells = row.cells[row.cells.length - 1];
          cells.insertAdjacentHTML("afterend", "<th>" + $("#column_name_" + id).val() + "</th>");
        } else {
          cells = row.insertCell(countCells);
          cells.innerHTML = "Data";
        }
      }

      editTable();
    });

    $("#add_row_" + id).unbind().click(function () {
      var tableObject = $(full_id);
      var tableHtml = document.getElementById("table_" + id);
      var row = tableHtml.insertRow(tableObject[0].rows.length);

      for (var i = 0; i < tableObject[0].rows[0].cells.length; i++) {
        var cells = row.insertCell(i);
        cells.innerHTML = "Data";
      }

      editTable();
    });

    $("#delete_column_" + id).unbind().click(function () {
      var tableObject = $(full_id);
      var countCells = tableObject[0].rows[0].cells.length;

      for (var i = 0; i < tableObject[0].rows.length; i++) {
        var row = tableObject[0].rows[i];
        row.deleteCell(countCells - 1);
      }
    });

    $("#delete_row_" + id).unbind().click(function () {
      var tableObject = $(full_id);
      var tableHtml = document.getElementById("table_" + id);
      tableHtml.deleteRow(tableObject[0].rows.length - 1);
    });

    function editTable() {
      var editor = new SimpleTableCellEditor("table_" + id);
      editor.SetEditable("td", {
        keys: {
          validation: [13],
          cancellation: [27]
        }
      });

      editor.SetEditable("th", {
        keys: {
          validation: [13],
          cancellation: [27]
        }
      });
    }
  };

  this.createThemesTable = function (id, full_id) {
    $(".propertyMenu-2-paper").append('  \n          <div class="propertyMenu-2-block">\n            <div class="container">\n                <div class="row row-block">\n                    <span>Themes</span>\n                </div>\n                <div class="row row-block">\n                    <select type="text" id="themes_table_' + id + '" class="form-control">\n                      <option value="1">Default</option>\n                      <option value="2">Striped</option>\n                      <option value="3">Bordered</option>\n                    </select>\n                </div>\n            </div>    \n          </div>');

    var arrayClass = ["table-striped", "table-bordered"];

    // Set start value
    document.getElementById("themes_table_" + id).selectedIndex = ($(full_id).attr('table-class') || 1) - 1;

    $("#themes_table_" + id).unbind().change(function () {

      // Remove table class
      var classList = document.getElementById('table_' + id).className.split(/\s+/);

      for (var i = 0; i < classList.length; i++) {
        if (arrayClass.includes(classList[i])) {
          $(full_id).removeClass(classList[i]);
        }
      }

      // Add new table class
      var classSelect = $("#themes_table_" + id).val();

      switch (classSelect) {
        case "1":
          $(full_id).attr('table-class', '1');
          break;
        case "2":
          $(full_id).addClass('table-striped');
          $(full_id).attr('table-class', '2');
          break;
        case "3":
          $(full_id).addClass('table-bordered');
          $(full_id).attr('table-class', '3');
          break;
      }
    });
  };

  this.createColorAndFont = function (id, full_id) {
    $(".propertyMenu-2-paper").append('    \n          <div class="propertyMenu-2-block">\n            <div class="container">\n                <div class="row row-block">\n                    <div class="col-6 text-align-left">\n                        <span>Color</span>\n                    </div>\n                    <div class="col-6 text-align-left">\n                        <span>Font</span>\n                    </div>\n                </div>\n                <div class="row row-block">\n                    <div class="col-6">\n                        <input type="color" id="color_font_' + id + '" class="form-control">\n                    </div>\n                    <div class="col-6">\n                        <select type="text" id="family_font_' + id + '" class="form-control">\n                          <option value="1">Poppins</option>\n                          <option value="2">Times New Roman</option>\n                          <option value="3">Arial</option>\n                          <option value="4">Arial Black</option>\n                          <option value="5">Georgia</option>\n                          <option value="6">Tahoma</option>\n                          <option value="7">Lucida Console</option>\n                          <option value="8">Courier New</option>\n                        </select>\n                    </div>\n                </div>\n            </div>    \n          </div>');

    // Set start value
    $("#color_font_" + id).val(rgbToHex($("#span_" + id).css('color')));
    document.getElementById("family_font_" + id).selectedIndex = ($(full_id).attr('font-value') || 1) - 1;

    $("#color_font_" + id).unbind().change(function () {
      $("#span_" + id).css('color', $(this).val());
    });

    $("#family_font_" + id).unbind().change(function () {
      var fontSelect = $("#family_font_" + id).val();

      switch (fontSelect) {
        case "1":
          $(full_id).css('font-family', 'Poppins, Kanit, sans-serif');
          $(full_id).attr('font-value', '1');
          break;
        case "2":
          $(full_id).css('font-family', 'Times New Roman, Times, serif');
          $(full_id).attr('font-value', '2');
          break;
        case "3":
          $(full_id).css('font-family', 'Arial, Helvetica, sans-serif');
          $(full_id).attr('font-value', '3');
          break;
        case "4":
          $(full_id).css('font-family', 'Arial Black, Gadget, sans-serif');
          $(full_id).attr('font-value', '4');
          break;
        case "5":
          $(full_id).css('font-family', 'Georgia, serif');
          $(full_id).attr('font-value', '5');
          break;
        case "6":
          $(full_id).css('font-family', 'Tahoma, Geneva, sans-serif');
          $(full_id).attr('font-value', '6');
          break;
        case "7":
          $(full_id).css('font-family', 'Lucida Console, Monaco, monospace');
          $(full_id).attr('font-value', '7');
          break;
        case "8":
          $(full_id).css('font-family', 'Courier New, Courier, monospace');
          $(full_id).attr('font-value', '8');
          break;
      }
    });

    // Convert rgb code to hex code
    function rgbToHex(color) {
      color = "" + color;
      if (!color || color.indexOf("rgb") < 0) {
        return;
      }

      if (color.charAt(0) == "#") {
        return color;
      }

      var nums = /(.*?)rgb\((\d+),\s*(\d+),\s*(\d+)\)/i.exec(color),
          r = parseInt(nums[2], 10).toString(16),
          g = parseInt(nums[3], 10).toString(16),
          b = parseInt(nums[4], 10).toString(16);

      return "#" + ((r.length == 1 ? "0" + r : r) + (g.length == 1 ? "0" + g : g) + (b.length == 1 ? "0" + b : b));
    }
  };

  this.createColorAndDeleteForShape = function (id, full_id, full_id_shape, type) {
    $(".propertyMenu-2-paper").append(' \n      <div class="propertyMenu-2-block">\n        <div class="container">\n            <div class="row row-block">\n                <span>Color</span>\n            </div>\n            <div class="row row-block">\n                <input type="color" class="form-control" id="color_shape_' + id + '">\n            </div>\n        </div>    \n      </div>');

    if (type == "square" || type == "circle") {
      // Set start value
      console.log($(full_id_shape).css('background-color'));
      $("#color_shape_" + id).val(rgbToHex($(full_id_shape).css('background-color')));

      $("#color_shape_" + id).unbind().change(function () {
        $(full_id_shape).css('background-color', $(this).val());
      });
    } else if (type == "string") {
      // Set start value
      $("#color_shape_" + id).val(rgbToHex($(full_id_shape).css('border-right-color')));

      $("#color_shape_" + id).unbind().change(function () {
        $(full_id_shape).css('border-right-color', $(this).val());
      });
    }

    // Convert rgb code to hex code
    function rgbToHex(color) {
      color = "" + color;
      if (!color || color.indexOf("rgb") < 0) {
        return;
      }

      if (color.charAt(0) == "#") {
        return color;
      }

      var nums = /(.*?)rgb\((\d+),\s*(\d+),\s*(\d+)\)/i.exec(color),
          r = parseInt(nums[2], 10).toString(16),
          g = parseInt(nums[3], 10).toString(16),
          b = parseInt(nums[4], 10).toString(16);

      return "#" + ((r.length == 1 ? "0" + r : r) + (g.length == 1 ? "0" + g : g) + (b.length == 1 ? "0" + b : b));
    }
  };

  this.createStringStyle = function (id, full_id, full_id_shape) {
    $(".propertyMenu-2-paper").append('          \n          <div class="propertyMenu-2-block">\n            <div class="container">\n                <div class="row row-block">\n                    <div class="col-4">\n                        <button type="button" id="solid_style_' + id + '" class="btn btn-default" ><i class="fas fa-minus"></i></button>\n                    </div>\n                    <div class="col-4">\n                        <button type="button" id="dotted_style_' + id + '" class="btn btn-default" ><i class="fas fa-ellipsis-h"></i></button>\n                    </div>\n                    <div class="col-4">\n                        <button type="button" id="double_style_' + id + '" class="btn btn-default" ><i class="fas fa-equals"></i></button>\n                    </div>\n                </div>\n            </div>    \n          </div>');

    $("#solid_style_" + id).unbind().click(function () {
      $(full_id_shape).css('border-right-style', "solid");
    });

    $("#dotted_style_" + id).unbind().click(function () {
      $(full_id_shape).css('border-right-style', "dotted");
    });

    $("#double_style_" + id).unbind().click(function () {
      $(full_id_shape).css('border-right-style', "double");
    });
  };

  this.createFontSize = function (id, full_id) {
    $(".propertyMenu-2-paper").append(' \n          <div class="propertyMenu-2-block">\n            <div class="container">\n                <div class="row row-block">\n                    <span>Font size (pt)</span>\n                </div>\n                <div class="row row-block">\n                    <div class="col-8" style="padding-left:0px;">\n                        <input type="range" min="9" max="120" value="9" id="slider_font_widget_' + id + '" class="slider" />\n                    </div>\n                    <div class="col-4">\n                        <input type="text" id="slider_font_input_widget_' + id + '" class="form-control" />\n                    </div>\n                </div>\n            </div>    \n          </div>');

    // Set start value
    $("#slider_font_widget_" + id).val($(full_id).css('font-size').replace('px', ''));
    $("#slider_font_input_widget_" + id).val($(full_id).css('font-size').replace('px', ''));

    $("#slider_font_widget_" + id).unbind().change(function () {
      $("#slider_font_input_widget_" + id).val($(this).val());
      $(full_id).css('font-size', $(this).val() + "px");
    });

    $("#slider_font_input_widget_" + id).unbind().change(function () {
      if ($(this).val() < 9 || $(this).val() > 120) {
        alert("test : 9 - 120");
      } else {
        $("#slider_font_widget_" + id).val($(this).val());
        $(full_id).css('font-size', $(this).val() + "px");
      }
    });
  };

  this.createRotation = function (id, full_id) {
    $(".propertyMenu-2-paper").append(' \n          <div class="propertyMenu-2-block">\n            <div class="container">\n                <div class="row row-block">\n                    <span>Rotation</span>\n                </div>\n                <div class="row row-block">\n                    <div class="col-8" style="padding-left:0px;">\n                        <input type="range" min="0" max="360" value="0" id="slider_rotation_widget_' + id + '" class="slider" />\n                    </div>\n                    <div class="col-4">\n                        <input type="text" id="slider_rotation_input_widget_' + id + '" class="form-control" />\n                    </div>\n                </div>\n            </div>    \n          </div>');

    var x = $(full_id).attr("data-x");
    var y = $(full_id).attr("data-y");
    var z = $(full_id).attr("data-z") || 0;

    // Set start value
    $("#slider_rotation_widget_" + id).val(z);
    $("#slider_rotation_input_widget_" + id).val(z);

    $("#slider_rotation_widget_" + id).unbind().change(function () {
      var rotationValue = $(this).val();
      $("#slider_rotation_input_widget_" + id).val(rotationValue);
      $(full_id).attr('data-z', rotationValue);
      $(full_id).css('transform', 'translate(' + x + 'px, ' + y + 'px) rotate(' + rotationValue + 'deg)');
    });

    $("#slider_rotation_input_widget_" + id).unbind().change(function () {
      if ($(this).val() < 0 || $(this).val() > 360) {
        alert("test : 0 - 360");
      } else {
        var rotationValue = $(this).val();
        $("#slider_rotation_widget_" + id).val(rotationValue);
        $(full_id).attr('data-z', rotationValue);
        $(full_id).css('transform', 'translate(' + x + 'px, ' + y + 'px) rotate(' + rotationValue + 'deg)');
      }
    });
  };

  this.createTransparency = function (id, full_id) {
    $(".propertyMenu-2-paper").append('    \n          <div class="propertyMenu-2-block">\n            <div class="container">\n                <div class="row row-block">\n                    <span>Transparency (%)</span>\n                </div>\n                <div class="row row-block">\n                    <div class="col-8" style="padding-left:0px;">\n                        <input type="range" min="0" max="100" value="1" id="slider_tran_widget_' + id + '" class="slider" />\n                    </div>\n                    <div class="col-4">\n                        <input type="text" id="slider_tran_input_widget_' + id + '" class="form-control" />\n                    </div>\n                </div>\n            </div>    \n          </div>');

    // Set start value
    $("#slider_tran_widget_" + id).val(100 - $(full_id).css('opacity') * 100);
    $("#slider_tran_input_widget_" + id).val(100 - $(full_id).css('opacity') * 100);

    $("#slider_tran_widget_" + id).unbind().change(function () {
      var opacityValue = (100 - $(this).val()) / 100;
      $("#slider_tran_input_widget_" + id).val($(this).val());
      $(full_id).css('opacity', opacityValue);
    });

    $("#slider_tran_input_widget_" + id).unbind().change(function () {
      if ($(this).val() < 0 || $(this).val() > 100) {
        alert("test : 0 - 100");
      } else {
        var opacityValue = (100 - $(this).val()) / 100;
        $("#slider_tran_widget_" + id).val($(this).val());
        $(full_id).css('opacity', opacityValue);
      }
    });
  };

  this.createBorderRadius = function (id, full_id, full_id_shape) {
    $(".propertyMenu-2-paper").append(' \n          <div class="propertyMenu-2-block">\n            <div class="container">\n                <div class="row row-block">\n                    <span>Border radius (%)</span>\n                </div>\n                <div class="row row-block">\n                    <div class="col-8" style="padding-left:0px;">\n                        <input type="range" min="0" max="50" value="0" id="slider_radius_widget_' + id + '" class="slider" />\n                    </div>\n                    <div class="col-4">\n                        <input type="text" id="slider_radius_input_widget_' + id + '" class="form-control" />\n                    </div>\n                </div>\n            </div>    \n          </div>');

    // Set start value
    $("#slider_radius_widget_" + id).val($(full_id_shape).css('border-radius').replace('%', ''));
    $("#slider_radius_input_widget_" + id).val($(full_id_shape).css('border-radius').replace('%', ''));

    $("#slider_radius_widget_" + id).unbind().change(function () {
      var radiusValue = $(this).val();
      $("#slider_radius_input_widget_" + id).val($(this).val());
      $(full_id_shape).css('border-radius', radiusValue + "%");
    });

    $("#slider_radius_input_widget_" + id).unbind().change(function () {
      if ($(this).val() < 0 || $(this).val() > 50) {
        alert("test : 0 - 50");
      } else {
        var radiusValue = $(this).val();
        $("#slider_radius_widget_" + id).val($(this).val());
        $(full_id_shape).css('border-radius', radiusValue + "%");
      }
    });
  };

  this.createBorderWidth = function (id, full_id, full_id_shape) {
    $(".propertyMenu-2-paper").append(' \n          <div class="propertyMenu-2-block">\n            <div class="container">\n                <div class="row row-block">\n                    <span>Border width (px)</span>\n                </div>\n                <div class="row row-block">\n                    <div class="col-8" style="padding-left:0px;">\n                        <input type="range" min="5" max="20" value="0" id="slider_width_widget_' + id + '" class="slider" />\n                    </div>\n                    <div class="col-4">\n                        <input type="text" id="slider_width_input_widget_' + id + '" class="form-control" />\n                    </div>\n                </div>\n            </div>    \n          </div>');

    // Set start value
    $("#slider_width_widget_" + id).val($(full_id_shape).css('border-right-width').replace('px', ''));
    $("#slider_width_input_widget_" + id).val($(full_id_shape).css('border-right-width').replace('px', ''));

    $("#slider_width_widget_" + id).unbind().change(function () {
      var widthValue = $(this).val();
      $("#slider_width_input_widget_" + id).val($(this).val());
      $(full_id_shape).css('border-right-width', widthValue + "px");
    });

    $("#slider_width_input_widget_" + id).unbind().change(function () {
      if ($(this).val() < 5 || $(this).val() > 20) {
        alert("test : 0 - 50");
      } else {
        var widthValue = $(this).val();
        $("#slider_width_widget_" + id).val($(this).val());
        $(full_id_shape).css('border-right-width', widthValue + "px");
      }
    });
  };

  this.createChartDetail = function (id, full_id, myChart) {
    $(".propertyMenu-2-paper").append('  \n          <div class="propertyMenu-2-block">\n            <div class="container">\n                <div class="row row-block">\n                    <span>Chart properties</span>\n                </div>\n                <div id="color_and_text_' + id + '">\n                </div>\n            </div>    \n          </div>');

    for (var i = 0; i < myChart.data.datasets.length; i++) {
      $("#color_and_text_" + id).append('   \n              <div class="row row-block">\n                <div class="col-4">\n                    <input type="color" id="color_chart_' + id + '_' + i + '" class="form-control" value="' + myChart.data.datasets[i].borderColor + '">\n                </div>\n                <div class="col-8">\n                    <input type="text" id="label_chart_' + id + '_' + i + '" class="form-control" value="' + myChart.data.datasets[i].label + '" />\n                </div>\n              </div>');

      $("#color_chart_" + id + "_" + i).change(colorChartUpdate(myChart, i));
      $("#label_chart_" + id + "_" + i).keyup(labelChartUpdate(myChart, i));
    }

    function colorChartUpdate(myChart, index) {
      return function () {
        myChart.data.datasets[index].borderColor = $("#color_chart_" + id + "_" + index).val();
        myChart.update();

        var ctx = $('#canvas_' + id);
        ctx.data("graph", myChart);
      };
    }

    function labelChartUpdate(myChart, index) {
      return function () {
        myChart.data.datasets[index].label = $("#label_chart_" + id + "_" + index).val();
        myChart.update();

        var ctx = $('#canvas_' + id);
        ctx.data("graph", myChart);
      };
    }
  };

  this.createMapEvent = function (mapObject, full_id) {
    mapObject.on('mousemove', disableDraggable);
    mapObject.on('mouseout', enableDraggable);

    function disableDraggable() {
      interact(full_id).draggable(false);
      return;
    }

    function enableDraggable() {
      interact(full_id).draggable(true);
      return;
    }
  };
} // Constructor
; // Property class

var ContentProperty = function (_Property) {
  _inherits(ContentProperty, _Property);

  function ContentProperty() {
    _classCallCheck(this, ContentProperty);

    var _this6 = _possibleConstructorReturn(this, (ContentProperty.__proto__ || Object.getPrototypeOf(ContentProperty)).call(this));
    /* Call function property */
    /* Select property for each widget type */


    _this6.createGraphProp = function (id, myChart, full_id, type) {
      _this6.createContext(id, full_id, type, myChart);
      _this6.createEditdata(id, myChart, full_id, type);
      _this6.createScale(id, full_id, type);
      _this6.createRotation(id, full_id);
      _this6.createTransparency(id, full_id);
      _this6.createChartDetail(id, full_id, myChart);
    };

    _this6.createMapProp = function (id, full_id, type, mapObject) {
      _this6.createContext(id, full_id, type, null);
      _this6.createScale(id, full_id, type);
      _this6.createRotation(id, full_id);
      _this6.createTransparency(id, full_id);
      _this6.createMapEvent(mapObject, full_id);
    };

    _this6.createTextProp = function (id, full_id, type) {
      _this6.createContext(id, full_id, type, null);
      _this6.createTextchange(id, full_id);
      _this6.createScale(id, full_id, type);
      _this6.createRotation(id, full_id);
      _this6.createTransparency(id, full_id);
      _this6.createColorAndFont(id, full_id);
      _this6.createFontSize(id, full_id);
    };

    _this6.createTableProp = function (id, full_id, type) {
      _this6.createContext(id, full_id, type, null);
      _this6.createImportData(id, full_id);
      _this6.createScale(id, full_id, type);
      _this6.createAddColumnAndRow(id, full_id);
      _this6.createThemesTable(id, full_id);
      _this6.createRotation(id, full_id);
      _this6.createTransparency(id, full_id);
    };

    _this6.createImageProp = function (id, full_id, full_id_image, type) {
      _this6.createContext(id, full_id, type, null);
      _this6.createCropImage(id, full_id, full_id_image);
      _this6.createScale(id, full_id, type);
      _this6.createRotation(id, full_id);
      _this6.createTransparency(id, full_id);
      _this6.createBorderRadius(id, full_id, full_id_image);
    };

    _this6.createShapeProp = function (id, full_id, full_id_shape, type) {
      _this6.createContext(id, full_id, type, null);
      _this6.createColorAndDeleteForShape(id, full_id, full_id_shape, type);

      if (type == "string") {
        _this6.createStringStyle(id, full_id, full_id_shape);
      }

      _this6.createScale(id, full_id, type);
      _this6.createRotation(id, full_id);
      _this6.createTransparency(id, full_id);

      if (type == "string") {
        _this6.createBorderWidth(id, full_id, full_id_shape);
      } else {
        _this6.createBorderRadius(id, full_id, full_id_shape);
      }
    };
    return _this6;
  } // Constructor


  return ContentProperty;
}(Property); // ContentProperty class

/* Set initial value */


$(document).ready(function () {
  var workspace = new Workspace();
  var object = null;

  /* Setting element */
  workspace.initialAndRun({});

  /* Get saved data */
  $.ajax({
    url: END_POINT + 'infographic/getInfoByInfoID',
    method: 'GET',
    data: {
      info_id: infoID
    },
    success: function success(res) {
      if (res.data.info_data != null) {
        object = CircularJSON.parse(res.data.info_data);
        workspace.loadWidgetData(object);
      }
    },
    error: function error(res) {
      console.log("error");
    }
  }); //Ajax
}); //Document ready

/* Globle function */
function arrayRemove(arr, value) {
  return arr.filter(function (ele) {
    return ele.id != value;
  });
}

var deepCopy = function deepCopy(data) {
  return data.map(function (item) {
    return Object.assign({}, item);
  });
};

/***/ }),

/***/ 55:
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory){
  'use strict';

  /*istanbul ignore next:cant test*/
  if (typeof module === 'object' && typeof module.exports === 'object') {
    module.exports = factory();
  } else if (true) {
    // AMD. Register as an anonymous module.
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {
    // Browser globals
    root.objectPath = factory();
  }
})(this, function(){
  'use strict';

  var toStr = Object.prototype.toString;
  function hasOwnProperty(obj, prop) {
    if(obj == null) {
      return false
    }
    //to handle objects with null prototypes (too edge case?)
    return Object.prototype.hasOwnProperty.call(obj, prop)
  }

  function isEmpty(value){
    if (!value) {
      return true;
    }
    if (isArray(value) && value.length === 0) {
        return true;
    } else if (typeof value !== 'string') {
        for (var i in value) {
            if (hasOwnProperty(value, i)) {
                return false;
            }
        }
        return true;
    }
    return false;
  }

  function toString(type){
    return toStr.call(type);
  }

  function isObject(obj){
    return typeof obj === 'object' && toString(obj) === "[object Object]";
  }

  var isArray = Array.isArray || function(obj){
    /*istanbul ignore next:cant test*/
    return toStr.call(obj) === '[object Array]';
  }

  function isBoolean(obj){
    return typeof obj === 'boolean' || toString(obj) === '[object Boolean]';
  }

  function getKey(key){
    var intKey = parseInt(key);
    if (intKey.toString() === key) {
      return intKey;
    }
    return key;
  }

  function factory(options) {
    options = options || {}

    var objectPath = function(obj) {
      return Object.keys(objectPath).reduce(function(proxy, prop) {
        if(prop === 'create') {
          return proxy;
        }

        /*istanbul ignore else*/
        if (typeof objectPath[prop] === 'function') {
          proxy[prop] = objectPath[prop].bind(objectPath, obj);
        }

        return proxy;
      }, {});
    };

    function hasShallowProperty(obj, prop) {
      return (options.includeInheritedProps || (typeof prop === 'number' && Array.isArray(obj)) || hasOwnProperty(obj, prop))
    }

    function getShallowProperty(obj, prop) {
      if (hasShallowProperty(obj, prop)) {
        return obj[prop];
      }
    }

    function set(obj, path, value, doNotReplace){
      if (typeof path === 'number') {
        path = [path];
      }
      if (!path || path.length === 0) {
        return obj;
      }
      if (typeof path === 'string') {
        return set(obj, path.split('.').map(getKey), value, doNotReplace);
      }
      var currentPath = path[0];
      var currentValue = getShallowProperty(obj, currentPath);
      if (path.length === 1) {
        if (currentValue === void 0 || !doNotReplace) {
          obj[currentPath] = value;
        }
        return currentValue;
      }

      if (currentValue === void 0) {
        //check if we assume an array
        if(typeof path[1] === 'number') {
          obj[currentPath] = [];
        } else {
          obj[currentPath] = {};
        }
      }

      return set(obj[currentPath], path.slice(1), value, doNotReplace);
    }

    objectPath.has = function (obj, path) {
      if (typeof path === 'number') {
        path = [path];
      } else if (typeof path === 'string') {
        path = path.split('.');
      }

      if (!path || path.length === 0) {
        return !!obj;
      }

      for (var i = 0; i < path.length; i++) {
        var j = getKey(path[i]);

        if((typeof j === 'number' && isArray(obj) && j < obj.length) ||
          (options.includeInheritedProps ? (j in Object(obj)) : hasOwnProperty(obj, j))) {
          obj = obj[j];
        } else {
          return false;
        }
      }

      return true;
    };

    objectPath.ensureExists = function (obj, path, value){
      return set(obj, path, value, true);
    };

    objectPath.set = function (obj, path, value, doNotReplace){
      return set(obj, path, value, doNotReplace);
    };

    objectPath.insert = function (obj, path, value, at){
      var arr = objectPath.get(obj, path);
      at = ~~at;
      if (!isArray(arr)) {
        arr = [];
        objectPath.set(obj, path, arr);
      }
      arr.splice(at, 0, value);
    };

    objectPath.empty = function(obj, path) {
      if (isEmpty(path)) {
        return void 0;
      }
      if (obj == null) {
        return void 0;
      }

      var value, i;
      if (!(value = objectPath.get(obj, path))) {
        return void 0;
      }

      if (typeof value === 'string') {
        return objectPath.set(obj, path, '');
      } else if (isBoolean(value)) {
        return objectPath.set(obj, path, false);
      } else if (typeof value === 'number') {
        return objectPath.set(obj, path, 0);
      } else if (isArray(value)) {
        value.length = 0;
      } else if (isObject(value)) {
        for (i in value) {
          if (hasShallowProperty(value, i)) {
            delete value[i];
          }
        }
      } else {
        return objectPath.set(obj, path, null);
      }
    };

    objectPath.push = function (obj, path /*, values */){
      var arr = objectPath.get(obj, path);
      if (!isArray(arr)) {
        arr = [];
        objectPath.set(obj, path, arr);
      }

      arr.push.apply(arr, Array.prototype.slice.call(arguments, 2));
    };

    objectPath.coalesce = function (obj, paths, defaultValue) {
      var value;

      for (var i = 0, len = paths.length; i < len; i++) {
        if ((value = objectPath.get(obj, paths[i])) !== void 0) {
          return value;
        }
      }

      return defaultValue;
    };

    objectPath.get = function (obj, path, defaultValue){
      if (typeof path === 'number') {
        path = [path];
      }
      if (!path || path.length === 0) {
        return obj;
      }
      if (obj == null) {
        return defaultValue;
      }
      if (typeof path === 'string') {
        return objectPath.get(obj, path.split('.'), defaultValue);
      }

      var currentPath = getKey(path[0]);
      var nextObj = getShallowProperty(obj, currentPath)
      if (nextObj === void 0) {
        return defaultValue;
      }

      if (path.length === 1) {
        return nextObj;
      }

      return objectPath.get(obj[currentPath], path.slice(1), defaultValue);
    };

    objectPath.del = function del(obj, path) {
      if (typeof path === 'number') {
        path = [path];
      }

      if (obj == null) {
        return obj;
      }

      if (isEmpty(path)) {
        return obj;
      }
      if(typeof path === 'string') {
        return objectPath.del(obj, path.split('.'));
      }

      var currentPath = getKey(path[0]);
      if (!hasShallowProperty(obj, currentPath)) {
        return obj;
      }

      if(path.length === 1) {
        if (isArray(obj)) {
          obj.splice(currentPath, 1);
        } else {
          delete obj[currentPath];
        }
      } else {
        return objectPath.del(obj[currentPath], path.slice(1));
      }

      return obj;
    }

    return objectPath;
  }

  var mod = factory();
  mod.create = factory;
  mod.withInheritedProps = factory({includeInheritedProps: true})
  return mod;
});


/***/ })

/******/ });