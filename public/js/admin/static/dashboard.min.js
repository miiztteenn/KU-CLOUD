/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "http://localhost:8080/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 25);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export showLoadingModal */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return deepCopy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return convertHex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return randomHexColor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return LOADING; });
/* unused harmony export getTime */
/* harmony export (immutable) */ __webpack_exports__["c"] = aproximateHour;
/* unused harmony export filter_hour */
/* unused harmony export ERROR_INPUT */
/* harmony export (immutable) */ __webpack_exports__["b"] = addEventValidate;
/* harmony export (immutable) */ __webpack_exports__["d"] = checkError;
/* harmony export (immutable) */ __webpack_exports__["h"] = resetInputValidate;
/* unused harmony export getFlatObject */
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var showLoadingModal = function showLoadingModal(el, status) {
    var loading = " <div id=\"loading-save\" style=\"display:none;\">\n                        <div class=\"lds-ring\">\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                        </div>\n                        <h6 class='text-center'>Saving Data ...</h6>\n                    </div>";
    var _el = el;

    if (!_el.find("#loading-save").length) {
        _el.find(".modal-body").after(loading);
    }

    if (status) {
        _el.find("form").hide();
        _el.find(".modal-footer").hide();
        _el.find("#loading-save").show();
    } else {
        _el.find("form").show();
        _el.find(".modal-footer").show();
        _el.find("#loading-save").hide();
    }
};

var deepCopy = function deepCopy(data) {
    return data.map(function (item) {
        return Object.assign({}, item);
    });
};

var convertHex = function convertHex(hex, opacity) {
    hex = hex.replace('#', '');
    var r = parseInt(hex.substring(0, 2), 16);
    var g = parseInt(hex.substring(2, 4), 16);
    var b = parseInt(hex.substring(4, 6), 16);

    var result = 'rgba(' + r + ',' + g + ',' + b + ',' + opacity / 100 + ')';
    return result;
};

var randomHexColor = function randomHexColor() {
    return '#' + (Math.random() * 0xFFFFFF << 0).toString(16);
};

var resetText = null;

var LOADING = {
    set: function set(el) {
        resetText = el.html();
        var textLoading = el.attr('data-loading-text');
        el.html(textLoading);
        el.prop('disabled', true);
    },
    reset: function reset(el) {
        el.html(resetText);
        el.prop('disabled', false);
    }
};

function getTime(hours, minutes) {
    var time = null;
    minutes = minutes + "";
    if (hours < 12) {
        time = "AM";
    } else {
        time = "PM";
    }
    if (hours == 0) {
        hours = 12;
    }
    if (hours > 12) {
        hours = hours - 12;
    }
    if (minutes.length == 1) {
        minutes = "0" + minutes;
    }
    return hours + ":" + minutes + " " + time;
}

function aproximateHour(mins) {
    var minutes = Math.round(mins % 60);
    if (minutes == 60 || minutes == 0) {
        return mins / 60;
    }
    return Math.trunc(mins / 60) + minutes / 100;
}

function filter_hour(value, type) {
    return value % 60 == 0 ? 1 : 0;
}

var ERROR_INPUT = {
    set: function set(target, errorList) {
        $(".text-alert").remove();
        Object.keys(target).map(function (key) {
            if (errorList[key]) {
                $(target[key].el).removeClass('input-error');
                $(target[key].el).addClass('input-error');
                $(target[key].el).after("<p class=\"text-alert small\" style=\"color:red\">" + errorList[key] + "</p>");

                $(target[key].el).focus(function () {
                    $(target[key].el).removeClass('input-error');
                    $(target[key].el).next(".text-alert").remove();
                });

                setTimeout(function () {
                    $(target[key].el).removeClass('input-error');
                    $(".text-alert").remove();
                }, 6000);
            }
        });
    },
    reset: function reset(el) {
        $(el).removeClass('input-error');
        $(".text-alert").remove();
    }
};

function addEventValidate(validateInput) {
    var inputs = $(validateInput.parent).find("input, textarea, select");
    inputs.each(function () {
        $(this).change(function () {
            // let attr = $(this).attr('name');
            // let val = $(this).val();
            // let check = {};
            // check[attr] = val == '' ? null : val;
            // let errors = validate(check, validateInput.validate) || {};
            // console.log(attr, check[attr], errors);
            // showErrorsForInput($(this), errors[attr]);
            var elInput = $(this);
            var check = {};
            var attr = "";
            inputs.each(function () {
                attr = $(this).attr('name');
                var val = $(this).val();
                check[attr] = val == '' ? null : val;
            });
            var errors = validate(check, validateInput.validate) || {};
            console.log(elInput, errors);
            showErrorsForInput(elInput, errors[elInput.attr('name')]);
        });
    });
}

function showErrors(validateInput, errors) {
    var inputs = $(validateInput.parent).find("input, textarea, select");
    console.log(errors);
    // let isError = true;
    // inputs.each(function () {
    //     let attr = $(this).attr('name');
    //     let val = $(this).val();
    //     let check = {};
    //     check[attr] = val == '' ? null : val;
    //     let errors = validate(check, validateInput.validate) || {};
    //     showErrorsForInput($(this), errors[attr]);
    // })
    // return isError;
    var key = Object.keys(errors);
    inputs.each(function () {
        var elInput = $(this);
        var attr = elInput.attr('name');
        key.map(function (_key) {
            if (_key === attr) {
                showErrorsForInput(elInput, errors[attr]);
            }
        });
    });
}

function checkError(validateInput) {
    var inputs = $(validateInput.parent).find("input, textarea, select");
    var isError = true;
    var check = {};
    inputs.each(function () {
        var attr = $(this).attr('name');
        var val = $(this).val();
        check[attr] = val == '' ? null : val;
    });
    var errors = validate(check, validateInput.validate) || {};
    if (!validate.isEmpty(errors)) {
        showErrors(validateInput, errors);
        isError = true;
    } else {
        isError = false;
    }
    console.log('isError = ' + isError);
    return isError;
}

// Shows the errors for a specific input
function showErrorsForInput(input, errors) {
    //console.log(input, errors);
    if (!validate.isEmpty(errors)) {
        input.removeClass("has-success");
        input.addClass("has-error");
        input.parent().find(".messages-error").html(errors[0]);
    } else {
        input.removeClass("has-error");
        input.addClass("has-success");
        input.parent().find(".messages-error").html('');
    }
}

function resetInputValidate() {
    $("input, textarea, select").removeClass('has-success');
    $("input, textarea, select").removeClass('has-error');
    $(".messages-error").html('');
}

function getFlatObject(object) {
    function iter(o, p) {
        if (Array.isArray(o)) {
            o.forEach(function (a, i) {
                iter(a, p.concat(i));
            });
            return;
        }
        if (o !== null && (typeof o === "undefined" ? "undefined" : _typeof(o)) === 'object') {
            Object.keys(o).forEach(function (k) {
                iter(o[k], p.concat(k));
            });
            return;
        }
        path[p.join('/')] = o;
    }

    var path = {};
    iter(object, []);
    return path;
}

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(2);


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var regeneratorRuntime = (function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   true ? module.exports : {}
));


/***/ }),
/* 3 */,
/* 4 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var REG = /([a-zA-Z0-9_]+)/g;

var TableEx = function TableEx(el, config) {
    _classCallCheck(this, TableEx);

    this.el = el;
    this.config = config;

    this.createTableEx = function () {
        el.find('thead').empty();
        el.find('tbody').empty();
        el.find('thead').append('<tr></tr>');
        for (var i = 0; i < config.col.amount; i++) {
            el.find('thead tr').append('<th><input type="text" value="col' + i + '" class="form-control col-label"></th>');
        };

        for (var _i = 0; _i < config.row.amount; _i++) {
            var rows = '';
            for (var j = 0; j < config.col.amount; j++) {
                if (j === 0) {
                    rows += '<td><input type="text" value="row' + _i + '" class="form-control row-label"></td>';
                } else {
                    rows += '<td><input type="text" class="form-control value-datasource" placeholder="datasource">\n                                    <ul class="list-group data-list" style="display: none"></ul>\n                                </td>';
                }
            }
            el.find('tbody').append('<tr>' + rows + '</tr>');
        };
    };

    this.addCol = function () {
        el.find('thead tr').append('<th><input type="text" value="col' + config.col.amount + '" class="form-control col-label"></th>');
        el.find('tbody tr').each(function () {
            $(this).append('<td><input type="text" class="form-control value-datasource" placeholder="datasource">\n                                    <ul class="list-group data-list" style="display: none"></ul>\n                                </td>');
        });
        config.col.amount += 1;
    };

    this.removeCol = function () {
        if (config.col.amount >= 2) {
            el.find('thead tr th:last').remove();
            el.find('tbody tr').each(function () {
                $(this).find('td:last').remove();
            });
            config.col.amount -= 1;
        }
    };

    this.addRow = function () {
        var rows = '';
        for (var j = 0; j < config.col.amount; j++) {

            if (j === 0) {
                rows += '<td><input type="text" value="row' + config.row.amount + '" class="form-control row-label"></td>';
            } else {
                rows += '<td><input type="text" class="form-control value-datasource" placeholder="datasource">\n                                <ul class="list-group data-list" style="display: none"></ul>\n                             </td>';
            }
        }
        config.row.amount += 1;
        el.find('tbody').append('<tr>' + rows + '</tr>');
    };

    this.removeRow = function () {
        if (config.row.amount >= 2) {
            el.find('tbody tr:last').remove();
            config.row.amount -= 1;
        }
    };

    this.getValue = function () {
        var col_labels = [];
        el.find(".col-label").each(function () {
            col_labels.push($(this).val());
        });

        var dataRow = [];
        el.find(".row-label").each(function () {
            var row_lable = $(this).val();
            var value_datasoruce = [];
            $(this).parent().parent().find('.value-datasource').each(function () {
                value_datasoruce.push($(this).val());
            });

            dataRow.push({
                label: row_lable,
                data: value_datasoruce
            });
        });

        return {
            col_labels: col_labels,
            rows: dataRow
        };
    };
};

/* harmony default export */ __webpack_exports__["default"] = (TableEx);

/***/ }),
/* 6 */,
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utility_js__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_file_saver__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_file_saver___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_file_saver__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__lib_TableEx_min_js__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_object_path__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_object_path___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_object_path__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_nouislider__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_nouislider___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_nouislider__);


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _asyncToGenerator(fn) {
    return function () {
        var gen = fn.apply(this, arguments);return new Promise(function (resolve, reject) {
            function step(key, arg) {
                try {
                    var info = gen[key](arg);var value = info.value;
                } catch (error) {
                    reject(error);return;
                }if (info.done) {
                    resolve(value);
                } else {
                    return Promise.resolve(value).then(function (value) {
                        step("next", value);
                    }, function (err) {
                        step("throw", err);
                    });
                }
            }return step("next");
        });
    };
}












//import ChartRealtime from 'chartjs-plugin-streaming';
Chart.defaults.global.defaultFontFamily = "'Poppins', 'Kanit', 'sans-serif'";

var END_POINT = 'http://localhost:8000/api/';

var Datasource = null;

var REG = /([a-zA-Z0-9_]+)/g;

var WIDGET_TYPE = {
    BAR: 'Bar',
    MUTILINE: 'MutiLine',
    MUTILINE_STATIC: 'MutiLine_static',
    TEXTLINE: 'TextLine',
    RADAR: 'Radar',
    RADAR_STATIC: 'Radar_static',
    GAUGES: 'Gauges',
    MAP: 'Map',
    MAP_STATIC: 'Map_static',
    TEXTVALUE: 'TextValue',
    TABLE: 'Table',
    TABLE_STATIC: 'Table_static',
    TEXTBOX: 'TextBox'
};

var radarEx = null;

var state = {
    loadingApi: false,
    firstTime: true
};

var ModalEditWidget = function ModalEditWidget(widget) {
    var _this2 = this;

    _classCallCheck(this, ModalEditWidget);

    this.widget = widget;

    var _ModalEditWidget = null;

    this.createModalEdit = function (inputHtml, bindElement) {
        if (_ModalEditWidget === null) {
            _ModalEditWidget = "<div class=\"modal fade\" id=\"EditWidget\">\n                                        <div class=\"modal-dialog modal-lg\">\n                                            <div class=\"modal-content\">\n                                                <div class=\"modal-header\">\n                                                    <h5 class=\"modal-title\">Edit Widget</h5>\n                                                    <button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button>\n                                                </div>\n\n                                                <div class=\"modal-body\" id=\"form-edit-widget\">     \n                                                </div>\n\n                                                <div class=\"modal-footer\">\n                                                    <button type=\"button\" id=\"btn-submit-edit-widget\" class=\"btn btn-success btn-block\">Save</button>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>";

            $('body').append(_ModalEditWidget);
        }
        $("#form-edit-widget").html(inputHtml);
        $("#EditWidget").modal('show');
    };

    this.submitEditClick = function (func) {
        $("#btn-submit-edit-widget").unbind().click(function () {
            func();
        });
    };

    this.closeModalEdit = function () {
        $("#EditWidget").modal('hide');
    };

    this.findTitleWidget = function () {
        var el = $("#" + _this2.widget.itemId).find('.title-widget');
        return el;
    };
};

var ModalEditWidgetMutiLine = function (_ModalEditWidget2) {
    _inherits(ModalEditWidgetMutiLine, _ModalEditWidget2);

    function ModalEditWidgetMutiLine(widget) {
        _classCallCheck(this, ModalEditWidgetMutiLine);

        var _this3 = _possibleConstructorReturn(this, (ModalEditWidgetMutiLine.__proto__ || Object.getPrototypeOf(ModalEditWidgetMutiLine)).call(this, widget));

        var inputHtml = "<div class=\"row\" id=\"div-title\">\n                            <div class=\"col-6\">\n                                <lable>Title</label>\n                                <input type=\"text\" class=\"form-control\" id=\"edit_title\"/>\n                            </div>\n                            <div class=\"col-6\">\n                                <lable>Time interval</label>\n                                <input type=\"number\" class=\"form-control\" id=\"edit_time_interval\"/>\n                            </div>\n                        </div>";

        var bindElement = function bindElement() {
            _this3.submitEditClick(onSubmit);
        };

        var onSubmit = function onSubmit() {
            var title = $("#edit_title").val();
            var timeInterval = $("#edit_time_interval").val();
            $(_this3.findTitleWidget()).html(title);
            _this3.widget.title_name = title;
            _this3.widget.timeInterval = timeInterval;
            _this3.closeModalEdit();
        };

        var setElement = function setElement() {
            $("#edit_title").val(widget.title_name);
            $("#edit_time_interval").val(widget.timeInterval);
        };

        _this3.initCreate = function () {
            _this3.createModalEdit(inputHtml, bindElement);
            bindElement();
            setElement();
        };
        return _this3;
    }

    return ModalEditWidgetMutiLine;
}(ModalEditWidget);

var ModalEditWidgetGauges = function (_ModalEditWidget3) {
    _inherits(ModalEditWidgetGauges, _ModalEditWidget3);

    function ModalEditWidgetGauges(widget) {
        _classCallCheck(this, ModalEditWidgetGauges);

        var _this4 = _possibleConstructorReturn(this, (ModalEditWidgetGauges.__proto__ || Object.getPrototypeOf(ModalEditWidgetGauges)).call(this, widget));

        var inputHtml = "<div id=\"edit-Gauges\" class=\"edit-widget-form\"> \n                            <div class=\"row\">\n                                <div class=\"col-6\">\n                                    <lable>Title</label>\n                                    <input type=\"text\" class=\"form-control\" id=\"edit_title\"/>\n                                </div>\n                                <div class=\"col-6\">\n                                    <lable>Time interval</label>\n                                    <input type=\"number\" class=\"form-control\" id=\"edit_time_interval\"/>\n                                </div>\n                            </div>\n                            <div class=\"row\">\n                                <div class=\"col-6\">\n                                    <lable>Unit</label>\n                                    <input type=\"text\" class=\"form-control\" id=\"edit_unit\"/>\n                                </div>\n                            </div>\n                        </div>";

        var bindElement = function bindElement() {
            _this4.submitEditClick(onSubmit);
        };

        var onSubmit = function onSubmit() {
            var title = $("#edit_title").val();
            var unit = $("#edit_unit").val();
            var timeInterval = $("#edit_time_interval").val();
            var unitId = _this4.widget.itemId.replace("item-", "unit_");
            $(_this4.findTitleWidget()).html(title);
            $("#" + _this4.widget.widgetId).empty();
            _this4.widget.gaugeWidget = {};
            _this4.widget.gaugeWidget = new JustGage({
                id: _this4.widget.widgetId,
                value: 0,
                min: _this4.widget.limitMin,
                max: _this4.widget.limitMax,
                symbol: ' ' + unit,
                relativeGaugeSize: true,
                titlePosition: "below"
            });
            $("#" + _this4.widget.widgetId).height($("#" + _this4.widgetId).height() - 5);
            _this4.widget.title_name = title;
            _this4.widget.unit = unit;
            _this4.widget.timeInterval = timeInterval;
            _this4.closeModalEdit();
        };

        var setElement = function setElement() {
            $("#edit_title").val(widget.title_name);
            $("#edit_time_interval").val(widget.timeInterval);
            $("#edit_unit").val(widget.unit);
        };

        _this4.initCreate = function () {
            _this4.createModalEdit(inputHtml, bindElement);
            bindElement();
            setElement();
        };
        return _this4;
    }

    return ModalEditWidgetGauges;
}(ModalEditWidget);

var ModalEditWidgetMap = function (_ModalEditWidget4) {
    _inherits(ModalEditWidgetMap, _ModalEditWidget4);

    function ModalEditWidgetMap(widget) {
        _classCallCheck(this, ModalEditWidgetMap);

        var _this5 = _possibleConstructorReturn(this, (ModalEditWidgetMap.__proto__ || Object.getPrototypeOf(ModalEditWidgetMap)).call(this, widget));

        var inputHtml = "<div class=\"row\" id=\"div-title\">\n                            <div class=\"col-6\">\n                                <lable>Title</label>\n                                <input type=\"text\" class=\"form-control\" id=\"edit_title\"/>\n                            </div>\n                            <div class=\"col-6\">\n                                <lable>Time interval</label>\n                                <input type=\"number\" class=\"form-control\" id=\"edit_time_interval\"/>\n                            </div>\n                        </div>";

        var bindElement = function bindElement() {
            _this5.submitEditClick(onSubmit);
        };

        var onSubmit = function onSubmit() {
            var title = $("#edit_title").val();
            var timeInterval = $("#edit_time_interval").val();
            $(_this5.findTitleWidget()).html(title);
            _this5.widget.title_name = title;
            _this5.widget.timeInterval = timeInterval;
            _this5.closeModalEdit();
        };

        var setElement = function setElement() {
            $("#edit_title").val(widget.title_name);
            $("#edit_time_interval").val(widget.timeInterval);
        };

        _this5.initCreate = function () {
            _this5.createModalEdit(inputHtml, bindElement);
            bindElement();
            setElement();
        };
        return _this5;
    }

    return ModalEditWidgetMap;
}(ModalEditWidget);

var ModalEditTextValue = function (_ModalEditWidget5) {
    _inherits(ModalEditTextValue, _ModalEditWidget5);

    function ModalEditTextValue(widget) {
        _classCallCheck(this, ModalEditTextValue);

        var _this6 = _possibleConstructorReturn(this, (ModalEditTextValue.__proto__ || Object.getPrototypeOf(ModalEditTextValue)).call(this, widget));

        var inputHtml = "<div class=\"row\" id=\"div-title\">\n                            <div class=\"col-6\">\n                                <lable>Title</label>\n                                <input type=\"text\" class=\"form-control\" id=\"edit-title\"/>\n                            </div>\n                            <div class=\"col-6\">\n                                <lable>Unit</label>\n                                <input type=\"text\" class=\"form-control\" id=\"edit-unit\"/>\n                            </div>\n                        </div>";

        var bindElement = function bindElement() {
            _this6.submitEditClick(onSubmit);
        };

        var onSubmit = function onSubmit() {
            var title = $("#edit-title").val();
            var unit = $("#edit-unit").val();
            $(_this6.findTitleWidget()).html(title);
            $("#" + _this6.widget.widgetId).next('span').html(unit);
            _this6.widget.title_name = title;
            _this6.widget.unit = unit;
            _this6.closeModalEdit();
        };

        var setElement = function setElement() {
            $("#edit-title").val(widget.title_name);
            $("#edit-unit").val(widget.unit);
        };

        _this6.initCreate = function () {
            _this6.createModalEdit(inputHtml, bindElement);
            bindElement();
            setElement();
        };
        return _this6;
    }

    return ModalEditTextValue;
}(ModalEditWidget);

var ModalEditTextLine = function (_ModalEditWidget6) {
    _inherits(ModalEditTextLine, _ModalEditWidget6);

    function ModalEditTextLine(widget) {
        _classCallCheck(this, ModalEditTextLine);

        var _this7 = _possibleConstructorReturn(this, (ModalEditTextLine.__proto__ || Object.getPrototypeOf(ModalEditTextLine)).call(this, widget));

        var inputHtml = "<div class=\"row\" id=\"div-title\">\n                            <div class=\"col-6\">\n                                <lable>Title</label>\n                                <input type=\"text\" class=\"form-control\" id=\"edit_title\"/>\n                            </div>\n                            <div class=\"col-6\">\n                                <lable>Unit</label>\n                                <input type=\"text\" class=\"form-control\" id=\"edit_unit\"/>\n                            </div>\n                        </div>";

        var bindElement = function bindElement() {
            _this7.submitEditClick(onSubmit);
        };

        var onSubmit = function onSubmit() {
            var title = $("#edit_title").val();
            var unit = $("#edit_unit").val();
            var unitId = _this7.widget.itemId.replace("item-", "unit_");
            $(_this7.findTitleWidget()).html(title);
            $("#" + unitId).html(unit);
            _this7.widget.title_name = title;
            _this7.widget.unit = unit;
            _this7.closeModalEdit();
        };

        var setElement = function setElement() {
            $("#edit_title").val(widget.title_name);
            $("#edit_unit").val(widget.unit);
        };

        _this7.initCreate = function () {
            _this7.createModalEdit(inputHtml, bindElement);
            bindElement();
            setElement();
        };
        return _this7;
    }

    return ModalEditTextLine;
}(ModalEditWidget);

var ModalEditTable = function (_ModalEditWidget7) {
    _inherits(ModalEditTable, _ModalEditWidget7);

    function ModalEditTable(widget) {
        _classCallCheck(this, ModalEditTable);

        var _this8 = _possibleConstructorReturn(this, (ModalEditTable.__proto__ || Object.getPrototypeOf(ModalEditTable)).call(this, widget));

        var inputHtml = "<div id = \"edit-text-box\" class=\"value-widget\">\n                            <div class=\"row\">\n                                <div class=\"col-6\">\n                                    <label>Title</label>\n                                    <input type=\"text\" id=\"edit_title\" class=\"form-control\" />\n                                </div>\n                                <div class=\"col-6\">\n                                    <label>Time interval</label>\n                                    <input type=\"number\" id=\"edit_time_interval\" class=\"form-control\" />\n                                </div>\n                            </div>\n                        </div> ";

        var bindElement = function bindElement() {
            _this8.submitEditClick(onSubmit);
        };

        var onSubmit = function onSubmit() {
            var title = $("#edit_title").val();
            var unit = $("#edit_time_interval").val();
            $(_this8.findTitleWidget()).html(title);
            $("#" + unitId).html(unit);
            _this8.widget.title_name = title;
            _this8.widget.timeInterval = timeInterval;
            _this8.closeModalEdit();
        };

        var setElement = function setElement() {
            $("#edit_title").val(widget.title_name);
            $("#edit_time_interval").val(widget.timeInterval);
        };

        _this8.initCreate = function () {
            _this8.createModalEdit(inputHtml, bindElement);
            bindElement();
            setElement();
        };
        return _this8;
    }

    return ModalEditTable;
}(ModalEditWidget);

var ModalEditWidgetTextBox = function (_ModalEditWidget8) {
    _inherits(ModalEditWidgetTextBox, _ModalEditWidget8);

    function ModalEditWidgetTextBox(widget) {
        _classCallCheck(this, ModalEditWidgetTextBox);

        var _this9 = _possibleConstructorReturn(this, (ModalEditWidgetTextBox.__proto__ || Object.getPrototypeOf(ModalEditWidgetTextBox)).call(this, widget));

        var inputHtml = "<div id = \"edit-text-box\" class=\"value-widget\">\n                            <div class=\"row\">\n                                <div class=\"col-6\">\n                                    <label>Text</label>\n                                    <input type=\"text\" id=\"edit-text-custom\" class=\"form-control\" />\n                                </div>\n                                <div class=\"col-6\">\n                                    <label>Font Size (px)</label>\n                                    <input type=\"number\" id=\"edit-font-size\" class=\"form-control\" />\n                                </div>\n                            </div>\n                        </div> ";

        var bindElement = function bindElement() {
            _this9.submitEditClick(onSubmit);
        };

        var onSubmit = function onSubmit() {
            $("#" + widget.widgetId).html($("#edit-text-custom").val());
            $("#" + widget.widgetId).css({
                "font-size": $("#edit-font-size").val() + "px"
            });
            widget.textbox = $("#edit-text-custom").val();
            widget.fontsize = $("#edit-font-size").val();
            _this9.closeModalEdit();
        };

        var setElement = function setElement() {
            $("#edit-text-custom").val(widget.textbox);
            $("#edit-font-size").val(widget.fontsize);
        };

        _this9.initCreate = function () {
            _this9.createModalEdit(inputHtml, bindElement);
            bindElement();
            setElement();
        };
        return _this9;
    }

    return ModalEditWidgetTextBox;
}(ModalEditWidget);

var Widget = function () {
    function Widget(widget) {
        var _this10 = this;

        _classCallCheck(this, Widget);

        this.itemId = widget.itemId;
        this.widgetId = widget.widgetId;
        this.apiName = widget.apiName;
        this.datasource = widget.datasource;
        this.type = widget.type;
        this.lastUpdateId = widget.lastUpdateId;
        this.title_name = widget.title_name;
        this.lastUpdate = widget.lastUpdate;
        this.timeInterval = widget.timeInterval;
        this.wi = widget.wi;
        this.download = widget.download;

        this.updateLastUpdate = function () {
            var time = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

            if (time) {
                _this10.lastUpdate = new Date(time);
                $("#" + _this10.lastUpdateId).html(_this10.lastUpdate.toDateString() + " " + _this10.lastUpdate.toLocaleTimeString());
            } else {
                _this10.lastUpdate = new Date();
                $("#" + _this10.lastUpdateId).html(_this10.lastUpdate.toDateString() + " " + _this10.lastUpdate.toLocaleTimeString());
            }
        };

        var options = {
            cellHeight: 80,
            verticalMargin: 10,
            float: false
        };

        var items = [{
            x: 0,
            y: 0,
            width: 6,
            height: 7
        }];

        var grid = null;

        var ModalDeleteWidget = null;

        var generateId = function generateId() {
            var id = Math.floor(100000 + Math.random() * 900000);
            var type = _this10.type.toLowerCase();
            _this10.itemId = "item-" + id;
            _this10.widgetId = type + "-" + id;
            _this10.lastUpdateId = type + "-lastupdate-" + id;
        };

        var onEditWidgetClick = function onEditWidgetClick(el) {
            var _el = $(el);
            var itemId = _el.attr("item");
            var widget = Dashboard.getWidgetById(itemId);

            var modal = null;
            if (widget.type === WIDGET_TYPE.MUTILINE) {
                modal = new ModalEditWidgetMutiLine(widget);
            } else if (widget.type === WIDGET_TYPE.TEXTLINE) {
                modal = new ModalEditTextLine(widget);
            } else if (widget.type === WIDGET_TYPE.GAUGES) {
                modal = new ModalEditWidgetGauges(widget);
            } else if (widget.type === WIDGET_TYPE.MAP) {
                modal = new ModalEditWidgetMap(widget);
            } else if (widget.type === WIDGET_TYPE.TEXTVALUE) {
                modal = new ModalEditTextValue(widget);
            } else if (widget.type === WIDGET_TYPE.TEXTBOX) {
                modal = new ModalEditWidgetTextBox(widget);
            } else if (widget.type === WIDGET_TYPE.TABLE) {
                modal = new ModalEditTable(widget);
            }
            modal.initCreate();
        };

        var bindWidgetElement = function bindWidgetElement() {

            $("#type_report").change(function () {
                var footer = $(this).parent().parent();
                var val = $(this).val();
                footer.find(".daily").hide();
                footer.find(".monthly").hide();
                footer.find(".yearly").hide();
                if (val === "daily") {
                    footer.find(".daily").show();
                } else if (val === "monthly") {
                    footer.find(".monthly").show();
                } else if (val === "yearly") {
                    footer.find(".yearly").show();
                }
            });

            $(".btn-delete-wi").unbind().click(function () {
                onDeleteWidgetClick($(this));
            });

            $(".btn-edit-wi").unbind().click(function () {
                onEditWidgetClick($(this));
            });

            $(".btn-full-screen").unbind().click(function () {
                onFullScreenClick($(this));
            });

            $(".btn-download").unbind().click(function () {
                var widget = Dashboard.getWidgetById($(this).attr('item'));
                var target = state.selectItemId ? document.getElementById(widget.timeSeries) : document.getElementById(widget.widgetId);

                html2canvas(target).then(function (canvas) {
                    __WEBPACK_IMPORTED_MODULE_2_file_saver___default()(canvas.toDataURL(), 'file-name.png');
                });
            });

            $(".btn-time-series").unbind().click(function () {
                $(this).next().toggle();
                var item = $(this).attr("item");
                var obj = Dashboard.getWidgetById(item);
                var footer = $(this).parent().parent().parent();
                if (footer.hasClass('active-time')) {
                    state.selectItemId = null;
                    $("#" + obj.widgetId).show();
                    $("#" + obj.timeSeries).hide();
                    footer.removeClass('active-time');
                } else {
                    state.selectItemId = item;
                    $("#" + obj.widgetId).hide();
                    $("#" + obj.timeSeries).show();
                    footer.addClass('active-time');
                }
                footer.find('.time-series-static').slideToggle('fast', function () {
                    if ($(this).is(':visible')) obj.fullChart.resize();
                });
            });

            if (_this10.sliderTime) {
                _this10.sliderTime.noUiSlider.on('update', function (values, handle) {
                    getValueTimeSeries();
                });

                $(".static_date").change(function () {
                    var obj = Dashboard.getWidgetById(state.selectItemId);
                    var time = obj.sliderTime.noUiSlider.get();
                    if (time) {
                        getValueTimeSeries();
                    }
                    return;
                });
            }
        };

        var getValueTimeSeries = function getValueTimeSeries() {
            try {
                var obj = Dashboard.getWidgetById(state.selectItemId);
                obj.updateTimeSeries();
            } catch (error) {}
        };

        var onFullScreenClick = function onFullScreenClick(el) {
            var obj = Dashboard.getWidgetById(el.attr("item"));
            $("#modal_full_screen").modal('show');
            $("#content-widget").html(obj.selectWiContentFull());
            obj.createFullWidget();
        };

        var onDeleteWidgetClick = function onDeleteWidgetClick(el) {
            swal({
                title: "Are you sure?",
                text: "Delete this widget",
                icon: "warning",
                buttons: true,
                dangerMode: true
            }).then(function (willDelete) {
                if (willDelete) {
                    submitDeleteWidget($(el));
                } else {
                    return;
                }
            });
        };

        var submitDeleteWidget = function submitDeleteWidget(el) {
            var item = $(el).attr("item");
            grid.removeWidget($('#' + item).closest(".grid-stack-item"));
            var index = widgetList.findIndex(function (widget) {
                return widget.itemId == item;
            });
            widgetList.splice(index, 1);
        };

        this.selectWiContent = function () {
            var valueId = "";
            var unitId = "";
            switch (_this10.type) {
                case WIDGET_TYPE.MUTILINE:
                    _this10.timeSeries = "time-" + _this10.widgetId;
                    return "<canvas id=\"" + _this10.widgetId + "\"></canvas><canvas id=\"" + _this10.timeSeries + "\" style=\"display:none\"></canvas>";
                case WIDGET_TYPE.MUTILINE_STATIC:
                    return "<canvas id=\"" + _this10.widgetId + "\"></canvas>";
                case WIDGET_TYPE.TEXTLINE:
                    valueId = _this10.itemId.replace("item-", "value-");
                    unitId = _this10.itemId.replace("item-", "unit-");
                    return " <h2 class=\"text-left\"><span id=\"" + valueId + "\">0</span> <span  id=\"" + unitId + "\">" + _this10.unit + "</span></h2>\n                             <canvas id=\"" + _this10.widgetId + "\"></canvas>\n                            ";
                case WIDGET_TYPE.RADAR:
                    return "<canvas id=\"" + _this10.widgetId + "\"></canvas>";
                case WIDGET_TYPE.GAUGES:
                    valueId = _this10.itemId.replace("item-", "gauges-text-");
                    unitId = _this10.itemId.replace("item-", "unit_");
                    // <canvas id="${this.widgetId}"></canvas>
                    //<h2><span id="${valueId}">0</span> <span  id="${unitId}">${this.unit}</span></h2>
                    return "\n                            <div id=\"" + _this10.widgetId + "\"></div>\n                            ";
                case WIDGET_TYPE.MAP:
                    return "<div id=\"" + _this10.widgetId + "\"></div>";
                case WIDGET_TYPE.TABLE:

                    return "<div>\n                            <table class=\"table table-bordered\" id=\"" + _this10.widgetId + "\" >\n                                <thead></thead><tbody></tbody>\n                            </table>\n                            </div>";
                case WIDGET_TYPE.TEXTVALUE:
                    return "\n                            <h1 style=\"color:" + _this10.rgb + "\"><span id=\"" + _this10.widgetId + "\">0</span> <span>" + _this10.unit + "</span><h1>\n                            ";
                case WIDGET_TYPE.TEXTBOX:
                    return "<span id=\"" + _this10.widgetId + "\"></span>";
                default:
                    break;
            }
        };

        this.selectWiContentFull = function () {
            var valueId = "";
            _this10.fullScreenId = "full-" + _this10.widgetId;
            switch (_this10.type) {
                case WIDGET_TYPE.MUTILINE:
                    return "<canvas id=\"" + _this10.fullScreenId + "\"></canvas>";
                case WIDGET_TYPE.TEXTLINE:
                    valueId = _this10.itemId.replace("item-", "value_full");
                    return " <h2 class=\"text-left\"><span id=\"" + valueId + "\">0</span> " + _this10.unit + "</h2>\n                             <canvas id=\"" + _this10.fullScreenId + "\"></canvas>\n                            ";
                case WIDGET_TYPE.GAUGES:
                    valueId = _this10.itemId.replace("item-", "gauges-text-full");
                    return "\n                            <h2><span id=\"" + valueId + "\">0</span> <span>" + _this10.unit + "</span></h2>\n                            <canvas id=\"" + _this10.fullScreenId + "\"></canvas>\n                            ";
                case WIDGET_TYPE.MAP:
                    return "\n                            <div id=\"" + fullScreenId + "\"></div>\n                            ";
                default:
                    break;
            }
        };

        this.createWidget = function () {
            var gridData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

            generateId();
            var node = items.pop() || {
                x: 3,
                y: 4,
                width: 6,
                height: 7
            };

            $(".grid-stack").gridstack(options);
            grid = $(".grid-stack").data("gridstack");

            var layout_widget = "";
            if (_this10.type !== "TextBox") {
                layout_widget = $("#layout-widget").html();
                if (_this10.type === WIDGET_TYPE.TEXTVALUE) {
                    node.width = 4;
                    node.height = 4;
                    layout_widget = $("#layout-widget-text-value").html();
                } else if (_this10.type === WIDGET_TYPE.MUTILINE) {
                    layout_widget = layout_widget.replace(/<<sliderTime>>/g, "slider-" + _this10.itemId);
                } else if (_this10.type.search('static') !== -1) {
                    layout_widget = $("#layout_widget_static").html();
                }
                layout_widget = layout_widget.replace(/div_id/g, _this10.itemId);
                layout_widget = layout_widget.replace(/widget_id/g, _this10.widgetId);
                layout_widget = layout_widget.replace("((wi))", _this10.selectWiContent());
                layout_widget = layout_widget.replace("((title_name))", _this10.title_name);
                layout_widget = layout_widget.replace("{last_update}", _this10.lastUpdateId);
                // layout_widget = layout_widget.replace(/<<switch>>/g, `switch-${this.itemId}`);
            } else {
                node.width = 6;
                node.height = 1;
                layout_widget = $("#layout-widget-text").html();
                layout_widget = layout_widget.replace(/div_id/g, _this10.itemId);
                layout_widget = layout_widget.replace("((wi))", _this10.selectWiContent());
            }

            node.id = _this10.itemId;
            var g = null;
            if (gridData) {
                g = grid.addWidget($(layout_widget), gridData.x, gridData.y, gridData.width, gridData.height, true, null, null, null, null, node.id);
            } else {
                g = grid.addWidget($(layout_widget), node.x, node.y, node.width, node.height, true, null, null, null, null, node.id);
            }

            if (!_this10.download) {
                g.find('.full-screen').find('.btn-download').remove();
            }

            // #set full-screen
            if (_this10.type != WIDGET_TYPE.MUTILINE) {
                g.find('.full-screen > .btn-full-screen').remove();
                g.find('.btn-time-series').remove();
                g.find('.time-series-static').remove();
                g.find('.card-footer').css({
                    height: 'auto'
                });
            } else {
                _this10.sliderTime = document.getElementById("slider-" + _this10.itemId);
                __WEBPACK_IMPORTED_MODULE_6_nouislider___default.a.create(_this10.sliderTime, {
                    start: [0, 1440],
                    connect: true,
                    // direction: 'rtl',
                    behaviour: 'tap-drag',
                    step: 10,
                    tooltips: [true, true],
                    range: {
                        'min': 0,
                        'max': 1440
                    },
                    format: wNumb({
                        decimals: 2,
                        mark: ":",
                        encoder: function encoder(a) {
                            return Object(__WEBPACK_IMPORTED_MODULE_1__utility_js__["c" /* aproximateHour */])(a);
                        }
                    })
                });
            }
            //g.data('_gridstack_data', JSON.stringify(formateDataSave(this)));

            bindWidgetElement();
        };
    }

    _createClass(Widget, null, [{
        key: "formateDataSave",
        value: function formateDataSave(data) {
            var formateDate = {
                type: data.type,
                apiName: data.apiName,
                datasource: data.datasource,
                download: data.download ? data.download : false,
                timeInterval: data.timeInterval
            };

            if (data.type === WIDGET_TYPE.MUTILINE) {
                formateDate.isGroupData = data.isGroupData;
                formateDate.title_name = data.title_name;
                formateDate.datasets = data.datasets;
            } else if (data.type === WIDGET_TYPE.TEXTLINE) {
                formateDate.title_name = data.title_name;
                formateDate.unit = data.unit;
                formateDate.rgb = data.rgb;
            } else if (data.type === WIDGET_TYPE.RADAR) {
                formateDate.datasets = data.datasets;
                formateDate.title_name = data.title_name;
                formateDate.labels = data.labels;
                formateDate.label = data.label;
                formateDate.color = data.color;
            } else if (data.type === WIDGET_TYPE.GAUGES) {
                formateDate.title_name = data.title_name;
                formateDate.opts = data.opts;
                formateDate.limitMin = data.limitMin;
                formateDate.limitMax = data.limitMax;
                formateDate.unit = data.unit;
            } else if (data.type === WIDGET_TYPE.MAP) {
                formateDate.isGroupData = data.isGroupData;
                formateDate.title_name = data.title_name;
            } else if (data.type === WIDGET_TYPE.TABLE) {
                formateDate.title_name = data.title_name;
                formateDate.table = data.table;
            } else if (data.type === WIDGET_TYPE.TEXTVALUE) {
                formateDate.title_name = data.title_name;
                formateDate.unit = data.unit;
                formateDate.rgb = data.rgb;
            } else if (data.type === WIDGET_TYPE.TEXTBOX) {
                formateDate.textbox = data.textbox;
                formateDate.fontsize = data.fontsize;
            }

            return formateDate;
        }
    }]);

    return Widget;
}();

var MutiLine = function (_Widget) {
    _inherits(MutiLine, _Widget);

    function MutiLine(widget) {
        var _this11;

        _classCallCheck(this, MutiLine);

        var _this;

        _this = (_this11 = _possibleConstructorReturn(this, (MutiLine.__proto__ || Object.getPrototypeOf(MutiLine)).call(this, widget)), _this11);
        _this11.isGroupData = widget.isGroupData;
        _this11.fullScreenId = widget.fullScreenId;
        _this11.chart = null;
        _this11.datasets = widget.datasets;
        _this11.dateTimeSeries = null;

        var options = {
            maintainAspectRatio: false,
            scales: {
                yAxes: [{
                    gridLines: {
                        display: false
                    },
                    ticks: {
                        beginAtZero: true,
                        fontFamily: "'Poppins', 'Kanit', 'sans-serif'",
                        fontStyle: "bold"
                    }
                }],
                xAxes: [{
                    //type: 'realtime',
                    gridLines: {
                        display: false
                    },
                    // realtime: { // per-axis options
                    //     duration: 20000, // data in the past 20000 ms will be displayed
                    //     delay: 3000, // delay of 1000 ms, so upcoming values are known before plotting a line
                    //     pause: false, // chart is not paused
                    //     ttl: undefined // data will be automatically deleted as it disappears off the chart
                    // },
                    ticks: {
                        fontFamily: "'Poppins', 'Kanit', 'sans-serif'",
                        fontStyle: "bold"
                    }

                }]

            },
            plugins: {
                streaming: { // per-chart option
                    frameRate: 30 // chart is drawn 30 times every second
                }
            },
            legend: {
                labels: {
                    fontFamily: "'Poppins', 'Kanit', 'sans-serif'",
                    fontColor: 'black'
                }
            },
            tooltips: {
                mode: 'nearest',
                intersect: false
            },
            hover: {
                mode: 'nearest',
                intersect: false
            }
        };

        _this11.createMutiLine = function () {
            var ctx = document.getElementById(_this11.widgetId);
            //console.log(this.datasets);
            var myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    datasets: Object(__WEBPACK_IMPORTED_MODULE_1__utility_js__["f" /* deepCopy */])(_this11.datasets)
                },
                options: options
            });
            //myChart.config.options.scales.xAxes[0].realtime.onRefresh = this.updateData(myChart);
            _this11.chart = myChart;
            _this11.createFullWidget();
        };

        _this11.updateData = function () {
            var myChart = _this11.chart;
            var d = new Date();
            myChart.data.labels.push(d.toLocaleTimeString());
            //let date = Date.now();
            var i = 0;
            myChart.data.datasets.forEach(function (dataset) {
                if (dataset.data.length > 10) {
                    dataset.data.splice(0, 1);
                    //myChart.data.labels.splice(0, 1);
                }

                if (!_this11.isGroupData) {
                    dataset.data.push(__WEBPACK_IMPORTED_MODULE_4_object_path___default.a.get(Datasource.getDatasources(), _this11.datasource[i]));
                } else {
                    dataset.data.push(__WEBPACK_IMPORTED_MODULE_4_object_path___default.a.get(Datasource.getDatasources(), _this11.datasource.replace('[]', i)));
                }
                i++;
            });
            if (myChart.data.labels.length > 10) myChart.data.labels.splice(0, 1);

            myChart.update();
            _this11.updateLastUpdate();
        };

        _this11.createFullWidget = function () {
            var ctx = document.getElementById(_this11.timeSeries);
            // state.selectItemId = this.itemId;
            _this11.fullChart = new Chart(ctx, {
                type: 'line',
                data: {
                    datasets: Object(__WEBPACK_IMPORTED_MODULE_1__utility_js__["f" /* deepCopy */])(_this11.datasets)
                },
                options: options
            });
        };

        var getDataTimeSeries = function () {
            var _ref = _asyncToGenerator( /*#__PURE__*/__WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.mark(function _callee() {
                return __WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return $.ajax({
                                    url: '/js/company/test-api-static.json',
                                    data: {},
                                    success: function success(res) {
                                        _this.dateTimeSeries = res;
                                    },
                                    error: function error(res) {}
                                });

                            case 2:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            return function getDataTimeSeries() {
                return _ref.apply(this, arguments);
            };
        }();

        _this11.updateTimeSeries = _asyncToGenerator( /*#__PURE__*/__WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.mark(function _callee2() {
            var myChart, i;
            return __WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.wrap(function _callee2$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            _context2.next = 2;
                            return getDataTimeSeries();

                        case 2:
                            myChart = _this.fullChart;
                            i = 0;


                            myChart.data.labels = [];
                            myChart.data.datasets.forEach(function (dataset) {
                                dataset.data = [];
                            });

                            _this.dateTimeSeries.map(function (data) {
                                myChart.data.labels.push(__WEBPACK_IMPORTED_MODULE_4_object_path___default.a.get(data, 'time'));
                                myChart.data.datasets.forEach(function (dataset) {
                                    if (!_this.isGroupData) {
                                        var valueIn = _this.datasource[i].split('.');
                                        valueIn.splice(0, 1);
                                        valueIn = valueIn.join('.');
                                        dataset.data.push(__WEBPACK_IMPORTED_MODULE_4_object_path___default.a.get(data, valueIn));
                                    } else {
                                        var _valueIn = _this.datasource.split('.');
                                        _valueIn.splice(0, 1);
                                        _valueIn = _valueIn.join('.');
                                        _valueIn = _valueIn.replace('[]', i);
                                        dataset.data.push(__WEBPACK_IMPORTED_MODULE_4_object_path___default.a.get(data, _valueIn));
                                    }
                                    i++;
                                });
                                i = 0;
                            });

                            myChart.update();

                        case 8:
                        case "end":
                            return _context2.stop();
                    }
                }
            }, _callee2, this);
        }));
        return _this11;
    }

    return MutiLine;
}(Widget);

var ChartTextLine = function (_MutiLine) {
    _inherits(ChartTextLine, _MutiLine);

    function ChartTextLine(widget) {
        _classCallCheck(this, ChartTextLine);

        var _this12 = _possibleConstructorReturn(this, (ChartTextLine.__proto__ || Object.getPrototypeOf(ChartTextLine)).call(this, widget));

        _this12.fullScreenId = widget.fullScreenId;
        _this12.unit = widget.unit;
        _this12.rgb = widget.rgb;

        var optionChartLineNotLable = {
            maintainAspectRatio: false,
            responsive: true,
            scales: {
                yAxes: [{
                    display: false
                }],
                xAxes: [{
                    display: false
                }]
            },
            legend: {
                display: false
            },
            elements: {
                point: {
                    radius: 0
                },
                line: {
                    tension: 0
                }
            },
            layout: {
                padding: {
                    left: 0,
                    right: 0,
                    top: 0,
                    bottom: 30
                }
            },
            stepsize: 100
        };

        _this12.createTextLine = function () {
            var ctx = document.getElementById(_this12.widgetId);
            var myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [{
                        label: '',
                        data: [],
                        backgroundColor: ['rgba(255, 255, 255, 0)'],
                        borderColor: [_this12.rgb],
                        borderWidth: 2
                    }]
                },
                options: optionChartLineNotLable
            });
            _this12.chart = myChart;
            _this12.updateData();
            return myChart;
        };

        _this12.createFullWidget = function () {
            var ctx = document.getElementById(_this12.fullScreenId);
            var myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [{
                        label: '',
                        data: [],
                        backgroundColor: ['rgba(255, 255, 255, 0)'],
                        borderColor: [_this12.rgb],
                        borderWidth: 2
                    }]
                },
                options: optionChartLineNotLable
            });
        };

        _this12.updateData = function () {
            var value = _this12.widgetId;
            value = value.replace(_this12.type.toLowerCase(), "value");
            var myChart = _this12.chart;
            //let data = Math.floor(100 + Math.random() * 900);
            var d = new Date();
            myChart.data.labels.push(d.toLocaleTimeString());
            myChart.data.datasets.forEach(function (dataset) {
                if (dataset.data.length > 10) {
                    dataset.data.splice(0, 1);
                    //myChart.data.labels.splice(0, 1);
                }
                var data = __WEBPACK_IMPORTED_MODULE_4_object_path___default.a.get(Datasource.getDatasources(), _this12.datasource);
                dataset.data.push(data);
                $("#" + value).html(data);
            });

            if (myChart.data.labels.length > 10) myChart.data.labels.splice(0, 1);

            myChart.update();
            _this12.updateLastUpdate();
        };

        _this12.liveData = function () {
            var value = _this12.widgetId;
            value = value.replace(_this12.type, "value_");
            var myChart = _this12.chart;
            var d = new Date();
            myChart.data.labels.push(d.toLocaleTimeString());
            myChart.data.datasets.forEach(function (dataset) {
                if (dataset.data.length > 10) {
                    dataset.data.splice(0, 1);
                    //myChart.data.labels.splice(0, 1);
                }
                var data = dataset.data[dataset.data.length - 1];
                dataset.data.push(data);
            });

            if (myChart.data.labels.length > 10) myChart.data.labels.splice(0, 1);

            myChart.update();
            //this.updateLastUpdate();
        };
        return _this12;
    }

    return ChartTextLine;
}(MutiLine);

var Radar = function (_Widget2) {
    _inherits(Radar, _Widget2);

    function Radar(widget) {
        _classCallCheck(this, Radar);

        var _this13 = _possibleConstructorReturn(this, (Radar.__proto__ || Object.getPrototypeOf(Radar)).call(this, widget));

        _this13.datasets = widget.datasets;
        _this13.labels = widget.labels;
        _this13.label = widget.label;
        _this13.color = widget.color;
        _this13.radar = null;

        var config = {
            type: 'radar',
            data: {
                labels: [],
                datasets: []
            },
            options: {
                maintainAspectRatio: false,
                legend: {
                    position: 'top'
                },
                title: {
                    display: true
                },
                scale: {
                    ticks: {
                        beginAtZero: true
                    }
                }
            }
        };

        _this13.createRadar = function () {
            var ctx = document.getElementById(_this13.widgetId);
            var myRadarChart = new Chart(ctx, config);
            var i = 0;
            myRadarChart.data.labels = _this13.labels;
            myRadarChart.data.datasets = Object(__WEBPACK_IMPORTED_MODULE_1__utility_js__["f" /* deepCopy */])(_this13.datasets);
            myRadarChart.data.datasets.forEach(function (dataset) {
                dataset.label = _this13.label[i];
                dataset.backgroundColor = Object(__WEBPACK_IMPORTED_MODULE_1__utility_js__["e" /* convertHex */])(_this13.color[i], 20);
                dataset.borderColor = _this13.color[i];
                dataset.pointBackgroundColor = _this13.color[i];
                dataset.data = [];
                i++;
            });
            myRadarChart.update();
            _this13.radar = myRadarChart;
        };

        _this13.updateData = function () {
            var i = 0;

            _this13.radar.data.datasets.forEach(function (dataset) {
                dataset.data = [];
                _this13.radar.data.labels.map(function (k) {
                    var data = __WEBPACK_IMPORTED_MODULE_4_object_path___default.a.get(Datasource.getDatasources(), _this13.datasource[i]);
                    dataset.data.push(data);
                    i++;
                });
            });
            _this13.radar.update();
            _this13.updateLastUpdate();
        };
        return _this13;
    }

    return Radar;
}(Widget);

var RadarEx = function RadarEx() {
    var _this14 = this;

    _classCallCheck(this, RadarEx);

    var colorEx = {
        0: 'rgb(255, 99, 132)',
        1: 'rgb(255, 159, 64)',
        2: 'rgb(255, 205, 86)',
        3: 'rgb(75, 192, 192)',
        4: 'rgb(54, 162, 235)',
        5: 'rgb(153, 102, 255)'
    };

    var config = {
        type: 'radar',
        data: {
            labels: [],
            datasets: []
        },
        options: {
            legend: {
                position: 'top'
            },
            title: {
                display: true
            },
            scale: {
                ticks: {
                    beginAtZero: true
                }
            }
        }
    };

    this.createRadarExample = function () {
        if (radarEx === null) {
            var ctx = document.getElementById("example_radar");
            var myRadarChart = new Chart(ctx, config);
            radarEx = myRadarChart;
            _this14.updateRadarExample();
        }
    };

    var removeRaderExample = function removeRaderExample() {
        radarEx.data.labels = [];
        radarEx.data.datasets = [];
    };

    this.updateRadarExample = function () {
        var lables = [];
        var lable = [];
        var data = [];
        var colorInput = [];
        var color = Chart.helpers.color;

        $(".radar-labels:visible").each(function () {
            lables.push($(this).val());
            data.push(getRandomInt(0, 50));
        });

        removeRaderExample();

        $(".label-radar:visible").each(function () {
            lable.push($(this).val());
            radarEx.data.datasets.push({});
        });

        $(".radar-color").each(function () {
            colorInput.push($(this).val());
        });

        // dataset.backgroundColor = color(colorEx[colorIndex]).alpha(0.2).rgbString();
        // dataset.borderColor = colorEx[colorIndex];
        // dataset.pointBackgroundColor = colorEx[colorIndex];

        var i = 0;
        radarEx.data.labels = lables;
        radarEx.data.datasets.forEach(function (dataset) {
            dataset.label = lable[i];
            dataset.backgroundColor = Object(__WEBPACK_IMPORTED_MODULE_1__utility_js__["e" /* convertHex */])(colorInput[i], 20);
            dataset.borderColor = colorInput[i];
            dataset.pointBackgroundColor = colorInput[i];
            dataset.data = data;
            data = data.map(function (n) {
                return n + getRandomInt(0, 10);
            });
            i++;
        });
        radarEx.update();
    };
};

var Gauges = function (_Widget3) {
    _inherits(Gauges, _Widget3);

    function Gauges(widget) {
        _classCallCheck(this, Gauges);

        var _this15 = _possibleConstructorReturn(this, (Gauges.__proto__ || Object.getPrototypeOf(Gauges)).call(this, widget));

        _this15.fullScreenId = widget.fullScreenId;
        _this15.textId = widget.textId;
        _this15.gaugeWidget = null;
        _this15.opts = widget.opts;
        _this15.limitMax = widget.limitMax ? widget.limitMax : 100;
        _this15.limitMin = widget.limitMin ? widget.limitMin : 0;
        _this15.unit = widget.unit;

        _this15.createGages = function () {
            _this15.gaugeWidget = new JustGage({
                id: _this15.widgetId,
                value: 0,
                min: _this15.limitMin,
                max: _this15.limitMax,
                symbol: ' ' + _this15.unit,
                relativeGaugeSize: true,
                titlePosition: "below"
            });
            $("#" + _this15.widgetId).height($("#" + _this15.widgetId).height() - 5);
            $("#" + _this15.widgetId).addClass('container');

            //this.updateData();

            // let target = document.getElementById(this.widgetId); // your canvas element
            // let gauge = new Gauge(target).setOptions(this.opts); // create sexy gauge!
            // gauge.maxValue = this.limitMax; // set max gauge value
            // gauge.setMinValue(0);  // Prefer setter over gauge.minValue = 0
            // gauge.animationSpeed = 32; // set animation speed (32 is default value)
            // gauge.set(0); // set actual value
            // this.gaugeWidget = gauge;
            // this.updateData();
        };

        _this15.updateData = function () {
            //getRandomInt(Number(this.limitMin), Number(this.limitMax))
            var data = __WEBPACK_IMPORTED_MODULE_4_object_path___default.a.get(Datasource.getDatasources(), _this15.datasource[0]);
            _this15.gaugeWidget.refresh(data ? data : 0);
            _this15.updateLastUpdate();

            // let data = Math.floor(Math.random() * (100 - 1));
            // $("#" + this.textId).html(data);
            // this.gaugeWidget.set(data);
            // this.updateLastUpdate();
        };
        return _this15;
    }

    return Gauges;
}(Widget);

var Map = function (_Widget4) {
    _inherits(Map, _Widget4);

    function Map(widget) {
        _classCallCheck(this, Map);

        var _this16 = _possibleConstructorReturn(this, (Map.__proto__ || Object.getPrototypeOf(Map)).call(this, widget));

        _this16.isGroupData = widget.isGroupData;
        _this16.datasource = widget.datasource;
        _this16.start = widget.start;
        _this16.end = widget.end;
        _this16.fullScreenId = widget.fullScreenId;
        _this16.myMap = null;

        _this16.createMap = function () {
            var mymap = void 0;
            var mapid = _this16.widgetId;
            var height = $("#" + _this16.itemId).height() - 100;
            $('#' + mapid).css('height', height);
            $('#' + mapid).css('width', 'auto');

            mymap = L.map(mapid, {
                dragging: true,
                zoomControl: true,
                scrollWheelZoom: false,
                zoomAnimation: false
            });

            $.getJSON('https://raw.githubusercontent.com/apisit/thailand.json/master/thailand.json').then(function (geoJSON) {
                var osm = new L.TileLayer.BoundaryCanvas("https://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}", {
                    boundary: geoJSON,
                    minZoom: 5,
                    maxZoom: 9,
                    attribution: '&copy; Tiles &copy; Esri &mdash; Esri, DeLorme, NAVTEQ'
                });
                mymap.addLayer(osm);
                var ukLayer = L.geoJSON(geoJSON);
                mymap.fitBounds(ukLayer.getBounds());
            }).then(function () {});

            function disableGrid() {
                var grid = $('.grid-stack').data('gridstack');
                grid.enableMove(false);
            }

            function enableGrid() {
                var grid = $('.grid-stack').data('gridstack');
                grid.enableMove(true);
            }

            $('.grid-stack').on('change', function (e, items) {
                if (mymap != null) {
                    mymap.invalidateSize(true);
                }
            });

            // mymap.on('mousemove', disableGrid);
            // mymap.on('mouseout', enableGrid);

            _this16.myMap = mymap;
        };

        _this16.updateData = function () {
            _this16.myMap.invalidateSize(true);

            var heat = [];
            if (!_this16.isGroupData) {
                _this16.datasource.map(function (data) {
                    console.log(data.value);
                    var lat = __WEBPACK_IMPORTED_MODULE_4_object_path___default.a.get(Datasource.getDatasources(), data.latitude);
                    var lon = __WEBPACK_IMPORTED_MODULE_4_object_path___default.a.get(Datasource.getDatasources(), data.longitude);
                    var label = data.label;
                    var value = __WEBPACK_IMPORTED_MODULE_4_object_path___default.a.get(Datasource.getDatasources(), data.value);
                    L.marker([lat, lon]).addTo(_this16.myMap).bindPopup(label + " : " + value);
                    // heat.push([lat, lon, value / 100]);


                    // L.heatLayer(heat, {
                    //     radius: 75
                    // }).addTo(this.myMap);
                });
            } else {
                var datasource = __WEBPACK_IMPORTED_MODULE_4_object_path___default.a.get(Datasource.getDatasources(), _this16.datasource.groupData);
                for (var i in datasource) {
                    var lat = __WEBPACK_IMPORTED_MODULE_4_object_path___default.a.get(Datasource.getDatasources(), _this16.datasource.latitude.replace('[]', i));
                    var lon = __WEBPACK_IMPORTED_MODULE_4_object_path___default.a.get(Datasource.getDatasources(), _this16.datasource.longitude.replace('[]', i));
                    var label = __WEBPACK_IMPORTED_MODULE_4_object_path___default.a.get(Datasource.getDatasources(), _this16.datasource.label.replace('[]', i));
                    var value = __WEBPACK_IMPORTED_MODULE_4_object_path___default.a.get(Datasource.getDatasources(), _this16.datasource.value.replace('[]', i));
                    L.marker([lat, lon]).addTo(_this16.myMap).bindPopup(label + " : " + value);
                    heat.push([lat, lon, value / 100]);
                }
                L.heatLayer(heat, {
                    radius: 75
                }).addTo(_this16.myMap);
            }

            // $.ajax({
            //     dataType: "json",
            //     url: '/js/company/test-api.json',
            //     async: false,
            //     success: function (data) {
            //         var heat = [];
            //         var WeatherForecasts = data.WeatherForecasts;
            //         for (let i in WeatherForecasts) {
            //             L.marker([WeatherForecasts[i].location.lat, WeatherForecasts[i].location.lon]).addTo(mymap).bindPopup(WeatherForecasts[i].location.province + " " + "อ ุณหภูมิที่ระดับพื้นผิว : " + WeatherForecasts[i].forecasts[1].data.tc + " °C");
            //             heat.push([WeatherForecasts[i].location.lat, WeatherForecasts[i].location.lon, WeatherForecasts[i].forecasts[1].data.tc / 100]);

            //         }
            //         L.heatLayer(heat, {
            //             radius: 75
            //         }).addTo(mymap);
            //     }
            // });
            _this16.updateLastUpdate();
        };

        _this16.createFullWidget = function () {
            var mymap = void 0;
            var mapid = _this16.fullScreenId;
            var height = "450px";
            $('#' + mapid).css('height', height);
            $('#' + mapid).css('width', 'auto');

            mymap = L.map(mapid, {
                dragging: true,
                zoomControl: true,
                scrollWheelZoom: false,
                zoomAnimation: false
            });

            $.getJSON('https://raw.githubusercontent.com/apisit/thailand.json/master/thailand.json').then(function (geoJSON) {
                var osm = new L.TileLayer.BoundaryCanvas("https://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}", {
                    boundary: geoJSON,
                    minZoom: 5,
                    maxZoom: 9,
                    attribution: '&copy; Tiles &copy; Esri &mdash; Esri, DeLorme, NAVTEQ'
                });
                mymap.addLayer(osm);
                var ukLayer = L.geoJSON(geoJSON);
                mymap.fitBounds(ukLayer.getBounds());
            }).then(function () {
                setTimeout(function () {
                    mymap.invalidateSize(true);
                    $.ajax({
                        dataType: "json",
                        url: '/js/company/test-api.json',
                        async: false,
                        success: function success(data) {
                            var heat = [];
                            var WeatherForecasts = data.WeatherForecasts;
                            for (var i in WeatherForecasts) {
                                L.marker([WeatherForecasts[i].location.lat, WeatherForecasts[i].location.lon]).addTo(mymap).bindPopup(WeatherForecasts[i].location.province + " " + "อ ุณหภูมิที่ระดับพื้นผิว : " + WeatherForecasts[i].forecasts[1].data.tc + " °C");
                                heat.push([WeatherForecasts[i].location.lat, WeatherForecasts[i].location.lon, WeatherForecasts[i].forecasts[1].data.tc / 100]);
                            }
                            L.heatLayer(heat, {
                                radius: 75
                            }).addTo(mymap);
                        }
                    });
                }, 1000);
            });
        };
        return _this16;
    }

    return Map;
}(Widget);

var Table = function (_Widget5) {
    _inherits(Table, _Widget5);

    function Table(widget) {
        _classCallCheck(this, Table);

        var _this17 = _possibleConstructorReturn(this, (Table.__proto__ || Object.getPrototypeOf(Table)).call(this, widget));

        _this17.table = widget.table;

        _this17.createTable = function () {
            _this17.el = $('#' + _this17.widgetId);
            _this17.el.find('thead').append('<tr></tr>');
            for (var i = 0; i < _this17.table.col_labels.length; i++) {
                _this17.el.find('thead tr').append("<th>" + _this17.table.col_labels[i] + "</th>");
            };

            for (var _i = 0; _i < _this17.table.rows.length; _i++) {
                var rows = '';
                for (var j = 0; j < _this17.table.col_labels.length; j++) {
                    if (j === 0) {
                        rows += "<td>" + _this17.table.rows[_i].label + "</td>";
                    } else {
                        rows += "<td></td>";
                    }
                }
                _this17.el.find('tbody').append("<tr>" + rows + "</tr>");
            };

            $('#' + _this17.widgetId).parent().addClass('table-responsive');
        };

        _this17.updateData = function () {
            try {
                var i = 0;
                var rows = _this17.table.rows;
                _this17.el.find('tbody tr').each(function () {
                    var j = 0;
                    $(this).find('td').not(':first').each(function () {
                        var data = __WEBPACK_IMPORTED_MODULE_4_object_path___default.a.get(Datasource.getDatasources(), rows[i].data[j]);
                        $(this).html(data);
                        j++;
                    });
                    i++;
                });
                _this17.updateLastUpdate();
            } catch (error) {}
        };
        return _this17;
    }

    return Table;
}(Widget);

var TextValue = function (_Widget6) {
    _inherits(TextValue, _Widget6);

    function TextValue(widget) {
        _classCallCheck(this, TextValue);

        var _this18 = _possibleConstructorReturn(this, (TextValue.__proto__ || Object.getPrototypeOf(TextValue)).call(this, widget));

        _this18.textValue = widget.textValue;
        _this18.unit = widget.unit;
        _this18.rgb = widget.rgb;

        _this18.createTextValue = function () {
            //this.updateData();
        };

        _this18.updateData = function () {
            //let data = Math.floor(Math.random() * (100 - 1));
            var data = __WEBPACK_IMPORTED_MODULE_4_object_path___default.a.get(Datasource.getDatasources(), _this18.datasource[0]);
            $("#" + _this18.widgetId).html(data);
            _this18.updateLastUpdate();
        };
        return _this18;
    }

    return TextValue;
}(Widget);

var TextBox = function (_Widget7) {
    _inherits(TextBox, _Widget7);

    function TextBox(widget) {
        _classCallCheck(this, TextBox);

        var _this19 = _possibleConstructorReturn(this, (TextBox.__proto__ || Object.getPrototypeOf(TextBox)).call(this, widget));

        _this19.textbox = widget.textbox;
        _this19.fontsize = widget.fontsize;
        _this19.createTextBox = function () {
            // console.log($("#" + this.widgetId));
            $("#" + _this19.widgetId).html(_this19.textbox);
            $("#" + _this19.widgetId).css({
                "font-size": _this19.fontsize + "px"
            });
        };
        return _this19;
    }

    return TextBox;
}(Widget);

var widgetList = [];

var Datasources = function Datasources() {
    var _this20 = this;

    _classCallCheck(this, Datasources);

    var listDatasource = null;
    var datasources = [];
    var apiSelect = 'datasources';

    var keyInput = [];

    var dataAccess = [];

    var modalEdit = null;

    var apiCount = 0;

    var getWebServices = function () {
        var _ref3 = _asyncToGenerator( /*#__PURE__*/__WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.mark(function _callee3() {
            return __WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.wrap(function _callee3$(_context3) {
                while (1) {
                    switch (_context3.prev = _context3.next) {
                        case 0:
                            _context3.next = 2;
                            return $.ajax({
                                url: END_POINT + 'company/webservices',
                                success: function success(res) {
                                    listDatasource = res.data;
                                    listDatasource.map(function (data) {
                                        $("#webservice_id").append("<option value=\"" + data.webservice_id + "\">" + data.service_name + "</option>");
                                    });
                                },
                                error: function error(res) {
                                    console.log(res);
                                }
                            });

                        case 2:
                        case "end":
                            return _context3.stop();
                    }
                }
            }, _callee3, this);
        }));

        return function getWebServices() {
            return _ref3.apply(this, arguments);
        };
    }();

    var getDatasource = function () {
        var _ref4 = _asyncToGenerator( /*#__PURE__*/__WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.mark(function _callee5() {
            return __WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.wrap(function _callee5$(_context5) {
                while (1) {
                    switch (_context5.prev = _context5.next) {
                        case 0:
                            _context5.next = 2;
                            return $.ajax({
                                url: END_POINT + "company/staticDatasource",
                                method: 'GET',
                                data: {
                                    static_id: $("#static_id").html()
                                },
                                success: function () {
                                    var _ref5 = _asyncToGenerator( /*#__PURE__*/__WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.mark(function _callee4(res) {
                                        return __WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.wrap(function _callee4$(_context4) {
                                            while (1) {
                                                switch (_context4.prev = _context4.next) {
                                                    case 0:
                                                        listDatasource = res.data;
                                                        _context4.next = 3;
                                                        return updateListDatasource();

                                                    case 3:
                                                    case "end":
                                                        return _context4.stop();
                                                }
                                            }
                                        }, _callee4, this);
                                    }));

                                    return function success(_x) {
                                        return _ref5.apply(this, arguments);
                                    };
                                }(),
                                error: function error(res) {
                                    console.log(res);
                                }
                            });

                        case 2:
                        case "end":
                            return _context5.stop();
                    }
                }
            }, _callee5, this);
        }));

        return function getDatasource() {
            return _ref4.apply(this, arguments);
        };
    }();

    var addDatasource = function addDatasource() {
        $.ajax({
            url: END_POINT + "company/static/datasource",
            method: 'POST',
            data: {
                static_id: $("#static_id").html(),
                name: $("#name_datasource").val(),
                webservice_id: $("#webservice_id").val(),
                timeInterval: 4500
            },
            success: function success(res) {
                getDatasource();
                $("#addDatasource").modal('hide');
            },
            error: function error(res) {
                console.log(res);
            }
        });
    };

    var updateListDatasource = function () {
        var _ref6 = _asyncToGenerator( /*#__PURE__*/__WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.mark(function _callee7() {
            var html, opt, list_datasource;
            return __WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.wrap(function _callee7$(_context7) {
                while (1) {
                    switch (_context7.prev = _context7.next) {
                        case 0:
                            $("#list_datasource").empty();
                            $(".select-datasource").empty();
                            html = "<h5>Datasource</h5>";
                            opt = "<option value=''>--Select datasource--</option>";
                            _context7.next = 6;
                            return listDatasource.map(function () {
                                var _ref7 = _asyncToGenerator( /*#__PURE__*/__WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.mark(function _callee6(data, index) {
                                    return __WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.wrap(function _callee6$(_context6) {
                                        while (1) {
                                            switch (_context6.prev = _context6.next) {
                                                case 0:
                                                    html += "<div class=\"row\">\n                            <div class=\"col-2 edit-datasource\" title=\"Edit\" index=" + index + " style=\"cursor:pointer\"> \n                                " + data.name + "\n                            </div>\n                            <div class=\"col-2 unActiveApi\" id=\"datasource-isActive-" + index + "\">\n                                <b>Not active</b>\n                            </div>\n                            <div class=\"col-2\" id=\"datasource-" + index + "\">\n\n                            </div>\n                            <div class=\"col-1\">\n                                <i class=\"fas fa-trash-alt remove-datasource\" id=\"" + data.id + "\"></i>\n                            </div>\n                        </div>";
                                                    opt += "<option value='" + data.id + "'>" + data.name + "</option>";
                                                    apiCount++;
                                                    _context6.next = 5;
                                                    return getApiDatasource(index);

                                                case 5:
                                                case "end":
                                                    return _context6.stop();
                                            }
                                        }
                                    }, _callee6, this);
                                }));

                                return function (_x2, _x3) {
                                    return _ref7.apply(this, arguments);
                                };
                            }());

                        case 6:

                            // $(".edit-datasource").unbind().click(function () {

                            // });

                            setInterval(function () {
                                checkTimeToUpdate();
                            }, 1000);

                            $(".select-datasource").html(opt);
                            list_datasource = $("#list_datasource").html(html);


                            list_datasource.find('.remove-datasource').unbind().click(function () {
                                var id = $(this).attr('id');
                                var datasource = findDatasource(id);
                                var check = false;
                                widgetList.map(function (widget) {
                                    if (widget.apiName === datasource.name) {
                                        check = true;
                                    }
                                });
                                if (!check) {
                                    swal({
                                        title: "Are you sure?",
                                        text: "to delete datasource name : " + datasource.name,
                                        icon: "warning",
                                        buttons: true,
                                        dangerMode: true
                                    }).then(function (willDelete) {
                                        if (willDelete) {
                                            deleteDatasource(id, datasource.name);
                                        } else {
                                            return;
                                        }
                                    });
                                } else {
                                    swal({
                                        title: "Warning !",
                                        text: "Can't delete datasource name : " + datasource.name + " because have widget used this datasource",
                                        icon: "warning",
                                        dangerMode: true
                                    });
                                }
                            });

                        case 10:
                        case "end":
                            return _context7.stop();
                    }
                }
            }, _callee7, this);
        }));

        return function updateListDatasource() {
            return _ref6.apply(this, arguments);
        };
    }();

    var deleteDatasource = function deleteDatasource(id, name) {
        $.ajax({
            url: END_POINT + 'company/static/datasource',
            method: 'DELETE',
            data: {
                static_id: $("#static_id").html(),
                id: id
            },
            success: function success(res) {
                // let index = datasources.findIndex(datasource => datasource.name == name);
                // datasources.splice(index, 1);
                $(".remove-datasource[id='" + id + "']").parent().parent().remove();
            },
            error: function error(res) {
                console.log(res);
            }
        });
    };

    // let onEditDatasourceClick = () => {
    //     if (modalEdit === null) {
    //         modalEdit = `    <div class="modal fade" id="addDatasource">
    //                             <div class="modal-dialog modal-lg">
    //                                 <div class="modal-content">

    //                                     <div class="modal-header">
    //                                         <h4 class="modal-title">Edit Datasource</h4>
    //                                         <button type="button" class="close" data-dismiss="modal">&times;</button>
    //                                     </div>

    //                                     <div class="modal-body">
    //                                         <div class="row">
    //                                             <div class="col-12">
    //                                                 <label for="">Name</label>
    //                                                 <input type="text" id="edit-name-datasource" class="form-control">
    //                                             </div>
    //                                         </div>
    //                                         <div class="row">
    //                                             <div class="col-6">
    //                                                 <label for="">Channel</label>
    //                                                 <select name="" id="edit-webservice_id" class="form-control">
    //                                                     <option value="">--Select Channel--</option>
    //                                                 </select>
    //                                             </div>
    //                                             <div class="col-6">
    //                                                 <label for="">Set time interval (s)</label>
    //                                                 <input type="number" id="add-data-time-interval" class="form-control">
    //                                             </div>
    //                                         </div>
    //                                     </div>

    //                                     <div class="modal-footer">
    //                                         <a class="btn btn-success btn-block" id="btn-add-new-datasource" href="#">Save</a>
    //                                     </div>
    //                                 </div>
    //                             </div>
    //                         </div>`;
    //     }
    // };

    var checkTimeToUpdate = function checkTimeToUpdate() {
        listDatasource.map(function () {
            var _ref8 = _asyncToGenerator( /*#__PURE__*/__WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.mark(function _callee8(data, index) {
                var diff;
                return __WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.wrap(function _callee8$(_context8) {
                    while (1) {
                        switch (_context8.prev = _context8.next) {
                            case 0:
                                diff = Dashboard.diffTime(data.lastUpdate, data.timeInterval);

                                if (!(diff >= data.timeInterval)) {
                                    _context8.next = 4;
                                    break;
                                }

                                _context8.next = 4;
                                return getApiDatasource(index);

                            case 4:
                                return _context8.abrupt("return");

                            case 5:
                            case "end":
                                return _context8.stop();
                        }
                    }
                }, _callee8, this);
            }));

            return function (_x4, _x5) {
                return _ref8.apply(this, arguments);
            };
        }());
    };

    var getApiDatasource = function () {
        var _ref9 = _asyncToGenerator( /*#__PURE__*/__WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.mark(function _callee10(index) {
            var url, name;
            return __WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.wrap(function _callee10$(_context10) {
                while (1) {
                    switch (_context10.prev = _context10.next) {
                        case 0:
                            //url: '/js/company/test-api2.json',
                            url = listDatasource[index].URL;
                            name = listDatasource[index].name;
                            _context10.next = 4;
                            return $.ajax({
                                url: '/js/company/test-api2.json',
                                success: function () {
                                    var _ref10 = _asyncToGenerator( /*#__PURE__*/__WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.mark(function _callee9(res) {
                                        var lastUpdate;
                                        return __WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.wrap(function _callee9$(_context9) {
                                            while (1) {
                                                switch (_context9.prev = _context9.next) {
                                                    case 0:
                                                        lastUpdate = new Date();

                                                        listDatasource[index].lastUpdate = lastUpdate;
                                                        $("#datasource-" + index).html(lastUpdate.toDateString() + " " + lastUpdate.toLocaleTimeString());
                                                        $("#datasource-isActive-" + index).html('<b>Active</b>');
                                                        $("#datasource-isActive-" + index).removeClass('unActiveApi');
                                                        $("#datasource-isActive-" + index).addClass('activeApi');
                                                        datasources[name] = res;
                                                        if (apiCount === listDatasource.length) {
                                                            state.loadingApi = true;
                                                        }

                                                    case 8:
                                                    case "end":
                                                        return _context9.stop();
                                                }
                                            }
                                        }, _callee9, this);
                                    }));

                                    return function success(_x7) {
                                        return _ref10.apply(this, arguments);
                                    };
                                }(),
                                error: function error(res) {
                                    console.log(res);
                                }
                            });

                        case 4:
                        case "end":
                            return _context10.stop();
                    }
                }
            }, _callee10, this);
        }));

        return function getApiDatasource(_x6) {
            return _ref9.apply(this, arguments);
        };
    }();

    var findDatasource = function findDatasource(id) {
        return listDatasource.find(function (data) {
            return data.id == id;
        });
    };

    var getKeyDatasource = function getKeyDatasource(index, data) {
        if ((typeof data === "undefined" ? "undefined" : _typeof(data)) == 'object') {
            if (index == keyInput.length) {
                return  true ? [Object.keys(data), data] : [];
            }
            return getKeyDatasource(index + 1, data[keyInput[index]]);
        }
    };

    var getKeyObject = function getKeyObject(data) {
        if ((typeof data === "undefined" ? "undefined" : _typeof(data)) == 'object') {
            return Object.keys(data);
        }
    };

    var createDataList = function createDataList(api) {
        var el = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

        $(el).parent().find(".data-list").empty();
        //let js = apiSelect + "['" + api + "']";
        var js = api;
        $(el).val(js);
        updateDataList(js, el);
    };

    var updateDataList = function updateDataList(value) {
        var el = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;


        try {
            keyInput = value.match(REG);
            //let key = getKeyDatasource(2, datasources[keyInput[1]]);
            var key = getKeyObject(__WEBPACK_IMPORTED_MODULE_4_object_path___default.a.get(datasources, value));
            el.parent().find(".data-list").empty();

            var html = "";
            if (keyInput.length > 1) html += "<li class=\"back-value-data list-group-item\" back=\"" + keyInput.slice(0, keyInput.length - 1).join('.') + "\" style=\"cursor:pointer\">Back</li>";

            key.map(function (_key) {
                var data = __WEBPACK_IMPORTED_MODULE_4_object_path___default.a.get(datasources, value + "." + _key);
                html += "<li class=\"value-data list-group-item\" style=\"cursor:pointer\" value=\"" + _key + "\">" + _key + " : " + data + "</li>";
            });
            var data_list = el.parent().find(".data-list").append(html);

            data_list.parent().find('.data-list').hover(function () {
                $(this).closest('.value-datasource').focus();
            }, function () {
                $(this).prev().blur();
                $(this).hide();
            });

            data_list.find('.value-data').unbind().click(function () {
                var el_val = $(this).parent().parent().find('.value-datasource,.value-group-data');
                var a = $(el_val).val();
                a += "." + $(this).attr('value');
                $(el_val).val(a);
                updateDataList($(el_val).val(), el_val);
                $(el_val).focus();

                $(".value-group-data").change();
            });

            data_list.find('.back-value-data').unbind().click(function () {
                var back = $(this).attr('back');
                // let value = "datasource";
                // for (let i = 1; i < back.length; i++) {
                //     value += `['${back[i]}']`;
                // }
                $(this).parent().parent().find('.value-datasource,.value-group-data').val(back);
                updateDataList(back, $(this).parent().parent().find('.value-datasource,.value-group-data'));
            });
            $(".data-list").scrollTop(0);
        } catch (error) {}

        // $("#Mutiline_value  .data-list,#Radar  .data-list,#Table  .data-list").hover(function () {
        //     $(this).closest('.value-datasource').focus();
        // }, function () {
        //     $(this).prev().blur();
        //     $(this).hide();
        // });

        // $(".value-data").unbind().click(function () {
        //     let el_val = $(this).parent().parent().find('.value-datasource,.value-group-data');
        //     let a = $(el_val).val();
        //     a += `['${$(this).attr('value')}']`;
        //     $(el_val).val(a);
        //     updateDataList($(el_val).val(), el_val);
        //     $(el_val).focus();

        //     $(".value-group-data").change();
        // });

        // $(".back-value-data").unbind().click(function () {
        //     let back = $(this).attr('back').split(',');
        //     let value = "datasource";
        //     for (let i = 1; i < back.length; i++) {
        //         value += `['${back[i]}']`;
        //     }
        //     $(this).parent().parent().find('.value-datasource,.value-group-data').val(value);
        //     updateDataList(value, $(this).parent().parent().find('.value-datasource,.value-group-data'));
        // });
    };

    var groupData = {
        createGroupData: function createGroupData(api) {
            var el = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            el.find(".data-list").empty();
            el.find('.value-group-data').val(api);
            groupData.updateDataGroup(api, el);
        },

        updateDataGroup: function updateDataGroup(api, el) {
            try {
                var key = getKeyObject(__WEBPACK_IMPORTED_MODULE_4_object_path___default.a.get(datasources, api));
                el.find(".data-list").empty();
                var html = "";
                key.map(function (_key) {
                    html += "<li class=\"value-data list-group-item\" style=\"cursor:pointer\" value=\"" + _key + "\">" + _key + "</li>";
                });

                var data_list = el.find(".data-list-group").append(html);

                data_list.find('.value-data').unbind().click(function () {
                    var el_val = el.parent().parent().find('.value-group-data');
                    var a = $(el_val).val();
                    a += "." + $(this).attr('value');
                    $(el_val).val(a);
                    groupData.updateDataGroup($(el_val).val(), el);
                    $(el_val).focus();

                    $(".value-group-data").change();
                });

                data_list.parent().find(".data-list").hover(function () {
                    $(this).closest('.value-datasource').focus();
                }, function () {
                    $(this).prev().blur();
                    $(this).hide();
                });

                $(".data-list").scrollTop(0);
                // if (keyInput.length > 2)
                //     el.parent().find(".data-list").prepend(`<li class="back-value-data list-group-item" back="${keyInput.slice(0, keyInput.length - 1).join(',')}" style="cursor:pointer">Back</li>`);
            } catch (error) {
                console.log(error);
            }

            $("#Mutiline_group_data .group-data .back-value-data,#map_group_data .group-data .back-value-data").unbind().click(function () {
                var back = $(this).attr('back').split(',');
                var value = "datasource";
                for (var i = 1; i < back.length; i++) {
                    value += "['" + back[i] + "']";
                }
                $(this).parent().parent().find('.value-datasource,.value-group-data').val(value);
                updateDataList(value, $(this).parent().parent().find('.value-datasource,.value-group-data'));
            });
        },

        createDataValue: function createDataValue(api, el) {
            try {
                var key = getKeyObject(__WEBPACK_IMPORTED_MODULE_4_object_path___default.a.get(datasources, api));
                el.find(".data-list-value").empty();
                var html = "";
                key.map(function (_key) {
                    var data = __WEBPACK_IMPORTED_MODULE_4_object_path___default.a.get(datasources, $(".value-group-data").val() + ".0." + _key);
                    html += "<li class=\"value-data list-group-item\" style=\"cursor:pointer\" value=\"" + _key + "\">" + _key + " : " + data + "</li>";
                });

                var data_list = el.find(".data-list-value").append(html);

                data_list.find('.value-data').unbind().click(function () {
                    var el_val = $(this).parent().parent().find('.value-datasource');
                    var a = $(el_val).val();
                    a += "." + $(this).attr('value');
                    $(el_val).val(a);
                    $(el_val).focus();
                    groupData.updateDataValue(a, el_val);
                });;

                data_list.parent().find(".data-list").hover(function () {
                    $(this).closest('.value-datasource').focus();
                }, function () {
                    $(this).prev().blur();
                    $(this).hide();
                });

                $(".data-list-value").scrollTop(0);
                // if (keyInput.length > 2)
                //     el.parent().find(".data-list").prepend(`<li class="back-value-data list-group-item" back="${keyInput.slice(0, keyInput.length - 1).join(',')}" style="cursor:pointer">Back</li>`);
            } catch (error) {
                console.log(error);
            }

            // $(".back-value-data").unbind().click(function () {
            //     let back = $(this).attr('back').split(',');
            //     let value = "datasource";
            //     for (let i = 1; i < back.length; i++) {
            //         value += `['${back[i]}']`;
            //     }
            //     $(this).parent().parent().find('.value-datasource,.value-group-data').val(value);
            //     updateDataList(value, $(this).parent().parent().find('.value-datasource,.value-group-data'));
            // });
        },

        updateDataValue: function updateDataValue(api, el) {
            try {

                var key = getKeyObject(__WEBPACK_IMPORTED_MODULE_4_object_path___default.a.get(datasources, $(".value-group-data").val() + '.0' + el.val()));
                console.log($(".value-group-data").val() + '.0' + el.val());

                var _keyInput = [];
                if (api != "") {
                    _keyInput = api.match(REG);
                }

                el.parent().find(".data-list-value").empty();
                var html = "";

                if (_keyInput.length == 1) html += "<li class=\"back-value-data list-group-item\" back=\"\" style=\"cursor:pointer\">Back</li>";else {
                    html += "<li class=\"back-value-data list-group-item\" back=\"" + _keyInput.slice(0, _keyInput.length - 1).join('.') + "\" style=\"cursor:pointer\">Back</li>";
                }

                key.map(function (_key) {
                    var data = __WEBPACK_IMPORTED_MODULE_4_object_path___default.a.get(datasources, "" + datasources + $(".value-group-data").val() + ".0" + el.val() + "." + _key);
                    //console.log(`${datasources}${$(".value-group-data").val()}.0${api}.${_key}`, api, data);
                    html += "<li class=\"value-data list-group-item\" style=\"cursor:pointer\" value=\"" + _key + "\">" + _key + " : " + data + " </li>";
                });

                $(".data-list-value").scrollTop(0);

                var data_list = el.parent().find(".data-list-value").append(html);

                data_list.find(".value-data").unbind().click(function () {
                    var el_val = $(this).parent().parent().find('.value-datasource');
                    var a = $(el_val).val();
                    a += "." + $(this).attr('value');
                    $(el_val).val(a);
                    $(el_val).focus();
                    groupData.updateDataValue(a, el_val);
                });

                data_list.find(".back-value-data").unbind().click(function () {
                    var value_datasource = $(this).parent().parent().find('.value-datasource');
                    var back = $(this).attr('back');
                    if (back == '') {
                        value_datasource.val('');
                    } else {
                        value_datasource.val('.' + back);
                    };
                    groupData.updateDataValue(back, value_datasource);
                });

                data_list.parent().find(".data-list").hover(function () {
                    $(this).closest('.value-datasource').focus();
                }, function () {
                    $(this).prev().blur();
                    $(this).hide();
                });
            } catch (error) {
                console.log(error);
            }
        }
    };

    this.setDataAccess = function (data) {
        dataAccess = data;
    };

    this.getDatasourceValue = function (index, data) {
        if (_typeof(data[dataAccess[index]]) == 'object') {
            return _this20.getDatasourceValue(index + 1, data[dataAccess[index]]);
        }
        return data[dataAccess[index]];
    };

    this.fatoryGetDatasourceValue = function (inputDataAccess, key) {
        try {
            dataAccess = inputDataAccess;
            return _this20.getDatasourceValue(2, datasources[key]);
        } catch (error) {}
    };

    this.getDatasources = function () {
        return datasources;
    };

    var bindElement = function () {
        var _ref11 = _asyncToGenerator( /*#__PURE__*/__WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.mark(function _callee11() {
            return __WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.wrap(function _callee11$(_context11) {
                while (1) {
                    switch (_context11.prev = _context11.next) {
                        case 0:
                            $("#btn_add_param").unbind().click(function () {
                                var html = $("#layout_param_add").html();

                                var form_add_param = $("#form_add_param").append(html);
                                form_add_param.find(".remove-param").unbind().click(function () {
                                    $(this).parent().parent().remove();
                                });
                            });

                            $("#btn-add-datasource").unbind().click(function () {
                                $("#addDatasource").modal('show');
                            });

                            $("#btn-add-new-datasource").unbind().click(function () {
                                addDatasource();
                            });

                            $('#Gauges,#TextValue,#text-line').on('change', '.select-datasource', function () {
                                $(this).parent().next().find(".value-datasource").val('');
                                $(this).parent().next().find(".data-list").hide();
                                if ($(this).val() != '') {
                                    var datasource = findDatasource($(this).val());
                                    state.apiName = datasource.name;
                                    $(this).parent().next().find(".value-datasource").focus();
                                    createDataList(datasource.name, $(this).parent().next().find(".value-datasource"));
                                } else {
                                    $(this).parent().next().find(".data-list").empty();
                                }
                            });

                            // $('#Gauges,#TextValue,#text-line,#map').on('focus', '.value-datasource', function () {
                            //     $('#Gauges,#TextValue,#text-line,#map').find('.data-list.active-data').each(function () {
                            //         $(this).hide();
                            //         $(this).removeClass('active-data');
                            //     });
                            //     $(this).next().addClass('active-data');
                            //     $(this).next().show();
                            // });

                            $("#Mutiline_value").on('change', '.select-datasource', function () {
                                $("#Mutiline_value").find(".value-datasource").val('');
                                $("#Mutiline_value").find(".data-list").hide();
                                if ($(this).val() != '') {
                                    var datasource = findDatasource($(this).val());
                                    state.apiName = datasource.name;
                                    //$(this).parent().parent().next().find(".value-datasource").focus();
                                    createDataList(datasource.name, $("#Mutiline_value").find(".value-datasource"));
                                } else {
                                    $("#Mutiline_value").find(".data-list").empty();
                                }
                            });

                            $("#map_value").on('change', '.select-datasource', function () {
                                $("#map_value").find(".value-datasource").val('');
                                $("#map_value").find(".data-list").hide();
                                if ($(this).val() != '') {
                                    var datasource = findDatasource($(this).val());
                                    state.apiName = datasource.name;
                                    //$(this).parent().parent().next().find(".value-datasource").focus();
                                    createDataList(datasource.name, $("#map_value").find(".value-datasource"));
                                } else {
                                    $(this).parent().parent().next().find(".data-list").empty();
                                }
                            });

                            $("#Mutiline_group_data,#map_group_data").on('change', '.select-datasource', function () {
                                $("#Mutiline_group_data,#map_group_data").find(".value-datasource").val('');
                                $("#Mutiline_group_data,#map_group_data").find(".data-list").hide();
                                if ($(this).val() != '') {
                                    var datasource = findDatasource($(this).val());
                                    state.apiName = datasource.name;
                                    groupData.createGroupData(datasource.name, $("#Mutiline_group_data,#map_group_data"));
                                } else {
                                    $(".data-list").empty();
                                    $(".value-group-data").val('');
                                }
                            });

                            $("#Mutiline_group_data,#map_group_data").on('change', '.value-group-data', function () {
                                var el = $("#Mutiline_group_data,#map_group_data");
                                var data = __WEBPACK_IMPORTED_MODULE_4_object_path___default.a.get(datasources, $(this).val());
                                if (validate.isArray(data)) {
                                    el.find("input[name='end']").val(data.length - 1);
                                    groupData.createDataValue($(this).val() + ".0", el);
                                } else {
                                    $(".data-list-value,data-list-label").empty();
                                }
                            });

                            $("#Mutiline_group_data").on('change', '.data-list-value', function () {});

                            $("#Table").on('change', '.select-datasource', function () {
                                $("#Table").find(".value-datasource").val('');
                                $("#Table").find(".data-list").hide();
                                $("#Table").find(".data-list").empty();
                                if ($(this).val() != '') {
                                    var datasource = findDatasource($(this).val());
                                    state.apiName = datasource.name;
                                    createDataList(datasource.name, $("#Table").find(".value-datasource"));
                                }
                            });

                            $('#Radar').on('change', '.select-datasource', function () {
                                var el_value = $(this).parent().parent().next().next();
                                $(el_value).find(".value-datasource").val('');
                                $(el_value).find(".data-list").hide();
                                $(el_value).find(".data-list").empty();
                                if ($(this).val() != '') {
                                    var datasource = findDatasource($(this).val());
                                    state.apiName = datasource.name;
                                    createDataList(datasource.name, $(el_value).find(".value-datasource"));
                                }
                            });

                            $("#addWidget .modal-body").on('focus', '.value-datasource,.value-group-data', function () {
                                $("#addWidget").find('.data-list.active-data').hide().removeClass('active-data');
                                $(this).next().addClass('active-data');
                                $(this).next().show();
                            });

                            // $('#addWidget .modal-body').on('hover', '.data-list > .value-data', function () {
                            //     console.log('hi');
                            //     $(this).closest('.value-datasource').focus();
                            // }, function () {
                            //     $(this).prev().blur();
                            //     $(this).hide();
                            // });

                            // $("#Table").on('focus', '.value-datasource', function () {
                            //     $("#Table").find('.data-list.active-data').hide().removeClass('active-data');
                            //     $(this).next().addClass('active-data');
                            //     $(this).next().show();
                            // });

                            // $('#Radar').on('focus', '.value-datasource', function () {
                            //     console.log($(this));
                            //     $(this).parent().parent().find('.data-list.active-data').each(function () {
                            //         $(this).hide();
                            //         $(this).removeClass('active-data');
                            //     });
                            //     $(this).next().addClass('active-data');
                            //     $(this).next().show();
                            // });

                            // $('#Mutiline_value').on('focus', '.value-datasource', function () {
                            //     $(this).parent().parent().parent().find('.data-list.active-data').each(function () {
                            //         $(this).hide();
                            //         $(this).removeClass('active-data');
                            //     });
                            //     $(this).next().addClass('active-data');
                            //     $(this).next().show();
                            // });

                            // $('#Mutiline_group_data,#map_group_data').on('focus', '.value-group-data', function () {
                            //     $('#Mutiline_group_data,#map_group_data').find('.data-list.active-data').each(function () {
                            //         $(this).hide();
                            //         $(this).removeClass('active-data');
                            //     });
                            //     $(this).next().addClass('active-data');
                            //     $(this).next().show();
                            // });

                            // $('#Radar').on('hover', '.data-list', function () {
                            //     $(this).closest('.value-datasource').focus();
                            // }, function () {
                            //     $(this).prev().blur();
                            //     $(this).hide();
                            // });

                            $('#Mutiline_value,#Gauges,#TextValue,#Radar').on('keyup', '.value-datasource', function () {
                                updateDataList($(this).val(), $(this));
                            });

                            $("#btn-add-value-Mutiline").unbind().click(function () {
                                var formhtml = $("#line_value_layout").first().html();
                                var html = __WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].mutiLineValue.append(formhtml);
                                var apiId = __WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].mutiLineValue.find(__WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].DOMString.class.selectDatasource).val();
                                if (apiId != '') {
                                    var datasource = findDatasource(apiId);
                                    html.find(__WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].DOMString.class.dataList).hide();
                                    html.find(__WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].DOMString.class.dataList).removeClass('active-data');
                                    createDataList(datasource.name, html.find(__WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].DOMString.class.valueDatasource).last());
                                } else {
                                    $(this).parent().parent().next().find(__WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].DOMString.class.dataList).empty();
                                }
                            });

                            $(".btn-add-point-map").unbind().click(function () {
                                var formhtml = $("#map_value_layout").first().html();
                                var html = __WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].mapValue.append(formhtml);
                                var apiId = __WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].mapValue.find(__WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].DOMString.class.selectDatasource).val();
                                if (apiId != '') {
                                    var datasource = findDatasource(apiId);
                                    html.find(__WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].DOMString.class.dataList).hide();
                                    html.find(__WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].DOMString.class.dataList).removeClass('active-data');
                                    createDataList(datasource.name, html.find('.value-of-map:last ' + __WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].DOMString.class.valueDatasource));
                                } else {
                                    $(this).parent().parent().next().find(__WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].DOMString.class.dataList).empty();
                                }
                            });

                        case 15:
                        case "end":
                            return _context11.stop();
                    }
                }
            }, _callee11, this);
        }));

        return function bindElement() {
            return _ref11.apply(this, arguments);
        };
    }();

    this.initCreate = _asyncToGenerator( /*#__PURE__*/__WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.mark(function _callee12() {
        return __WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.wrap(function _callee12$(_context12) {
            while (1) {
                switch (_context12.prev = _context12.next) {
                    case 0:
                        _context12.next = 2;
                        return bindElement();

                    case 2:
                        _context12.next = 4;
                        return getWebServices();

                    case 4:
                        _context12.next = 6;
                        return getDatasource();

                    case 6:
                    case "end":
                        return _context12.stop();
                }
            }
        }, _callee12, this);
    }));
};

var Dashboard = function () {
    function Dashboard() {
        _classCallCheck(this, Dashboard);

        var options = {
            cellHeight: 80,
            verticalMargin: 10,
            float: false
        };

        var grid = null;

        var time = null;

        var radarEx = null;
        var tableEx = null;

        var isGroupDataMutiLine = false;
        var isGroupDataMap = false;

        var sliderTime = null;

        var isRealTime = true;

        var getWigetType = function getWigetType() {
            return __WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].selectWidgetType.val();
        };

        var getTitleName = function getTitleName() {
            return __WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].inputTitleName.val();
        };

        var getTimeInterval = function getTimeInterval() {
            return __WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].inputTimeInterVal.val();
        };

        var getDateTimeNow = function getDateTimeNow() {
            var d = new Date();
            //return d.getDate() + "-" + d.getMonth() + "-" + d.getFullYear() + " " + d.getHours() + ":" + d.getMinutes() + ":" + d.getSeconds();
            return d.toUTCString();
        };

        var getValueMutiLine = function getValueMutiLine(divId) {
            var data_line = [];
            var data_widget = null;
            if (!isGroupDataMutiLine) {
                var length_label = __WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].mutiLine.find(__WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].DOMString.class.labelChartLine).length;
                var value_datasource = [];
                __WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].mutiLineValue.find(__WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].DOMString.class.valueDatasource).each(function () {
                    value_datasource.push($(this).val());
                });
                for (var i = 0; i < length_label; i++) {
                    var label_y = __WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].mutiLineValue.find(__WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].DOMString.class.labelChartLine);
                    var rgb = __WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].mutiLineValue.find(__WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].DOMString.class.colorChartLine);
                    var rgba = 'rgba(255,255,255,0.0)';
                    var data = null;
                    data = {
                        label: $(label_y[i]).val(),
                        backgroundColor: rgba,
                        borderColor: $(rgb[i]).val(),
                        borderWidth: 2
                    };
                    data_line.push(data);
                }

                data_widget = {
                    isGroupData: false,
                    apiName: state.apiName,
                    datasource: value_datasource,
                    fullScreenId: "myChartFull_" + divId,
                    download: true,
                    type: getWigetType(),
                    title_name: getTitleName(),
                    lastUpdate: getDateTimeNow(),
                    timeInterval: getTimeInterval(),
                    datasets: [].concat(data_line)
                };
            } else {
                var groupData = $(__WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].DOMString.class.valueGroupData).val();
                var start = $(__WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].DOMString.id.start).val();
                var end = $(__WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].DOMString.id.end).val();
                var value = $("input[name='value-data']:visible").val();
                var label = $("input[name='label-data']:visible").val();
                for (var _i2 = start; _i2 <= end; _i2++) {
                    var _data = null;
                    var hex = Object(__WEBPACK_IMPORTED_MODULE_1__utility_js__["g" /* randomHexColor */])();
                    _data = {
                        label: __WEBPACK_IMPORTED_MODULE_4_object_path___default.a.get(Datasource.getDatasources(), groupData + "." + _i2 + label),
                        backgroundColor: 'rgba(255,255,255,0.0)',
                        borderColor: hex,
                        borderWidth: 2
                    };
                    data_line.push(_data);
                }

                data_widget = {
                    isGroupData: true,
                    apiName: state.apiName,
                    datasource: groupData + ".[]" + value,
                    fullScreenId: "myChartFull_" + divId,
                    download: true,
                    type: getWigetType(),
                    title_name: getTitleName(),
                    lastUpdate: getDateTimeNow(),
                    timeInterval: getTimeInterval(),
                    datasets: [].concat(data_line)
                };
            }

            return data_widget;
        };

        var getValueTextLine = function getValueTextLine() {
            var unit = __WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].textLine.find(__WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].DOMString.id.unit).val();
            var rgb = __WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].valueTextLine.find(__WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].DOMString.id.rgb).val();
            var value_datasource = __WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].textLine.find(__WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].DOMString.class.valueDatasource).val();
            var data_widget = {
                apiName: state.apiName,
                datasource: value_datasource,
                //fullScreenId: "myChartFull_" + divId,
                download: true,
                type: getWigetType(),
                title_name: getTitleName(),
                lastUpdate: getDateTimeNow(),
                timeInterval: getTimeInterval(),
                rgb: rgb,
                unit: unit
            };
            return data_widget;
        };

        var getValueRader = function getValueRader() {
            var datasets = [];
            var labels = [];
            var label = [];
            var value_datasource = [];
            var color = [];

            __WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].radarLabel.find(__WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].DOMString.class.radarLabel).each(function () {
                labels.push($(this).val());
            });

            __WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].radarValue.find(__WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].DOMString.class.formRadarValue).each(function () {
                datasets.push({});
                label.push($(this).find(__WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].DOMString.class.labelRadar).val());

                $(this).find(__WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].DOMString.class.valueDatasource).each(function () {
                    value_datasource.push($(this).val());
                });

                $(this).find(__WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].DOMString.class.radarColor).each(function () {
                    color.push($(this).val());
                });
            });

            var data_widget = {
                datasets: datasets,
                labels: labels,
                label: label,
                color: color,
                apiName: state.apiName,
                datasource: value_datasource,
                type: getWigetType(),
                title_name: getTitleName(),
                lastUpdate: getDateTimeNow(),
                timeInterval: getTimeInterval(),
                download: true
            };

            return data_widget;
        };

        var getValueGauges = function getValueGauges(divId) {
            var limitMin = __WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].gauges.find(__WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].DOMString.id.g_limitMin).val();
            var limitMax = __WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].gauges.find(__WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].DOMString.id.g_limitMax).val();
            var unit = __WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].gauges.find(__WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].DOMString.id.unit).val();
            var value_datasource = [__WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].gauges.find(__WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].DOMString.class.valueDatasource).val()];
            var data_widget = {
                textId: "gauges-text-" + divId,
                apiName: state.apiName,
                datasource: value_datasource,
                fullScreenId: "gaugesFull-" + divId,
                download: true,
                type: getWigetType(),
                title_name: getTitleName(),
                lastUpdate: getDateTimeNow(),
                timeInterval: getTimeInterval(),
                limitMax: limitMax,
                limitMin: limitMin,
                unit: unit,
                opts: {
                    angle: 0, // The span of the gauge arc
                    lineWidth: 0.23, // The line thickness
                    radiusScale: 1, // Relative radius
                    pointer: {
                        length: 0.6, // // Relative to gauge radius
                        strokeWidth: 0.035, // The thickness
                        color: '#000000' // Fill color
                    },
                    limitMax: false, // If false, max value increases automatically if value > maxValue
                    limitMin: false, // If true, the min value of the gauge will be fixed
                    colorStart: '#6FADCF', // Colors
                    colorStop: '#8FC0DA', // just experiment with them
                    strokeColor: '#E0E0E0', // to see which ones work best for you
                    generateGradient: true,
                    highDpiSupport: true, // High resolution support
                    staticLabels: {
                        font: "10px Poppins", // Specifies font
                        labels: [0, Number(limitMax)], // Print labels at these values
                        color: "#000000", // Optional: Label text color
                        fractionDigits: 0 // Optional: Numerical precision. 0=round off.
                    }
                }
            };

            return data_widget;
        };

        var getValueMap = function getValueMap(divId) {
            var map = null;
            var data_widget = null;
            if (!isGroupDataMap) {
                var datasource = [];
                __WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].mapValue.find(__WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].DOMString.class.valueOfMap).each(function () {
                    var lat = $(this).find(".latitude").val();
                    var long = $(this).find(".longitude").val();
                    var value = $(this).find(".value-map").val();
                    var label = $(this).find(".label-map").val();

                    datasource.push({
                        latitude: lat,
                        longitude: long,
                        value: value,
                        label: label
                    });
                });

                data_widget = {
                    isGroupData: false,
                    apiName: state.apiName,
                    datasource: datasource,
                    fullScreenId: "mapFull-" + divId,
                    download: false,
                    type: getWigetType(),
                    title_name: getTitleName(),
                    lastUpdate: getDateTimeNow(),
                    timeInterval: getTimeInterval()
                };
            } else {
                map = $("#map_group_data");
                var groupData = $(".value-group-data:visible").val();
                var start = $("input[name='start']:visible").val();
                var end = $("input[name='end']:visible").val();
                var latitude = $("input[name='latitude']:visible").val();
                var longitude = $("input[name='longitude']:visible").val();
                var value = $("input[name='value_data']:visible").val();
                var label = $("input[name='label_data']:visible").val();
                data_widget = {
                    isGroupData: true,
                    apiName: state.apiName,
                    datasource: {
                        groupData: groupData,
                        latitude: groupData + ".[]" + latitude,
                        longitude: groupData + ".[]" + longitude,
                        value: groupData + ".[]" + value,
                        label: groupData + ".[]" + label
                    },
                    start: start,
                    end: end,
                    fullScreenId: "mapFull-" + divId,
                    download: false,
                    type: getWigetType(),
                    title_name: getTitleName(),
                    lastUpdate: getDateTimeNow(),
                    timeInterval: getTimeInterval()
                };
            }
            return data_widget;
        };

        var getValueTable = function getValueTable() {
            var data_widget = {
                apiName: state.apiName,
                download: false,
                type: getWigetType(),
                title_name: getTitleName(),
                lastUpdate: getDateTimeNow(),
                timeInterval: getTimeInterval(),
                table: tableEx.getValue()
            };
            return data_widget;
        };

        var getTextValue = function getTextValue(divId) {
            var unit = __WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].textValue.find(__WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].DOMString.id.unit).val();
            var rgb = __WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].textValue.find(__WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].DOMString.id.rgb).val();
            var value_datasource = [__WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].textValue.find(__WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].DOMString.class.valueDatasource).val()];
            var data_widget = {
                apiName: state.apiName,
                datasource: value_datasource,
                fullScreenId: "textValueFull-" + divId,
                download: false,
                type: getWigetType(),
                title_name: getTitleName(),
                lastUpdate: getDateTimeNow(),
                timeInterval: getTimeInterval(),
                unit: unit,
                rgb: rgb
            };

            return data_widget;
        };

        var getValueWigetText = function getValueWigetText() {
            var textbox = __WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].textBox.find(__WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].DOMString.id.inputTextCustom).val();
            var fontsize = __WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].textBox.find(__WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].DOMString.id.inputFontSize).val();
            var data_widget = {
                type: getWigetType(),
                download: false,
                title_name: null,
                lastUpdate: null,
                timeInterval: null,
                textbox: textbox,
                fontsize: fontsize
            };

            return data_widget;
        };

        var createFormBodyInputWidget = function createFormBodyInputWidget(type) {

            if (type.search('static') !== -1) {
                isRealTime = false;
            }

            __WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].divValueWidget.hide();
            __WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].divDefaultValue.show();
            __WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].btnAddWidget.show();

            if (type === WIDGET_TYPE.MUTILINE || type === WIDGET_TYPE.MUTILINE_STATIC) {
                __WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].mutiLine.show();
            } else if (type === WIDGET_TYPE.TEXTLINE) {
                __WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].textLine.show();
            } else if (type === WIDGET_TYPE.RADAR) {
                __WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].radar.show();
                radarEx = new RadarEx();
                radarEx.createRadarExample();

                $("#addWidget").on("change", ".radar-labels,.label-radar", function () {
                    radarEx.updateRadarExample();
                });

                $("#btn-add-datasource-radar").unbind().click(function () {
                    $(".remove-radar-labels").prop('disabled', true);
                    $("#btn-add-label-radar").hide();
                    $("#btn-edit-label-radar").show();
                    $(".radar-labels").prop('disabled', true);
                    createFormDatasourceRadar();
                    radarEx.updateRadarExample();

                    $(".remove-datasource-radar").unbind().click(function () {
                        $(this).parent().remove();
                        radarEx.updateRadarExample();
                    });
                });

                $("#btn-edit-label-radar").unbind().click(function () {
                    swal({
                        title: "Are you sure?",
                        text: "When you edit lables datasource will reset",
                        icon: "warning",
                        buttons: true,
                        dangerMode: true
                    }).then(function (willDelete) {
                        if (willDelete) {
                            $("#btn-add-label-radar").show();
                            $("#btn-edit-label-radar").hide();
                            $("#Radar_value").empty();
                            $(".radar-labels").prop('disabled', false);
                            $(".remove-radar-labels").prop('disabled', false);
                            radarEx.updateRadarExample();
                        } else {
                            return;
                        }
                    });
                });
            } else if (type === WIDGET_TYPE.TABLE) {
                __WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].table.show();
                tableEx = new __WEBPACK_IMPORTED_MODULE_3__lib_TableEx_min_js__["default"]($("#example_table"), {
                    col: {
                        amount: 3
                    },
                    row: {
                        amount: 3
                    }
                });

                tableEx.createTableEx();

                $("#btn_add_col").unbind().click(function () {
                    tableEx.addCol();
                    $(".select-datasource").change();
                });

                $("#btn_remove_col").unbind().click(function () {
                    tableEx.removeCol();
                });

                $("#btn_add_row").unbind().click(function () {
                    tableEx.addRow();
                    $(".select-datasource").change();
                });

                $("#btn_remove_row").unbind().click(function () {
                    tableEx.removeRow();
                });
            } else if (type === WIDGET_TYPE.GAUGES) {
                __WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].gauges.show();
            } else if (type === WIDGET_TYPE.TEXTVALUE) {
                __WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].textValue.show();
            } else if (type === WIDGET_TYPE.TEXTBOX) {
                __WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].textBox.show();
                __WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].divDefaultValue.hide();
            } else if (type === WIDGET_TYPE.MAP) {
                $("#map").show();
            } else {
                $("#add-new-widget").hide();
                $("#default_value").hide();
                $("#form-input-widget").html("");
            }
        };

        var createFormDatasourceRadar = function createFormDatasourceRadar() {
            if ($(".form-radar-value:visible").length == 0) {
                var layout_radar_value = $("#layout-radar-value").html();
                var layout_add_value_radar = $("#layout-add-value-radar").html();
                $("#Radar_value").append(layout_radar_value);
                $(".radar-labels:visible").each(function () {
                    var html = layout_add_value_radar.replace('((value-radar))', $(this).val());
                    $(".add-value-radar:visible").append(html);
                });
            } else {
                var form_rader_value = $("#Radar_value .form-radar-value").html();
                $("#Radar_value").append("<div class=\"form-radar-value\">" + form_rader_value + "</div>");
            }
        };

        var onAddWidgetClick = function onAddWidgetClick() {
            var type = getWigetType();
            var obj_widget = null;
            var widget = null;
            if (type === WIDGET_TYPE.MUTILINE || type === WIDGET_TYPE.MUTILINE_STATIC) {
                widget = getValueMutiLine();
                obj_widget = new MutiLine(Object.assign({}, widget));
                obj_widget.createWidget();
                obj_widget.createMutiLine();
            } else if (type === WIDGET_TYPE.TEXTLINE) {
                widget = getValueTextLine();
                obj_widget = new ChartTextLine(widget);
                obj_widget.createWidget();
                obj_widget.createTextLine();
            } else if (type === WIDGET_TYPE.RADAR) {
                widget = getValueRader();
                obj_widget = new Radar(widget);
                obj_widget.createWidget();
                obj_widget.createRadar();
            } else if (type === WIDGET_TYPE.GAUGES) {
                widget = getValueGauges();
                obj_widget = new Gauges(widget);
                obj_widget.createWidget();
                obj_widget.createGages();
            } else if (type === WIDGET_TYPE.MAP) {
                widget = getValueMap();
                obj_widget = new Map(widget);
                obj_widget.createWidget();
                obj_widget.createMap();
            } else if (type === WIDGET_TYPE.TABLE) {
                widget = getValueTable();
                obj_widget = new Table(widget);
                obj_widget.createWidget();
                obj_widget.createTable();
            } else if (type === WIDGET_TYPE.TEXTVALUE) {
                widget = getTextValue();
                obj_widget = new TextValue(widget);
                obj_widget.createWidget();
                obj_widget.createTextValue();
            } else if (type === WIDGET_TYPE.TEXTBOX) {
                widget = getValueWigetText();
                obj_widget = new TextBox(widget);
                obj_widget.createWidget();
                obj_widget.createTextBox();
            }
            widgetList.push(obj_widget);
        };

        var saveGrid = function saveGrid() {
            var serializedData = _.map($('.grid-stack > .grid-stack-item:visible'), function (el) {
                el = $(el);
                var node = el.data('_gridstack_node');
                //var widget = el.data('_gridstack_data');
                var wi = Dashboard.getWidgetById(node.id);
                return {
                    x: node.x,
                    y: node.y,
                    width: node.width,
                    height: node.height,
                    widget: Widget.formateDataSave(wi)
                };
            });

            $.ajax({
                url: END_POINT + 'company/static/dashboard',
                method: "PUT",
                data: {
                    static_id: $("#static_id").html(),
                    dashboard: JSON.stringify(serializedData, null, '')
                },
                success: function success(res) {
                    console.log(res);
                },
                error: function error(res) {
                    console.log(res);
                }
            });
            //console.log(JSON.stringify(serializedData, null, '        '))
            //setStorage("dashboard", serializedData);
            // $('#saved-data').val(JSON.stringify(serializedData, null, '        '));
        };

        var bindElement = function bindElement() {

            sliderTime = document.getElementById('sliderTime');

            __WEBPACK_IMPORTED_MODULE_6_nouislider___default.a.create(sliderTime, {
                start: [0, 1440],
                connect: true,
                // direction: 'rtl',
                behaviour: 'tap-drag',
                step: 10,
                tooltips: [true, true],
                range: {
                    'min': 0,
                    'max': 1440
                },
                format: wNumb({
                    decimals: 2,
                    mark: ":",
                    encoder: function encoder(a) {
                        return Object(__WEBPACK_IMPORTED_MODULE_1__utility_js__["c" /* aproximateHour */])(a);
                    }
                })
                // pips: {
                //     mode: 'steps',
                //     format: wNumb({
                //         mark: ":",
                //         decimals: 2,
                //         encoder: function (a) {
                //             return aproximateHour(a);
                //         }
                //     }),
                //     filter: filter_hour,
                //     stepped: true,
                //     density: 1
                // }
            });

            //alert(sliderTime.noUiSlider.get());

            // sliderTime.noUiSlider.on('update', function (values, handle) {
            //     getValueTimeSeries();
            // });

            // elements.staticDate.change(function () {
            //     let time = sliderTime.noUiSlider.get();
            //     if (time) {
            //         getValueTimeSeries();
            //     }
            //     return;
            // });

            __WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].btnSettingWidget.unbind().click(function () {
                clearInterval(time);
                $(this).hide();
                $(".full-screen").hide();
                $(".edit-widget").show();
                __WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].btnAdd.show();
                __WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].btnSaveWidget.show();
                __WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].btnCancelWidget.show();
                grid.enableMove(true);
                grid.enableResize(true);
            });

            __WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].selectWidgetType.change(function () {
                createFormBodyInputWidget(getWigetType());
            });

            __WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].btnAdd.unbind().click(function () {
                //$("input[type=text]").val("");
                $("select").val('');
                $("#addWidget").modal('show');
                $(".value-widget").hide();
                $("#add-new-widget").hide();
                __WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].divDefaultValue.hide();
            });

            __WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].btnAddWidget.unbind().click(function () {
                onAddWidgetClick();
            });

            __WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].btnSaveWidget.unbind().click(function () {
                __WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].btnSaveWidget.hide();
                __WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].btnAdd.hide();
                __WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].btnCancelWidget.hide();
                __WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].btnSettingWidget.show();
                $(".full-screen").show();
                $(".edit-widget").hide();
                updateDatalast();
                saveGrid();
                grid.enableMove(false);
                grid.enableResize(false);
            });

            __WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].btnCancelWidget.unbind().click(function () {
                __WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].btnSaveWidget.hide();
                __WEBPACK_IMPORTED_MODULE_5__viewBase_min_js__["a" /* elements */].btnAdd.hide();

                $(".edit-widget").hide();
                $(".full-screen").show();
                $("#cancelW").hide();
                $("#settingW").show();
                updateDatalast();
                grid.enableMove(false);
                grid.enableResize(false);
            });

            $("#btn-detail-toggle").unbind().click(function () {
                $("#top-header").slideToggle("fast");
                $(this).toggleClass('flip');
            });

            $('#addWidget .modal-body').on('click', '.remove-value', function () {
                $(this).parent().parent().remove();
            });

            $('#addWidget').unbind().on('click', '#btn-add-label-radar', function () {
                $("#Radar_label").append("  <div class=\"input-group\">\n                                                <input type=\"text\" class=\"form-control radar-labels mt-2\" value=\"\">\n                                                <div class=\"input-group-append\">\n                                                    <button class=\"btn btn-danger mt-2  remove-radar-labels\" type=\"button\"><i class=\"fas fa-times\"></i></button>\n                                                </div>\n                                            </div>");
                radarEx.updateRadarExample();
            });

            $("#Radar_value").on('change', '.radar-color', function () {
                radarEx.updateRadarExample();
            });

            $('#Radar_label').unbind().on('click', '.remove-radar-labels', function () {
                $(this).parent().parent().remove();
                radarEx.updateRadarExample();
            });

            $("input[name='isGroupDataMutiLine']").change(function () {
                isGroupDataMutiLine = $(this).val();
                if (isGroupDataMutiLine == 1) {
                    isGroupDataMutiLine = true;
                    $("#Mutiline_value").hide();
                    $("#Mutiline_group_data").show();
                    return;
                }
                isGroupDataMutiLine = false;
                $("#Mutiline_value").show();
                $("#Mutiline_group_data").hide();
            });

            $("input[name='isGroupDataMap']").change(function () {
                isGroupDataMap = $(this).val();
                if (isGroupDataMap == 1) {
                    isGroupDataMap = true;
                    $("#map_value").hide();
                    $("#map_group_data").show();
                    return;
                }
                isGroupDataMap = false;
                $("#map_value").show();
                $("#map_group_data").hide();
            });
        };

        var updateDatalast = function () {
            var _ref13 = _asyncToGenerator( /*#__PURE__*/__WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.mark(function _callee13() {
                return __WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.wrap(function _callee13$(_context13) {
                    while (1) {
                        switch (_context13.prev = _context13.next) {
                            case 0:
                                time = setInterval(function () {
                                    // && state.loadingApi
                                    if (widgetList.length > 0 && state.loadingApi) {
                                        updateData([].concat(widgetList));
                                    }
                                }, 1000);

                            case 1:
                            case "end":
                                return _context13.stop();
                        }
                    }
                }, _callee13, this);
            }));

            return function updateDatalast() {
                return _ref13.apply(this, arguments);
            };
        }();

        var updateData = function updateData(widgets) {
            for (var i = 0; i < widgets.length; i++) {
                var widget = widgets[i];
                if (widget.updateData) {
                    if (Dashboard.diffTime(widget.lastUpdate, widget.timeInterval) >= widget.timeInterval || state.firstTime) {
                        widget.updateData();
                    } else if (widget.liveData) {
                        widget.liveData();
                    }
                }
            }
            state.firstTime = false;
        };

        var createDashboardInit = function () {
            var _ref14 = _asyncToGenerator( /*#__PURE__*/__WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.mark(function _callee14(dashboard) {
                var obj_widget, widgets, gridData, type;
                return __WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.wrap(function _callee14$(_context14) {
                    while (1) {
                        switch (_context14.prev = _context14.next) {
                            case 0:
                                obj_widget = null;
                                widgets = null;
                                gridData = null;
                                type = "";

                                dashboard.map(function (data, key) {
                                    obj_widget = null;
                                    widgets = data.widget;
                                    gridData = data;
                                    type = widgets.type;
                                    widgets.lastUpdate = getDateTimeNow();
                                    if (type === WIDGET_TYPE.MUTILINE || type === WIDGET_TYPE.MUTILINE_STATIC) {
                                        obj_widget = new MutiLine(widgets);
                                        obj_widget.createWidget(gridData);
                                        obj_widget.createMutiLine();
                                    } else if (type === WIDGET_TYPE.GAUGES) {
                                        obj_widget = new Gauges(widgets);
                                        obj_widget.createWidget(gridData);
                                        obj_widget.createGages();
                                    } else if (type === WIDGET_TYPE.RADAR) {
                                        obj_widget = new Radar(widgets);
                                        obj_widget.createWidget(gridData);
                                        obj_widget.createRadar();
                                    } else if (type === WIDGET_TYPE.TEXTLINE) {
                                        obj_widget = new ChartTextLine(widgets);
                                        obj_widget.createWidget(gridData);
                                        obj_widget.createTextLine();
                                    } else if (type === WIDGET_TYPE.MAP) {
                                        obj_widget = new Map(widgets);
                                        obj_widget.createWidget(gridData);
                                        obj_widget.createMap();
                                    } else if (type === WIDGET_TYPE.TABLE) {
                                        obj_widget = new Table(widgets);
                                        obj_widget.createWidget(gridData);
                                        obj_widget.createTable();
                                    } else if (type === WIDGET_TYPE.TEXTVALUE) {
                                        obj_widget = new TextValue(widgets);
                                        obj_widget.createWidget(gridData);
                                        obj_widget.createTextValue();
                                    } else if (type === WIDGET_TYPE.TEXTBOX) {
                                        obj_widget = new TextBox(widgets);
                                        obj_widget.createWidget(gridData);
                                        obj_widget.createTextBox();
                                    }
                                    widgetList.push(obj_widget);
                                });

                                $(".edit-widget").hide();

                            case 6:
                            case "end":
                                return _context14.stop();
                        }
                    }
                }, _callee14, this);
            }));

            return function createDashboardInit(_x8) {
                return _ref14.apply(this, arguments);
            };
        }();

        this.initDashboard = _asyncToGenerator( /*#__PURE__*/__WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.mark(function _callee15() {
            var dashboard;
            return __WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.wrap(function _callee15$(_context15) {
                while (1) {
                    switch (_context15.prev = _context15.next) {
                        case 0:
                            Datasource = new Datasources();

                            dashboard = "";
                            // set widget $.ajax

                            _context15.next = 4;
                            return Datasource.initCreate();

                        case 4:
                            _context15.next = 6;
                            return $.ajax({
                                url: END_POINT + 'company/static/' + $("#static_id").html(),
                                method: 'GET',
                                success: function success(res) {
                                    if (res.data) {
                                        dashboard = GridStackUI.Utils.sort(JSON.parse(res.data[0].dashboard));
                                    }
                                },
                                error: function error(res) {
                                    console.log(res);
                                }
                            });

                        case 6:
                            _context15.next = 8;
                            return createDashboardInit(dashboard);

                        case 8:

                            $(".grid-stack").gridstack(options);
                            grid = $(".grid-stack").data("gridstack");
                            grid.enableMove(false);
                            grid.enableResize(false);

                            _context15.next = 14;
                            return updateDatalast();

                        case 14:

                            $("#loading").remove();

                            bindElement();

                        case 16:
                        case "end":
                            return _context15.stop();
                    }
                }
            }, _callee15, this);
        }));
    }

    _createClass(Dashboard, null, [{
        key: "diffTime",
        value: function diffTime(lastUpdate) {
            var timeInterval = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

            //console.log(lastUpdate);
            var current = new Date();
            var _lastUpdate = new Date(lastUpdate);

            var diff = (current.getTime() - _lastUpdate.getTime()) / 1000;
            //หน่วยวินาที
            // diff /= 60;

            return Math.abs(Math.round(diff));
        }
    }, {
        key: "updateGridData",
        value: function updateGridData(id) {}
    }, {
        key: "getWidgetById",
        value: function getWidgetById(itemId) {
            return widgetList.find(function (widget) {
                return widget.itemId == itemId;
            });
        }
    }]);

    return Dashboard;
}();

$(document).ready(function () {
    $("#sidebarCollapse").click();
    var dashboard = new Dashboard();
    dashboard.initDashboard();

    $('.grid-stack').on('gsresizestop', function (event, elem) {
        var el = $(elem);
        var data_widget = JSON.parse(el.data('_gridstack_data'));
        var node = el.data('_gridstack_node');
        var type = data_widget.type;
        if (type === "Gauges") {} else if (type === "MutiLine") {
            var element = event.target;
            var width = el.find('.card-body').width();
            var height = el.find('.card-body').height();
            var panel = el.find('.card-body');
            var id = $(panel).find('canvas');

            // var canvas = document.getElementById($(id).attr('id'));
            // canvas.toBlob(function (blob) {
            //     saveAs(blob, "pretty image.png");
            // });
        } else if (type === "Map") {
            var map = Dashboard.getWidgetById(node.id);
            map.myMap.invalidateSize();
        }
    });
});

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(a,b){if(true)!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (b),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else if("undefined"!=typeof exports)b();else{b(),a.FileSaver={exports:{}}.exports}})(this,function(){"use strict";function b(a,b){return"undefined"==typeof b?b={autoBom:!1}:"object"!=typeof b&&(console.warn("Depricated: Expected third argument to be a object"),b={autoBom:!b}),b.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(a.type)?new Blob(["\uFEFF",a],{type:a.type}):a}function c(b,c,d){var e=new XMLHttpRequest;e.open("GET",b),e.responseType="blob",e.onload=function(){a(e.response,c,d)},e.onerror=function(){console.error("could not download file")},e.send()}function d(a){var b=new XMLHttpRequest;return b.open("HEAD",a,!1),b.send(),200<=b.status&&299>=b.status}function e(a){try{a.dispatchEvent(new MouseEvent("click"))}catch(c){var b=document.createEvent("MouseEvents");b.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),a.dispatchEvent(b)}}var f="object"==typeof window&&window.window===window?window:"object"==typeof self&&self.self===self?self:"object"==typeof global&&global.global===global?global:void 0,a=f.saveAs||"object"!=typeof window||window!==f?function(){}:"download"in HTMLAnchorElement.prototype?function(b,g,h){var i=f.URL||f.webkitURL,j=document.createElement("a");g=g||b.name||"download",j.download=g,j.rel="noopener","string"==typeof b?(j.href=b,j.origin===location.origin?e(j):d(j.href)?c(b,g,h):e(j,j.target="_blank")):(j.href=i.createObjectURL(b),setTimeout(function(){i.revokeObjectURL(j.href)},4E4),setTimeout(function(){e(j)},0))}:"msSaveOrOpenBlob"in navigator?function(f,g,h){if(g=g||f.name||"download","string"!=typeof f)navigator.msSaveOrOpenBlob(b(f,h),g);else if(d(f))c(f,g,h);else{var i=document.createElement("a");i.href=f,i.target="_blank",setTimeout(function(){e(i)})}}:function(a,b,d,e){if(e=e||open("","_blank"),e&&(e.document.title=e.document.body.innerText="downloading..."),"string"==typeof a)return c(a,b,d);var g="application/octet-stream"===a.type,h=/constructor/i.test(f.HTMLElement)||f.safari,i=/CriOS\/[\d]+/.test(navigator.userAgent);if((i||g&&h)&&"object"==typeof FileReader){var j=new FileReader;j.onloadend=function(){var a=j.result;a=i?a:a.replace(/^data:[^;]*;/,"data:attachment/file;"),e?e.location.href=a:location=a,e=null},j.readAsDataURL(a)}else{var k=f.URL||f.webkitURL,l=k.createObjectURL(a);e?e.location=l:location.href=l,e=null,setTimeout(function(){k.revokeObjectURL(l)},4E4)}};f.saveAs=a.saveAs=a,"undefined"!=typeof module&&(module.exports=a)});

//# sourceMappingURL=FileSaver.min.js.map
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory){
  'use strict';

  /*istanbul ignore next:cant test*/
  if (typeof module === 'object' && typeof module.exports === 'object') {
    module.exports = factory();
  } else if (true) {
    // AMD. Register as an anonymous module.
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {
    // Browser globals
    root.objectPath = factory();
  }
})(this, function(){
  'use strict';

  var toStr = Object.prototype.toString;
  function hasOwnProperty(obj, prop) {
    if(obj == null) {
      return false
    }
    //to handle objects with null prototypes (too edge case?)
    return Object.prototype.hasOwnProperty.call(obj, prop)
  }

  function isEmpty(value){
    if (!value) {
      return true;
    }
    if (isArray(value) && value.length === 0) {
        return true;
    } else if (typeof value !== 'string') {
        for (var i in value) {
            if (hasOwnProperty(value, i)) {
                return false;
            }
        }
        return true;
    }
    return false;
  }

  function toString(type){
    return toStr.call(type);
  }

  function isObject(obj){
    return typeof obj === 'object' && toString(obj) === "[object Object]";
  }

  var isArray = Array.isArray || function(obj){
    /*istanbul ignore next:cant test*/
    return toStr.call(obj) === '[object Array]';
  }

  function isBoolean(obj){
    return typeof obj === 'boolean' || toString(obj) === '[object Boolean]';
  }

  function getKey(key){
    var intKey = parseInt(key);
    if (intKey.toString() === key) {
      return intKey;
    }
    return key;
  }

  function factory(options) {
    options = options || {}

    var objectPath = function(obj) {
      return Object.keys(objectPath).reduce(function(proxy, prop) {
        if(prop === 'create') {
          return proxy;
        }

        /*istanbul ignore else*/
        if (typeof objectPath[prop] === 'function') {
          proxy[prop] = objectPath[prop].bind(objectPath, obj);
        }

        return proxy;
      }, {});
    };

    function hasShallowProperty(obj, prop) {
      return (options.includeInheritedProps || (typeof prop === 'number' && Array.isArray(obj)) || hasOwnProperty(obj, prop))
    }

    function getShallowProperty(obj, prop) {
      if (hasShallowProperty(obj, prop)) {
        return obj[prop];
      }
    }

    function set(obj, path, value, doNotReplace){
      if (typeof path === 'number') {
        path = [path];
      }
      if (!path || path.length === 0) {
        return obj;
      }
      if (typeof path === 'string') {
        return set(obj, path.split('.').map(getKey), value, doNotReplace);
      }
      var currentPath = path[0];
      var currentValue = getShallowProperty(obj, currentPath);
      if (path.length === 1) {
        if (currentValue === void 0 || !doNotReplace) {
          obj[currentPath] = value;
        }
        return currentValue;
      }

      if (currentValue === void 0) {
        //check if we assume an array
        if(typeof path[1] === 'number') {
          obj[currentPath] = [];
        } else {
          obj[currentPath] = {};
        }
      }

      return set(obj[currentPath], path.slice(1), value, doNotReplace);
    }

    objectPath.has = function (obj, path) {
      if (typeof path === 'number') {
        path = [path];
      } else if (typeof path === 'string') {
        path = path.split('.');
      }

      if (!path || path.length === 0) {
        return !!obj;
      }

      for (var i = 0; i < path.length; i++) {
        var j = getKey(path[i]);

        if((typeof j === 'number' && isArray(obj) && j < obj.length) ||
          (options.includeInheritedProps ? (j in Object(obj)) : hasOwnProperty(obj, j))) {
          obj = obj[j];
        } else {
          return false;
        }
      }

      return true;
    };

    objectPath.ensureExists = function (obj, path, value){
      return set(obj, path, value, true);
    };

    objectPath.set = function (obj, path, value, doNotReplace){
      return set(obj, path, value, doNotReplace);
    };

    objectPath.insert = function (obj, path, value, at){
      var arr = objectPath.get(obj, path);
      at = ~~at;
      if (!isArray(arr)) {
        arr = [];
        objectPath.set(obj, path, arr);
      }
      arr.splice(at, 0, value);
    };

    objectPath.empty = function(obj, path) {
      if (isEmpty(path)) {
        return void 0;
      }
      if (obj == null) {
        return void 0;
      }

      var value, i;
      if (!(value = objectPath.get(obj, path))) {
        return void 0;
      }

      if (typeof value === 'string') {
        return objectPath.set(obj, path, '');
      } else if (isBoolean(value)) {
        return objectPath.set(obj, path, false);
      } else if (typeof value === 'number') {
        return objectPath.set(obj, path, 0);
      } else if (isArray(value)) {
        value.length = 0;
      } else if (isObject(value)) {
        for (i in value) {
          if (hasShallowProperty(value, i)) {
            delete value[i];
          }
        }
      } else {
        return objectPath.set(obj, path, null);
      }
    };

    objectPath.push = function (obj, path /*, values */){
      var arr = objectPath.get(obj, path);
      if (!isArray(arr)) {
        arr = [];
        objectPath.set(obj, path, arr);
      }

      arr.push.apply(arr, Array.prototype.slice.call(arguments, 2));
    };

    objectPath.coalesce = function (obj, paths, defaultValue) {
      var value;

      for (var i = 0, len = paths.length; i < len; i++) {
        if ((value = objectPath.get(obj, paths[i])) !== void 0) {
          return value;
        }
      }

      return defaultValue;
    };

    objectPath.get = function (obj, path, defaultValue){
      if (typeof path === 'number') {
        path = [path];
      }
      if (!path || path.length === 0) {
        return obj;
      }
      if (obj == null) {
        return defaultValue;
      }
      if (typeof path === 'string') {
        return objectPath.get(obj, path.split('.'), defaultValue);
      }

      var currentPath = getKey(path[0]);
      var nextObj = getShallowProperty(obj, currentPath)
      if (nextObj === void 0) {
        return defaultValue;
      }

      if (path.length === 1) {
        return nextObj;
      }

      return objectPath.get(obj[currentPath], path.slice(1), defaultValue);
    };

    objectPath.del = function del(obj, path) {
      if (typeof path === 'number') {
        path = [path];
      }

      if (obj == null) {
        return obj;
      }

      if (isEmpty(path)) {
        return obj;
      }
      if(typeof path === 'string') {
        return objectPath.del(obj, path.split('.'));
      }

      var currentPath = getKey(path[0]);
      if (!hasShallowProperty(obj, currentPath)) {
        return obj;
      }

      if(path.length === 1) {
        if (isArray(obj)) {
          obj.splice(currentPath, 1);
        } else {
          delete obj[currentPath];
        }
      } else {
        return objectPath.del(obj[currentPath], path.slice(1));
      }

      return obj;
    }

    return objectPath;
  }

  var mod = factory();
  mod.create = factory;
  mod.withInheritedProps = factory({includeInheritedProps: true})
  return mod;
});


/***/ }),
/* 10 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return elements; });
var elements = {
    DOMString: {
        class: {
            inputIsGroupDataMutiLine: '.isGroupDataMutiLine',
            inputIsGroupDataMap: '.isGroupDataMap',
            selectDatasource: '.select-datasource:visible',
            valueDatasource: '.value-datasource:visible',
            dataList: '.data-list:visible',
            dataListValue: '.data-list-value:visible',
            valueGroupData: '.value-group-data:visible',
            labelChartLine: '.label-y-chart-line:visible',
            colorChartLine: '.rgb-chart-line:visible',
            radarLabel: '.radar-labels',
            labelRadar: '.label-radar',
            radarColor: '.radar-color',
            formRadarValue: '.form-radar-value:visible',
            removeRadarLabel: '.remove-radar-labels:visible',
            valueOfMap: ".value-of-map"
        },
        id: {
            inputTextCustom: '#text_custom',
            inputFontSize: '#font_size',
            start: '#start',
            end: '#end',
            g_limitMin: '#g_limitMin',
            g_limitMax: '#g_limitMax',
            unit: '#unit',
            rgb: '#rgb'
        }
    },

    staticDate: $("#static_date"),
    btnAdd: $("#addW"),
    btnAddWidget: $("#add-new-widget"),
    btnSaveWidget: $("#saveW"),
    btnCancelWidget: $("#cancelW"),
    btnSettingWidget: $("#settingW"),

    divValueWidget: $(".value-widget"),
    selectWidgetType: $("select[name='widget_type']"),
    divDefaultValue: $("#default_value"),
    inputTitleName: $("input[name='title_name']"),
    inputTimeInterVal: $("input[name='time_interval']"),

    textBox: $("#text_box"),
    mutiLine: $("#MutiLine"),
    mutiLine_static: $("#mutiLine_static"),
    mutiLineValue: $("#Mutiline_value"),
    radar: $("#Radar"),
    radarLabel: $("#Radar_label"),
    radarValue: $("#Radar_value"),
    table: $("#Table"),
    gauges: $("#Gauges"),
    textLine: $("#text-line"),
    valueTextLine: $("#value-text-line"),
    textValue: $("#TextValue"),
    map: $("#map"),
    mapValue: $("#map_value"),
    exampleRadar: $("#example_radar"),
    exampleTable: $("#example_table")
};

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! nouislider - 12.1.0 - 10/25/2018 */
(function(factory) {
    if (true) {
        // AMD. Register as an anonymous module.
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else if (typeof exports === "object") {
        // Node/CommonJS
        module.exports = factory();
    } else {
        // Browser globals
        window.noUiSlider = factory();
    }
})(function() {
    "use strict";

    var VERSION = "12.1.0";

    function isValidFormatter(entry) {
        return typeof entry === "object" && typeof entry.to === "function" && typeof entry.from === "function";
    }

    function removeElement(el) {
        el.parentElement.removeChild(el);
    }

    function isSet(value) {
        return value !== null && value !== undefined;
    }

    // Bindable version
    function preventDefault(e) {
        e.preventDefault();
    }

    // Removes duplicates from an array.
    function unique(array) {
        return array.filter(function(a) {
            return !this[a] ? (this[a] = true) : false;
        }, {});
    }

    // Round a value to the closest 'to'.
    function closest(value, to) {
        return Math.round(value / to) * to;
    }

    // Current position of an element relative to the document.
    function offset(elem, orientation) {
        var rect = elem.getBoundingClientRect();
        var doc = elem.ownerDocument;
        var docElem = doc.documentElement;
        var pageOffset = getPageOffset(doc);

        // getBoundingClientRect contains left scroll in Chrome on Android.
        // I haven't found a feature detection that proves this. Worst case
        // scenario on mis-match: the 'tap' feature on horizontal sliders breaks.
        if (/webkit.*Chrome.*Mobile/i.test(navigator.userAgent)) {
            pageOffset.x = 0;
        }

        return orientation
            ? rect.top + pageOffset.y - docElem.clientTop
            : rect.left + pageOffset.x - docElem.clientLeft;
    }

    // Checks whether a value is numerical.
    function isNumeric(a) {
        return typeof a === "number" && !isNaN(a) && isFinite(a);
    }

    // Sets a class and removes it after [duration] ms.
    function addClassFor(element, className, duration) {
        if (duration > 0) {
            addClass(element, className);
            setTimeout(function() {
                removeClass(element, className);
            }, duration);
        }
    }

    // Limits a value to 0 - 100
    function limit(a) {
        return Math.max(Math.min(a, 100), 0);
    }

    // Wraps a variable as an array, if it isn't one yet.
    // Note that an input array is returned by reference!
    function asArray(a) {
        return Array.isArray(a) ? a : [a];
    }

    // Counts decimals
    function countDecimals(numStr) {
        numStr = String(numStr);
        var pieces = numStr.split(".");
        return pieces.length > 1 ? pieces[1].length : 0;
    }

    // http://youmightnotneedjquery.com/#add_class
    function addClass(el, className) {
        if (el.classList) {
            el.classList.add(className);
        } else {
            el.className += " " + className;
        }
    }

    // http://youmightnotneedjquery.com/#remove_class
    function removeClass(el, className) {
        if (el.classList) {
            el.classList.remove(className);
        } else {
            el.className = el.className.replace(
                new RegExp("(^|\\b)" + className.split(" ").join("|") + "(\\b|$)", "gi"),
                " "
            );
        }
    }

    // https://plainjs.com/javascript/attributes/adding-removing-and-testing-for-classes-9/
    function hasClass(el, className) {
        return el.classList
            ? el.classList.contains(className)
            : new RegExp("\\b" + className + "\\b").test(el.className);
    }

    // https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollY#Notes
    function getPageOffset(doc) {
        var supportPageOffset = window.pageXOffset !== undefined;
        var isCSS1Compat = (doc.compatMode || "") === "CSS1Compat";
        var x = supportPageOffset
            ? window.pageXOffset
            : isCSS1Compat
                ? doc.documentElement.scrollLeft
                : doc.body.scrollLeft;
        var y = supportPageOffset
            ? window.pageYOffset
            : isCSS1Compat
                ? doc.documentElement.scrollTop
                : doc.body.scrollTop;

        return {
            x: x,
            y: y
        };
    }

    // we provide a function to compute constants instead
    // of accessing window.* as soon as the module needs it
    // so that we do not compute anything if not needed
    function getActions() {
        // Determine the events to bind. IE11 implements pointerEvents without
        // a prefix, which breaks compatibility with the IE10 implementation.
        return window.navigator.pointerEnabled
            ? {
                  start: "pointerdown",
                  move: "pointermove",
                  end: "pointerup"
              }
            : window.navigator.msPointerEnabled
                ? {
                      start: "MSPointerDown",
                      move: "MSPointerMove",
                      end: "MSPointerUp"
                  }
                : {
                      start: "mousedown touchstart",
                      move: "mousemove touchmove",
                      end: "mouseup touchend"
                  };
    }

    // https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md
    // Issue #785
    function getSupportsPassive() {
        var supportsPassive = false;

        /* eslint-disable */
        try {
            var opts = Object.defineProperty({}, "passive", {
                get: function() {
                    supportsPassive = true;
                }
            });

            window.addEventListener("test", null, opts);
        } catch (e) {}
        /* eslint-enable */

        return supportsPassive;
    }

    function getSupportsTouchActionNone() {
        return window.CSS && CSS.supports && CSS.supports("touch-action", "none");
    }

    // Value calculation

    // Determine the size of a sub-range in relation to a full range.
    function subRangeRatio(pa, pb) {
        return 100 / (pb - pa);
    }

    // (percentage) How many percent is this value of this range?
    function fromPercentage(range, value) {
        return (value * 100) / (range[1] - range[0]);
    }

    // (percentage) Where is this value on this range?
    function toPercentage(range, value) {
        return fromPercentage(range, range[0] < 0 ? value + Math.abs(range[0]) : value - range[0]);
    }

    // (value) How much is this percentage on this range?
    function isPercentage(range, value) {
        return (value * (range[1] - range[0])) / 100 + range[0];
    }

    // Range conversion

    function getJ(value, arr) {
        var j = 1;

        while (value >= arr[j]) {
            j += 1;
        }

        return j;
    }

    // (percentage) Input a value, find where, on a scale of 0-100, it applies.
    function toStepping(xVal, xPct, value) {
        if (value >= xVal.slice(-1)[0]) {
            return 100;
        }

        var j = getJ(value, xVal);
        var va = xVal[j - 1];
        var vb = xVal[j];
        var pa = xPct[j - 1];
        var pb = xPct[j];

        return pa + toPercentage([va, vb], value) / subRangeRatio(pa, pb);
    }

    // (value) Input a percentage, find where it is on the specified range.
    function fromStepping(xVal, xPct, value) {
        // There is no range group that fits 100
        if (value >= 100) {
            return xVal.slice(-1)[0];
        }

        var j = getJ(value, xPct);
        var va = xVal[j - 1];
        var vb = xVal[j];
        var pa = xPct[j - 1];
        var pb = xPct[j];

        return isPercentage([va, vb], (value - pa) * subRangeRatio(pa, pb));
    }

    // (percentage) Get the step that applies at a certain value.
    function getStep(xPct, xSteps, snap, value) {
        if (value === 100) {
            return value;
        }

        var j = getJ(value, xPct);
        var a = xPct[j - 1];
        var b = xPct[j];

        // If 'snap' is set, steps are used as fixed points on the slider.
        if (snap) {
            // Find the closest position, a or b.
            if (value - a > (b - a) / 2) {
                return b;
            }

            return a;
        }

        if (!xSteps[j - 1]) {
            return value;
        }

        return xPct[j - 1] + closest(value - xPct[j - 1], xSteps[j - 1]);
    }

    // Entry parsing

    function handleEntryPoint(index, value, that) {
        var percentage;

        // Wrap numerical input in an array.
        if (typeof value === "number") {
            value = [value];
        }

        // Reject any invalid input, by testing whether value is an array.
        if (!Array.isArray(value)) {
            throw new Error("noUiSlider (" + VERSION + "): 'range' contains invalid value.");
        }

        // Covert min/max syntax to 0 and 100.
        if (index === "min") {
            percentage = 0;
        } else if (index === "max") {
            percentage = 100;
        } else {
            percentage = parseFloat(index);
        }

        // Check for correct input.
        if (!isNumeric(percentage) || !isNumeric(value[0])) {
            throw new Error("noUiSlider (" + VERSION + "): 'range' value isn't numeric.");
        }

        // Store values.
        that.xPct.push(percentage);
        that.xVal.push(value[0]);

        // NaN will evaluate to false too, but to keep
        // logging clear, set step explicitly. Make sure
        // not to override the 'step' setting with false.
        if (!percentage) {
            if (!isNaN(value[1])) {
                that.xSteps[0] = value[1];
            }
        } else {
            that.xSteps.push(isNaN(value[1]) ? false : value[1]);
        }

        that.xHighestCompleteStep.push(0);
    }

    function handleStepPoint(i, n, that) {
        // Ignore 'false' stepping.
        if (!n) {
            return true;
        }

        // Factor to range ratio
        that.xSteps[i] =
            fromPercentage([that.xVal[i], that.xVal[i + 1]], n) / subRangeRatio(that.xPct[i], that.xPct[i + 1]);

        var totalSteps = (that.xVal[i + 1] - that.xVal[i]) / that.xNumSteps[i];
        var highestStep = Math.ceil(Number(totalSteps.toFixed(3)) - 1);
        var step = that.xVal[i] + that.xNumSteps[i] * highestStep;

        that.xHighestCompleteStep[i] = step;
    }

    // Interface

    function Spectrum(entry, snap, singleStep) {
        this.xPct = [];
        this.xVal = [];
        this.xSteps = [singleStep || false];
        this.xNumSteps = [false];
        this.xHighestCompleteStep = [];

        this.snap = snap;

        var index;
        var ordered = []; // [0, 'min'], [1, '50%'], [2, 'max']

        // Map the object keys to an array.
        for (index in entry) {
            if (entry.hasOwnProperty(index)) {
                ordered.push([entry[index], index]);
            }
        }

        // Sort all entries by value (numeric sort).
        if (ordered.length && typeof ordered[0][0] === "object") {
            ordered.sort(function(a, b) {
                return a[0][0] - b[0][0];
            });
        } else {
            ordered.sort(function(a, b) {
                return a[0] - b[0];
            });
        }

        // Convert all entries to subranges.
        for (index = 0; index < ordered.length; index++) {
            handleEntryPoint(ordered[index][1], ordered[index][0], this);
        }

        // Store the actual step values.
        // xSteps is sorted in the same order as xPct and xVal.
        this.xNumSteps = this.xSteps.slice(0);

        // Convert all numeric steps to the percentage of the subrange they represent.
        for (index = 0; index < this.xNumSteps.length; index++) {
            handleStepPoint(index, this.xNumSteps[index], this);
        }
    }

    Spectrum.prototype.getMargin = function(value) {
        var step = this.xNumSteps[0];

        if (step && (value / step) % 1 !== 0) {
            throw new Error("noUiSlider (" + VERSION + "): 'limit', 'margin' and 'padding' must be divisible by step.");
        }

        return this.xPct.length === 2 ? fromPercentage(this.xVal, value) : false;
    };

    Spectrum.prototype.toStepping = function(value) {
        value = toStepping(this.xVal, this.xPct, value);

        return value;
    };

    Spectrum.prototype.fromStepping = function(value) {
        return fromStepping(this.xVal, this.xPct, value);
    };

    Spectrum.prototype.getStep = function(value) {
        value = getStep(this.xPct, this.xSteps, this.snap, value);

        return value;
    };

    Spectrum.prototype.getNearbySteps = function(value) {
        var j = getJ(value, this.xPct);

        return {
            stepBefore: {
                startValue: this.xVal[j - 2],
                step: this.xNumSteps[j - 2],
                highestStep: this.xHighestCompleteStep[j - 2]
            },
            thisStep: {
                startValue: this.xVal[j - 1],
                step: this.xNumSteps[j - 1],
                highestStep: this.xHighestCompleteStep[j - 1]
            },
            stepAfter: {
                startValue: this.xVal[j],
                step: this.xNumSteps[j],
                highestStep: this.xHighestCompleteStep[j]
            }
        };
    };

    Spectrum.prototype.countStepDecimals = function() {
        var stepDecimals = this.xNumSteps.map(countDecimals);
        return Math.max.apply(null, stepDecimals);
    };

    // Outside testing
    Spectrum.prototype.convert = function(value) {
        return this.getStep(this.toStepping(value));
    };

    /*	Every input option is tested and parsed. This'll prevent
        endless validation in internal methods. These tests are
        structured with an item for every option available. An
        option can be marked as required by setting the 'r' flag.
        The testing function is provided with three arguments:
            - The provided value for the option;
            - A reference to the options object;
            - The name for the option;

        The testing function returns false when an error is detected,
        or true when everything is OK. It can also modify the option
        object, to make sure all values can be correctly looped elsewhere. */

    var defaultFormatter = {
        to: function(value) {
            return value !== undefined && value.toFixed(2);
        },
        from: Number
    };

    function validateFormat(entry) {
        // Any object with a to and from method is supported.
        if (isValidFormatter(entry)) {
            return true;
        }

        throw new Error("noUiSlider (" + VERSION + "): 'format' requires 'to' and 'from' methods.");
    }

    function testStep(parsed, entry) {
        if (!isNumeric(entry)) {
            throw new Error("noUiSlider (" + VERSION + "): 'step' is not numeric.");
        }

        // The step option can still be used to set stepping
        // for linear sliders. Overwritten if set in 'range'.
        parsed.singleStep = entry;
    }

    function testRange(parsed, entry) {
        // Filter incorrect input.
        if (typeof entry !== "object" || Array.isArray(entry)) {
            throw new Error("noUiSlider (" + VERSION + "): 'range' is not an object.");
        }

        // Catch missing start or end.
        if (entry.min === undefined || entry.max === undefined) {
            throw new Error("noUiSlider (" + VERSION + "): Missing 'min' or 'max' in 'range'.");
        }

        // Catch equal start or end.
        if (entry.min === entry.max) {
            throw new Error("noUiSlider (" + VERSION + "): 'range' 'min' and 'max' cannot be equal.");
        }

        parsed.spectrum = new Spectrum(entry, parsed.snap, parsed.singleStep);
    }

    function testStart(parsed, entry) {
        entry = asArray(entry);

        // Validate input. Values aren't tested, as the public .val method
        // will always provide a valid location.
        if (!Array.isArray(entry) || !entry.length) {
            throw new Error("noUiSlider (" + VERSION + "): 'start' option is incorrect.");
        }

        // Store the number of handles.
        parsed.handles = entry.length;

        // When the slider is initialized, the .val method will
        // be called with the start options.
        parsed.start = entry;
    }

    function testSnap(parsed, entry) {
        // Enforce 100% stepping within subranges.
        parsed.snap = entry;

        if (typeof entry !== "boolean") {
            throw new Error("noUiSlider (" + VERSION + "): 'snap' option must be a boolean.");
        }
    }

    function testAnimate(parsed, entry) {
        // Enforce 100% stepping within subranges.
        parsed.animate = entry;

        if (typeof entry !== "boolean") {
            throw new Error("noUiSlider (" + VERSION + "): 'animate' option must be a boolean.");
        }
    }

    function testAnimationDuration(parsed, entry) {
        parsed.animationDuration = entry;

        if (typeof entry !== "number") {
            throw new Error("noUiSlider (" + VERSION + "): 'animationDuration' option must be a number.");
        }
    }

    function testConnect(parsed, entry) {
        var connect = [false];
        var i;

        // Map legacy options
        if (entry === "lower") {
            entry = [true, false];
        } else if (entry === "upper") {
            entry = [false, true];
        }

        // Handle boolean options
        if (entry === true || entry === false) {
            for (i = 1; i < parsed.handles; i++) {
                connect.push(entry);
            }

            connect.push(false);
        }

        // Reject invalid input
        else if (!Array.isArray(entry) || !entry.length || entry.length !== parsed.handles + 1) {
            throw new Error("noUiSlider (" + VERSION + "): 'connect' option doesn't match handle count.");
        } else {
            connect = entry;
        }

        parsed.connect = connect;
    }

    function testOrientation(parsed, entry) {
        // Set orientation to an a numerical value for easy
        // array selection.
        switch (entry) {
            case "horizontal":
                parsed.ort = 0;
                break;
            case "vertical":
                parsed.ort = 1;
                break;
            default:
                throw new Error("noUiSlider (" + VERSION + "): 'orientation' option is invalid.");
        }
    }

    function testMargin(parsed, entry) {
        if (!isNumeric(entry)) {
            throw new Error("noUiSlider (" + VERSION + "): 'margin' option must be numeric.");
        }

        // Issue #582
        if (entry === 0) {
            return;
        }

        parsed.margin = parsed.spectrum.getMargin(entry);

        if (!parsed.margin) {
            throw new Error("noUiSlider (" + VERSION + "): 'margin' option is only supported on linear sliders.");
        }
    }

    function testLimit(parsed, entry) {
        if (!isNumeric(entry)) {
            throw new Error("noUiSlider (" + VERSION + "): 'limit' option must be numeric.");
        }

        parsed.limit = parsed.spectrum.getMargin(entry);

        if (!parsed.limit || parsed.handles < 2) {
            throw new Error(
                "noUiSlider (" +
                    VERSION +
                    "): 'limit' option is only supported on linear sliders with 2 or more handles."
            );
        }
    }

    function testPadding(parsed, entry) {
        if (!isNumeric(entry) && !Array.isArray(entry)) {
            throw new Error(
                "noUiSlider (" + VERSION + "): 'padding' option must be numeric or array of exactly 2 numbers."
            );
        }

        if (Array.isArray(entry) && !(entry.length === 2 || isNumeric(entry[0]) || isNumeric(entry[1]))) {
            throw new Error(
                "noUiSlider (" + VERSION + "): 'padding' option must be numeric or array of exactly 2 numbers."
            );
        }

        if (entry === 0) {
            return;
        }

        if (!Array.isArray(entry)) {
            entry = [entry, entry];
        }

        // 'getMargin' returns false for invalid values.
        parsed.padding = [parsed.spectrum.getMargin(entry[0]), parsed.spectrum.getMargin(entry[1])];

        if (parsed.padding[0] === false || parsed.padding[1] === false) {
            throw new Error("noUiSlider (" + VERSION + "): 'padding' option is only supported on linear sliders.");
        }

        if (parsed.padding[0] < 0 || parsed.padding[1] < 0) {
            throw new Error("noUiSlider (" + VERSION + "): 'padding' option must be a positive number(s).");
        }

        if (parsed.padding[0] + parsed.padding[1] >= 100) {
            throw new Error("noUiSlider (" + VERSION + "): 'padding' option must not exceed 100% of the range.");
        }
    }

    function testDirection(parsed, entry) {
        // Set direction as a numerical value for easy parsing.
        // Invert connection for RTL sliders, so that the proper
        // handles get the connect/background classes.
        switch (entry) {
            case "ltr":
                parsed.dir = 0;
                break;
            case "rtl":
                parsed.dir = 1;
                break;
            default:
                throw new Error("noUiSlider (" + VERSION + "): 'direction' option was not recognized.");
        }
    }

    function testBehaviour(parsed, entry) {
        // Make sure the input is a string.
        if (typeof entry !== "string") {
            throw new Error("noUiSlider (" + VERSION + "): 'behaviour' must be a string containing options.");
        }

        // Check if the string contains any keywords.
        // None are required.
        var tap = entry.indexOf("tap") >= 0;
        var drag = entry.indexOf("drag") >= 0;
        var fixed = entry.indexOf("fixed") >= 0;
        var snap = entry.indexOf("snap") >= 0;
        var hover = entry.indexOf("hover") >= 0;
        var unconstrained = entry.indexOf("unconstrained") >= 0;

        if (fixed) {
            if (parsed.handles !== 2) {
                throw new Error("noUiSlider (" + VERSION + "): 'fixed' behaviour must be used with 2 handles");
            }

            // Use margin to enforce fixed state
            testMargin(parsed, parsed.start[1] - parsed.start[0]);
        }

        if (unconstrained && (parsed.margin || parsed.limit)) {
            throw new Error(
                "noUiSlider (" + VERSION + "): 'unconstrained' behaviour cannot be used with margin or limit"
            );
        }

        parsed.events = {
            tap: tap || snap,
            drag: drag,
            fixed: fixed,
            snap: snap,
            hover: hover,
            unconstrained: unconstrained
        };
    }

    function testTooltips(parsed, entry) {
        if (entry === false) {
            return;
        }

        if (entry === true) {
            parsed.tooltips = [];

            for (var i = 0; i < parsed.handles; i++) {
                parsed.tooltips.push(true);
            }
        } else {
            parsed.tooltips = asArray(entry);

            if (parsed.tooltips.length !== parsed.handles) {
                throw new Error("noUiSlider (" + VERSION + "): must pass a formatter for all handles.");
            }

            parsed.tooltips.forEach(function(formatter) {
                if (
                    typeof formatter !== "boolean" &&
                    (typeof formatter !== "object" || typeof formatter.to !== "function")
                ) {
                    throw new Error("noUiSlider (" + VERSION + "): 'tooltips' must be passed a formatter or 'false'.");
                }
            });
        }
    }

    function testAriaFormat(parsed, entry) {
        parsed.ariaFormat = entry;
        validateFormat(entry);
    }

    function testFormat(parsed, entry) {
        parsed.format = entry;
        validateFormat(entry);
    }

    function testKeyboardSupport(parsed, entry) {
        parsed.keyboardSupport = entry;

        if (typeof entry !== "boolean") {
            throw new Error("noUiSlider (" + VERSION + "): 'keyboardSupport' option must be a boolean.");
        }
    }

    function testDocumentElement(parsed, entry) {
        // This is an advanced option. Passed values are used without validation.
        parsed.documentElement = entry;
    }

    function testCssPrefix(parsed, entry) {
        if (typeof entry !== "string" && entry !== false) {
            throw new Error("noUiSlider (" + VERSION + "): 'cssPrefix' must be a string or `false`.");
        }

        parsed.cssPrefix = entry;
    }

    function testCssClasses(parsed, entry) {
        if (typeof entry !== "object") {
            throw new Error("noUiSlider (" + VERSION + "): 'cssClasses' must be an object.");
        }

        if (typeof parsed.cssPrefix === "string") {
            parsed.cssClasses = {};

            for (var key in entry) {
                if (!entry.hasOwnProperty(key)) {
                    continue;
                }

                parsed.cssClasses[key] = parsed.cssPrefix + entry[key];
            }
        } else {
            parsed.cssClasses = entry;
        }
    }

    // Test all developer settings and parse to assumption-safe values.
    function testOptions(options) {
        // To prove a fix for #537, freeze options here.
        // If the object is modified, an error will be thrown.
        // Object.freeze(options);

        var parsed = {
            margin: 0,
            limit: 0,
            padding: 0,
            animate: true,
            animationDuration: 300,
            ariaFormat: defaultFormatter,
            format: defaultFormatter
        };

        // Tests are executed in the order they are presented here.
        var tests = {
            step: { r: false, t: testStep },
            start: { r: true, t: testStart },
            connect: { r: true, t: testConnect },
            direction: { r: true, t: testDirection },
            snap: { r: false, t: testSnap },
            animate: { r: false, t: testAnimate },
            animationDuration: { r: false, t: testAnimationDuration },
            range: { r: true, t: testRange },
            orientation: { r: false, t: testOrientation },
            margin: { r: false, t: testMargin },
            limit: { r: false, t: testLimit },
            padding: { r: false, t: testPadding },
            behaviour: { r: true, t: testBehaviour },
            ariaFormat: { r: false, t: testAriaFormat },
            format: { r: false, t: testFormat },
            tooltips: { r: false, t: testTooltips },
            keyboardSupport: { r: true, t: testKeyboardSupport },
            documentElement: { r: false, t: testDocumentElement },
            cssPrefix: { r: true, t: testCssPrefix },
            cssClasses: { r: true, t: testCssClasses }
        };

        var defaults = {
            connect: false,
            direction: "ltr",
            behaviour: "tap",
            orientation: "horizontal",
            keyboardSupport: true,
            cssPrefix: "noUi-",
            cssClasses: {
                target: "target",
                base: "base",
                origin: "origin",
                handle: "handle",
                handleLower: "handle-lower",
                handleUpper: "handle-upper",
                horizontal: "horizontal",
                vertical: "vertical",
                background: "background",
                connect: "connect",
                connects: "connects",
                ltr: "ltr",
                rtl: "rtl",
                draggable: "draggable",
                drag: "state-drag",
                tap: "state-tap",
                active: "active",
                tooltip: "tooltip",
                pips: "pips",
                pipsHorizontal: "pips-horizontal",
                pipsVertical: "pips-vertical",
                marker: "marker",
                markerHorizontal: "marker-horizontal",
                markerVertical: "marker-vertical",
                markerNormal: "marker-normal",
                markerLarge: "marker-large",
                markerSub: "marker-sub",
                value: "value",
                valueHorizontal: "value-horizontal",
                valueVertical: "value-vertical",
                valueNormal: "value-normal",
                valueLarge: "value-large",
                valueSub: "value-sub"
            }
        };

        // AriaFormat defaults to regular format, if any.
        if (options.format && !options.ariaFormat) {
            options.ariaFormat = options.format;
        }

        // Run all options through a testing mechanism to ensure correct
        // input. It should be noted that options might get modified to
        // be handled properly. E.g. wrapping integers in arrays.
        Object.keys(tests).forEach(function(name) {
            // If the option isn't set, but it is required, throw an error.
            if (!isSet(options[name]) && defaults[name] === undefined) {
                if (tests[name].r) {
                    throw new Error("noUiSlider (" + VERSION + "): '" + name + "' is required.");
                }

                return true;
            }

            tests[name].t(parsed, !isSet(options[name]) ? defaults[name] : options[name]);
        });

        // Forward pips options
        parsed.pips = options.pips;

        // All recent browsers accept unprefixed transform.
        // We need -ms- for IE9 and -webkit- for older Android;
        // Assume use of -webkit- if unprefixed and -ms- are not supported.
        // https://caniuse.com/#feat=transforms2d
        var d = document.createElement("div");
        var msPrefix = d.style.msTransform !== undefined;
        var noPrefix = d.style.transform !== undefined;

        parsed.transformRule = noPrefix ? "transform" : msPrefix ? "msTransform" : "webkitTransform";

        // Pips don't move, so we can place them using left/top.
        var styles = [["left", "top"], ["right", "bottom"]];

        parsed.style = styles[parsed.dir][parsed.ort];

        return parsed;
    }

    function scope(target, options, originalOptions) {
        var actions = getActions();
        var supportsTouchActionNone = getSupportsTouchActionNone();
        var supportsPassive = supportsTouchActionNone && getSupportsPassive();

        // All variables local to 'scope' are prefixed with 'scope_'
        var scope_Target = target;
        var scope_Locations = [];
        var scope_Base;
        var scope_Handles;
        var scope_HandleNumbers = [];
        var scope_ActiveHandlesCount = 0;
        var scope_Connects;
        var scope_Spectrum = options.spectrum;
        var scope_Values = [];
        var scope_Events = {};
        var scope_Self;
        var scope_Pips;
        var scope_Document = target.ownerDocument;
        var scope_DocumentElement = options.documentElement || scope_Document.documentElement;
        var scope_Body = scope_Document.body;

        // Pips constants
        var PIPS_NONE = -1;
        var PIPS_NO_VALUE = 0;
        var PIPS_LARGE_VALUE = 1;
        var PIPS_SMALL_VALUE = 2;

        // For horizontal sliders in standard ltr documents,
        // make .noUi-origin overflow to the left so the document doesn't scroll.
        var scope_DirOffset = scope_Document.dir === "rtl" || options.ort === 1 ? 0 : 100;

        // Creates a node, adds it to target, returns the new node.
        function addNodeTo(addTarget, className) {
            var div = scope_Document.createElement("div");

            if (className) {
                addClass(div, className);
            }

            addTarget.appendChild(div);

            return div;
        }

        // Append a origin to the base
        function addOrigin(base, handleNumber) {
            var origin = addNodeTo(base, options.cssClasses.origin);
            var handle = addNodeTo(origin, options.cssClasses.handle);

            handle.setAttribute("data-handle", handleNumber);

            if (options.keyboardSupport) {
                // https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
                // 0 = focusable and reachable
                handle.setAttribute("tabindex", "0");
            }

            handle.setAttribute("role", "slider");
            handle.setAttribute("aria-orientation", options.ort ? "vertical" : "horizontal");

            if (handleNumber === 0) {
                addClass(handle, options.cssClasses.handleLower);
            } else if (handleNumber === options.handles - 1) {
                addClass(handle, options.cssClasses.handleUpper);
            }

            return origin;
        }

        // Insert nodes for connect elements
        function addConnect(base, add) {
            if (!add) {
                return false;
            }

            return addNodeTo(base, options.cssClasses.connect);
        }

        // Add handles to the slider base.
        function addElements(connectOptions, base) {
            var connectBase = addNodeTo(base, options.cssClasses.connects);

            scope_Handles = [];
            scope_Connects = [];

            scope_Connects.push(addConnect(connectBase, connectOptions[0]));

            // [::::O====O====O====]
            // connectOptions = [0, 1, 1, 1]

            for (var i = 0; i < options.handles; i++) {
                // Keep a list of all added handles.
                scope_Handles.push(addOrigin(base, i));
                scope_HandleNumbers[i] = i;
                scope_Connects.push(addConnect(connectBase, connectOptions[i + 1]));
            }
        }

        // Initialize a single slider.
        function addSlider(addTarget) {
            // Apply classes and data to the target.
            addClass(addTarget, options.cssClasses.target);

            if (options.dir === 0) {
                addClass(addTarget, options.cssClasses.ltr);
            } else {
                addClass(addTarget, options.cssClasses.rtl);
            }

            if (options.ort === 0) {
                addClass(addTarget, options.cssClasses.horizontal);
            } else {
                addClass(addTarget, options.cssClasses.vertical);
            }

            return addNodeTo(addTarget, options.cssClasses.base);
        }

        function addTooltip(handle, handleNumber) {
            if (!options.tooltips[handleNumber]) {
                return false;
            }

            return addNodeTo(handle.firstChild, options.cssClasses.tooltip);
        }

        // The tooltips option is a shorthand for using the 'update' event.
        function tooltips() {
            // Tooltips are added with options.tooltips in original order.
            var tips = scope_Handles.map(addTooltip);

            bindEvent("update", function(values, handleNumber, unencoded) {
                if (!tips[handleNumber]) {
                    return;
                }

                var formattedValue = values[handleNumber];

                if (options.tooltips[handleNumber] !== true) {
                    formattedValue = options.tooltips[handleNumber].to(unencoded[handleNumber]);
                }

                tips[handleNumber].innerHTML = formattedValue;
            });
        }

        function aria() {
            bindEvent("update", function(values, handleNumber, unencoded, tap, positions) {
                // Update Aria Values for all handles, as a change in one changes min and max values for the next.
                scope_HandleNumbers.forEach(function(index) {
                    var handle = scope_Handles[index];

                    var min = checkHandlePosition(scope_Locations, index, 0, true, true, true);
                    var max = checkHandlePosition(scope_Locations, index, 100, true, true, true);

                    var now = positions[index];

                    // Formatted value for display
                    var text = options.ariaFormat.to(unencoded[index]);

                    // Map to slider range values
                    min = scope_Spectrum.fromStepping(min).toFixed(1);
                    max = scope_Spectrum.fromStepping(max).toFixed(1);
                    now = scope_Spectrum.fromStepping(now).toFixed(1);

                    handle.children[0].setAttribute("aria-valuemin", min);
                    handle.children[0].setAttribute("aria-valuemax", max);
                    handle.children[0].setAttribute("aria-valuenow", now);
                    handle.children[0].setAttribute("aria-valuetext", text);
                });
            });
        }

        function getGroup(mode, values, stepped) {
            // Use the range.
            if (mode === "range" || mode === "steps") {
                return scope_Spectrum.xVal;
            }

            if (mode === "count") {
                if (values < 2) {
                    throw new Error("noUiSlider (" + VERSION + "): 'values' (>= 2) required for mode 'count'.");
                }

                // Divide 0 - 100 in 'count' parts.
                var interval = values - 1;
                var spread = 100 / interval;

                values = [];

                // List these parts and have them handled as 'positions'.
                while (interval--) {
                    values[interval] = interval * spread;
                }

                values.push(100);

                mode = "positions";
            }

            if (mode === "positions") {
                // Map all percentages to on-range values.
                return values.map(function(value) {
                    return scope_Spectrum.fromStepping(stepped ? scope_Spectrum.getStep(value) : value);
                });
            }

            if (mode === "values") {
                // If the value must be stepped, it needs to be converted to a percentage first.
                if (stepped) {
                    return values.map(function(value) {
                        // Convert to percentage, apply step, return to value.
                        return scope_Spectrum.fromStepping(scope_Spectrum.getStep(scope_Spectrum.toStepping(value)));
                    });
                }

                // Otherwise, we can simply use the values.
                return values;
            }
        }

        function generateSpread(density, mode, group) {
            function safeIncrement(value, increment) {
                // Avoid floating point variance by dropping the smallest decimal places.
                return (value + increment).toFixed(7) / 1;
            }

            var indexes = {};
            var firstInRange = scope_Spectrum.xVal[0];
            var lastInRange = scope_Spectrum.xVal[scope_Spectrum.xVal.length - 1];
            var ignoreFirst = false;
            var ignoreLast = false;
            var prevPct = 0;

            // Create a copy of the group, sort it and filter away all duplicates.
            group = unique(
                group.slice().sort(function(a, b) {
                    return a - b;
                })
            );

            // Make sure the range starts with the first element.
            if (group[0] !== firstInRange) {
                group.unshift(firstInRange);
                ignoreFirst = true;
            }

            // Likewise for the last one.
            if (group[group.length - 1] !== lastInRange) {
                group.push(lastInRange);
                ignoreLast = true;
            }

            group.forEach(function(current, index) {
                // Get the current step and the lower + upper positions.
                var step;
                var i;
                var q;
                var low = current;
                var high = group[index + 1];
                var newPct;
                var pctDifference;
                var pctPos;
                var type;
                var steps;
                var realSteps;
                var stepSize;
                var isSteps = mode === "steps";

                // When using 'steps' mode, use the provided steps.
                // Otherwise, we'll step on to the next subrange.
                if (isSteps) {
                    step = scope_Spectrum.xNumSteps[index];
                }

                // Default to a 'full' step.
                if (!step) {
                    step = high - low;
                }

                // Low can be 0, so test for false. If high is undefined,
                // we are at the last subrange. Index 0 is already handled.
                if (low === false || high === undefined) {
                    return;
                }

                // Make sure step isn't 0, which would cause an infinite loop (#654)
                step = Math.max(step, 0.0000001);

                // Find all steps in the subrange.
                for (i = low; i <= high; i = safeIncrement(i, step)) {
                    // Get the percentage value for the current step,
                    // calculate the size for the subrange.
                    newPct = scope_Spectrum.toStepping(i);
                    pctDifference = newPct - prevPct;

                    steps = pctDifference / density;
                    realSteps = Math.round(steps);

                    // This ratio represents the amount of percentage-space a point indicates.
                    // For a density 1 the points/percentage = 1. For density 2, that percentage needs to be re-divided.
                    // Round the percentage offset to an even number, then divide by two
                    // to spread the offset on both sides of the range.
                    stepSize = pctDifference / realSteps;

                    // Divide all points evenly, adding the correct number to this subrange.
                    // Run up to <= so that 100% gets a point, event if ignoreLast is set.
                    for (q = 1; q <= realSteps; q += 1) {
                        // The ratio between the rounded value and the actual size might be ~1% off.
                        // Correct the percentage offset by the number of points
                        // per subrange. density = 1 will result in 100 points on the
                        // full range, 2 for 50, 4 for 25, etc.
                        pctPos = prevPct + q * stepSize;
                        indexes[pctPos.toFixed(5)] = [scope_Spectrum.fromStepping(pctPos), 0];
                    }

                    // Determine the point type.
                    type = group.indexOf(i) > -1 ? PIPS_LARGE_VALUE : isSteps ? PIPS_SMALL_VALUE : PIPS_NO_VALUE;

                    // Enforce the 'ignoreFirst' option by overwriting the type for 0.
                    if (!index && ignoreFirst) {
                        type = 0;
                    }

                    if (!(i === high && ignoreLast)) {
                        // Mark the 'type' of this point. 0 = plain, 1 = real value, 2 = step value.
                        indexes[newPct.toFixed(5)] = [i, type];
                    }

                    // Update the percentage count.
                    prevPct = newPct;
                }
            });

            return indexes;
        }

        function addMarking(spread, filterFunc, formatter) {
            var element = scope_Document.createElement("div");

            var valueSizeClasses = [];
            valueSizeClasses[PIPS_NO_VALUE] = options.cssClasses.valueNormal;
            valueSizeClasses[PIPS_LARGE_VALUE] = options.cssClasses.valueLarge;
            valueSizeClasses[PIPS_SMALL_VALUE] = options.cssClasses.valueSub;

            var markerSizeClasses = [];
            markerSizeClasses[PIPS_NO_VALUE] = options.cssClasses.markerNormal;
            markerSizeClasses[PIPS_LARGE_VALUE] = options.cssClasses.markerLarge;
            markerSizeClasses[PIPS_SMALL_VALUE] = options.cssClasses.markerSub;

            var valueOrientationClasses = [options.cssClasses.valueHorizontal, options.cssClasses.valueVertical];
            var markerOrientationClasses = [options.cssClasses.markerHorizontal, options.cssClasses.markerVertical];

            addClass(element, options.cssClasses.pips);
            addClass(element, options.ort === 0 ? options.cssClasses.pipsHorizontal : options.cssClasses.pipsVertical);

            function getClasses(type, source) {
                var a = source === options.cssClasses.value;
                var orientationClasses = a ? valueOrientationClasses : markerOrientationClasses;
                var sizeClasses = a ? valueSizeClasses : markerSizeClasses;

                return source + " " + orientationClasses[options.ort] + " " + sizeClasses[type];
            }

            function addSpread(offset, value, type) {
                // Apply the filter function, if it is set.
                type = filterFunc ? filterFunc(value, type) : type;

                if (type === PIPS_NONE) {
                    return;
                }

                // Add a marker for every point
                var node = addNodeTo(element, false);
                node.className = getClasses(type, options.cssClasses.marker);
                node.style[options.style] = offset + "%";

                // Values are only appended for points marked '1' or '2'.
                if (type > PIPS_NO_VALUE) {
                    node = addNodeTo(element, false);
                    node.className = getClasses(type, options.cssClasses.value);
                    node.setAttribute("data-value", value);
                    node.style[options.style] = offset + "%";
                    node.innerHTML = formatter.to(value);
                }
            }

            // Append all points.
            Object.keys(spread).forEach(function(offset) {
                addSpread(offset, spread[offset][0], spread[offset][1]);
            });

            return element;
        }

        function removePips() {
            if (scope_Pips) {
                removeElement(scope_Pips);
                scope_Pips = null;
            }
        }

        function pips(grid) {
            // Fix #669
            removePips();

            var mode = grid.mode;
            var density = grid.density || 1;
            var filter = grid.filter || false;
            var values = grid.values || false;
            var stepped = grid.stepped || false;
            var group = getGroup(mode, values, stepped);
            var spread = generateSpread(density, mode, group);
            var format = grid.format || {
                to: Math.round
            };

            scope_Pips = scope_Target.appendChild(addMarking(spread, filter, format));

            return scope_Pips;
        }

        // Shorthand for base dimensions.
        function baseSize() {
            var rect = scope_Base.getBoundingClientRect();
            var alt = "offset" + ["Width", "Height"][options.ort];
            return options.ort === 0 ? rect.width || scope_Base[alt] : rect.height || scope_Base[alt];
        }

        // Handler for attaching events trough a proxy.
        function attachEvent(events, element, callback, data) {
            // This function can be used to 'filter' events to the slider.
            // element is a node, not a nodeList

            var method = function(e) {
                e = fixEvent(e, data.pageOffset, data.target || element);

                // fixEvent returns false if this event has a different target
                // when handling (multi-) touch events;
                if (!e) {
                    return false;
                }

                // doNotReject is passed by all end events to make sure released touches
                // are not rejected, leaving the slider "stuck" to the cursor;
                if (scope_Target.hasAttribute("disabled") && !data.doNotReject) {
                    return false;
                }

                // Stop if an active 'tap' transition is taking place.
                if (hasClass(scope_Target, options.cssClasses.tap) && !data.doNotReject) {
                    return false;
                }

                // Ignore right or middle clicks on start #454
                if (events === actions.start && e.buttons !== undefined && e.buttons > 1) {
                    return false;
                }

                // Ignore right or middle clicks on start #454
                if (data.hover && e.buttons) {
                    return false;
                }

                // 'supportsPassive' is only true if a browser also supports touch-action: none in CSS.
                // iOS safari does not, so it doesn't get to benefit from passive scrolling. iOS does support
                // touch-action: manipulation, but that allows panning, which breaks
                // sliders after zooming/on non-responsive pages.
                // See: https://bugs.webkit.org/show_bug.cgi?id=133112
                if (!supportsPassive) {
                    e.preventDefault();
                }

                e.calcPoint = e.points[options.ort];

                // Call the event handler with the event [ and additional data ].
                callback(e, data);
            };

            var methods = [];

            // Bind a closure on the target for every event type.
            events.split(" ").forEach(function(eventName) {
                element.addEventListener(eventName, method, supportsPassive ? { passive: true } : false);
                methods.push([eventName, method]);
            });

            return methods;
        }

        // Provide a clean event with standardized offset values.
        function fixEvent(e, pageOffset, eventTarget) {
            // Filter the event to register the type, which can be
            // touch, mouse or pointer. Offset changes need to be
            // made on an event specific basis.
            var touch = e.type.indexOf("touch") === 0;
            var mouse = e.type.indexOf("mouse") === 0;
            var pointer = e.type.indexOf("pointer") === 0;

            var x;
            var y;

            // IE10 implemented pointer events with a prefix;
            if (e.type.indexOf("MSPointer") === 0) {
                pointer = true;
            }

            // The only thing one handle should be concerned about is the touches that originated on top of it.
            if (touch) {
                // Returns true if a touch originated on the target.
                var isTouchOnTarget = function(checkTouch) {
                    return checkTouch.target === eventTarget || eventTarget.contains(checkTouch.target);
                };

                // In the case of touchstart events, we need to make sure there is still no more than one
                // touch on the target so we look amongst all touches.
                if (e.type === "touchstart") {
                    var targetTouches = Array.prototype.filter.call(e.touches, isTouchOnTarget);

                    // Do not support more than one touch per handle.
                    if (targetTouches.length > 1) {
                        return false;
                    }

                    x = targetTouches[0].pageX;
                    y = targetTouches[0].pageY;
                } else {
                    // In the other cases, find on changedTouches is enough.
                    var targetTouch = Array.prototype.find.call(e.changedTouches, isTouchOnTarget);

                    // Cancel if the target touch has not moved.
                    if (!targetTouch) {
                        return false;
                    }

                    x = targetTouch.pageX;
                    y = targetTouch.pageY;
                }
            }

            pageOffset = pageOffset || getPageOffset(scope_Document);

            if (mouse || pointer) {
                x = e.clientX + pageOffset.x;
                y = e.clientY + pageOffset.y;
            }

            e.pageOffset = pageOffset;
            e.points = [x, y];
            e.cursor = mouse || pointer; // Fix #435

            return e;
        }

        // Translate a coordinate in the document to a percentage on the slider
        function calcPointToPercentage(calcPoint) {
            var location = calcPoint - offset(scope_Base, options.ort);
            var proposal = (location * 100) / baseSize();

            // Clamp proposal between 0% and 100%
            // Out-of-bound coordinates may occur when .noUi-base pseudo-elements
            // are used (e.g. contained handles feature)
            proposal = limit(proposal);

            return options.dir ? 100 - proposal : proposal;
        }

        // Find handle closest to a certain percentage on the slider
        function getClosestHandle(proposal) {
            var closest = 100;
            var handleNumber = false;

            scope_Handles.forEach(function(handle, index) {
                // Disabled handles are ignored
                if (handle.hasAttribute("disabled")) {
                    return;
                }

                var pos = Math.abs(scope_Locations[index] - proposal);

                if (pos < closest || (pos === 100 && closest === 100)) {
                    handleNumber = index;
                    closest = pos;
                }
            });

            return handleNumber;
        }

        // Fire 'end' when a mouse or pen leaves the document.
        function documentLeave(event, data) {
            if (event.type === "mouseout" && event.target.nodeName === "HTML" && event.relatedTarget === null) {
                eventEnd(event, data);
            }
        }

        // Handle movement on document for handle and range drag.
        function eventMove(event, data) {
            // Fix #498
            // Check value of .buttons in 'start' to work around a bug in IE10 mobile (data.buttonsProperty).
            // https://connect.microsoft.com/IE/feedback/details/927005/mobile-ie10-windows-phone-buttons-property-of-pointermove-event-always-zero
            // IE9 has .buttons and .which zero on mousemove.
            // Firefox breaks the spec MDN defines.
            if (navigator.appVersion.indexOf("MSIE 9") === -1 && event.buttons === 0 && data.buttonsProperty !== 0) {
                return eventEnd(event, data);
            }

            // Check if we are moving up or down
            var movement = (options.dir ? -1 : 1) * (event.calcPoint - data.startCalcPoint);

            // Convert the movement into a percentage of the slider width/height
            var proposal = (movement * 100) / data.baseSize;

            moveHandles(movement > 0, proposal, data.locations, data.handleNumbers);
        }

        // Unbind move events on document, call callbacks.
        function eventEnd(event, data) {
            // The handle is no longer active, so remove the class.
            if (data.handle) {
                removeClass(data.handle, options.cssClasses.active);
                scope_ActiveHandlesCount -= 1;
            }

            // Unbind the move and end events, which are added on 'start'.
            data.listeners.forEach(function(c) {
                scope_DocumentElement.removeEventListener(c[0], c[1]);
            });

            if (scope_ActiveHandlesCount === 0) {
                // Remove dragging class.
                removeClass(scope_Target, options.cssClasses.drag);
                setZindex();

                // Remove cursor styles and text-selection events bound to the body.
                if (event.cursor) {
                    scope_Body.style.cursor = "";
                    scope_Body.removeEventListener("selectstart", preventDefault);
                }
            }

            data.handleNumbers.forEach(function(handleNumber) {
                fireEvent("change", handleNumber);
                fireEvent("set", handleNumber);
                fireEvent("end", handleNumber);
            });
        }

        // Bind move events on document.
        function eventStart(event, data) {
            var handle;
            if (data.handleNumbers.length === 1) {
                var handleOrigin = scope_Handles[data.handleNumbers[0]];

                // Ignore 'disabled' handles
                if (handleOrigin.hasAttribute("disabled")) {
                    return false;
                }

                handle = handleOrigin.children[0];
                scope_ActiveHandlesCount += 1;

                // Mark the handle as 'active' so it can be styled.
                addClass(handle, options.cssClasses.active);
            }

            // A drag should never propagate up to the 'tap' event.
            event.stopPropagation();

            // Record the event listeners.
            var listeners = [];

            // Attach the move and end events.
            var moveEvent = attachEvent(actions.move, scope_DocumentElement, eventMove, {
                // The event target has changed so we need to propagate the original one so that we keep
                // relying on it to extract target touches.
                target: event.target,
                handle: handle,
                listeners: listeners,
                startCalcPoint: event.calcPoint,
                baseSize: baseSize(),
                pageOffset: event.pageOffset,
                handleNumbers: data.handleNumbers,
                buttonsProperty: event.buttons,
                locations: scope_Locations.slice()
            });

            var endEvent = attachEvent(actions.end, scope_DocumentElement, eventEnd, {
                target: event.target,
                handle: handle,
                listeners: listeners,
                doNotReject: true,
                handleNumbers: data.handleNumbers
            });

            var outEvent = attachEvent("mouseout", scope_DocumentElement, documentLeave, {
                target: event.target,
                handle: handle,
                listeners: listeners,
                doNotReject: true,
                handleNumbers: data.handleNumbers
            });

            // We want to make sure we pushed the listeners in the listener list rather than creating
            // a new one as it has already been passed to the event handlers.
            listeners.push.apply(listeners, moveEvent.concat(endEvent, outEvent));

            // Text selection isn't an issue on touch devices,
            // so adding cursor styles can be skipped.
            if (event.cursor) {
                // Prevent the 'I' cursor and extend the range-drag cursor.
                scope_Body.style.cursor = getComputedStyle(event.target).cursor;

                // Mark the target with a dragging state.
                if (scope_Handles.length > 1) {
                    addClass(scope_Target, options.cssClasses.drag);
                }

                // Prevent text selection when dragging the handles.
                // In noUiSlider <= 9.2.0, this was handled by calling preventDefault on mouse/touch start/move,
                // which is scroll blocking. The selectstart event is supported by FireFox starting from version 52,
                // meaning the only holdout is iOS Safari. This doesn't matter: text selection isn't triggered there.
                // The 'cursor' flag is false.
                // See: http://caniuse.com/#search=selectstart
                scope_Body.addEventListener("selectstart", preventDefault, false);
            }

            data.handleNumbers.forEach(function(handleNumber) {
                fireEvent("start", handleNumber);
            });
        }

        // Move closest handle to tapped location.
        function eventTap(event) {
            // The tap event shouldn't propagate up
            event.stopPropagation();

            var proposal = calcPointToPercentage(event.calcPoint);
            var handleNumber = getClosestHandle(proposal);

            // Tackle the case that all handles are 'disabled'.
            if (handleNumber === false) {
                return false;
            }

            // Flag the slider as it is now in a transitional state.
            // Transition takes a configurable amount of ms (default 300). Re-enable the slider after that.
            if (!options.events.snap) {
                addClassFor(scope_Target, options.cssClasses.tap, options.animationDuration);
            }

            setHandle(handleNumber, proposal, true, true);

            setZindex();

            fireEvent("slide", handleNumber, true);
            fireEvent("update", handleNumber, true);
            fireEvent("change", handleNumber, true);
            fireEvent("set", handleNumber, true);

            if (options.events.snap) {
                eventStart(event, { handleNumbers: [handleNumber] });
            }
        }

        // Fires a 'hover' event for a hovered mouse/pen position.
        function eventHover(event) {
            var proposal = calcPointToPercentage(event.calcPoint);

            var to = scope_Spectrum.getStep(proposal);
            var value = scope_Spectrum.fromStepping(to);

            Object.keys(scope_Events).forEach(function(targetEvent) {
                if ("hover" === targetEvent.split(".")[0]) {
                    scope_Events[targetEvent].forEach(function(callback) {
                        callback.call(scope_Self, value);
                    });
                }
            });
        }

        // Attach events to several slider parts.
        function bindSliderEvents(behaviour) {
            // Attach the standard drag event to the handles.
            if (!behaviour.fixed) {
                scope_Handles.forEach(function(handle, index) {
                    // These events are only bound to the visual handle
                    // element, not the 'real' origin element.
                    attachEvent(actions.start, handle.children[0], eventStart, {
                        handleNumbers: [index]
                    });
                });
            }

            // Attach the tap event to the slider base.
            if (behaviour.tap) {
                attachEvent(actions.start, scope_Base, eventTap, {});
            }

            // Fire hover events
            if (behaviour.hover) {
                attachEvent(actions.move, scope_Base, eventHover, {
                    hover: true
                });
            }

            // Make the range draggable.
            if (behaviour.drag) {
                scope_Connects.forEach(function(connect, index) {
                    if (connect === false || index === 0 || index === scope_Connects.length - 1) {
                        return;
                    }

                    var handleBefore = scope_Handles[index - 1];
                    var handleAfter = scope_Handles[index];
                    var eventHolders = [connect];

                    addClass(connect, options.cssClasses.draggable);

                    // When the range is fixed, the entire range can
                    // be dragged by the handles. The handle in the first
                    // origin will propagate the start event upward,
                    // but it needs to be bound manually on the other.
                    if (behaviour.fixed) {
                        eventHolders.push(handleBefore.children[0]);
                        eventHolders.push(handleAfter.children[0]);
                    }

                    eventHolders.forEach(function(eventHolder) {
                        attachEvent(actions.start, eventHolder, eventStart, {
                            handles: [handleBefore, handleAfter],
                            handleNumbers: [index - 1, index]
                        });
                    });
                });
            }
        }

        // Attach an event to this slider, possibly including a namespace
        function bindEvent(namespacedEvent, callback) {
            scope_Events[namespacedEvent] = scope_Events[namespacedEvent] || [];
            scope_Events[namespacedEvent].push(callback);

            // If the event bound is 'update,' fire it immediately for all handles.
            if (namespacedEvent.split(".")[0] === "update") {
                scope_Handles.forEach(function(a, index) {
                    fireEvent("update", index);
                });
            }
        }

        // Undo attachment of event
        function removeEvent(namespacedEvent) {
            var event = namespacedEvent && namespacedEvent.split(".")[0];
            var namespace = event && namespacedEvent.substring(event.length);

            Object.keys(scope_Events).forEach(function(bind) {
                var tEvent = bind.split(".")[0];
                var tNamespace = bind.substring(tEvent.length);

                if ((!event || event === tEvent) && (!namespace || namespace === tNamespace)) {
                    delete scope_Events[bind];
                }
            });
        }

        // External event handling
        function fireEvent(eventName, handleNumber, tap) {
            Object.keys(scope_Events).forEach(function(targetEvent) {
                var eventType = targetEvent.split(".")[0];

                if (eventName === eventType) {
                    scope_Events[targetEvent].forEach(function(callback) {
                        callback.call(
                            // Use the slider public API as the scope ('this')
                            scope_Self,
                            // Return values as array, so arg_1[arg_2] is always valid.
                            scope_Values.map(options.format.to),
                            // Handle index, 0 or 1
                            handleNumber,
                            // Un-formatted slider values
                            scope_Values.slice(),
                            // Event is fired by tap, true or false
                            tap || false,
                            // Left offset of the handle, in relation to the slider
                            scope_Locations.slice()
                        );
                    });
                }
            });
        }

        function toPct(pct) {
            return pct + "%";
        }

        // Split out the handle positioning logic so the Move event can use it, too
        function checkHandlePosition(reference, handleNumber, to, lookBackward, lookForward, getValue) {
            // For sliders with multiple handles, limit movement to the other handle.
            // Apply the margin option by adding it to the handle positions.
            if (scope_Handles.length > 1 && !options.events.unconstrained) {
                if (lookBackward && handleNumber > 0) {
                    to = Math.max(to, reference[handleNumber - 1] + options.margin);
                }

                if (lookForward && handleNumber < scope_Handles.length - 1) {
                    to = Math.min(to, reference[handleNumber + 1] - options.margin);
                }
            }

            // The limit option has the opposite effect, limiting handles to a
            // maximum distance from another. Limit must be > 0, as otherwise
            // handles would be unmovable.
            if (scope_Handles.length > 1 && options.limit) {
                if (lookBackward && handleNumber > 0) {
                    to = Math.min(to, reference[handleNumber - 1] + options.limit);
                }

                if (lookForward && handleNumber < scope_Handles.length - 1) {
                    to = Math.max(to, reference[handleNumber + 1] - options.limit);
                }
            }

            // The padding option keeps the handles a certain distance from the
            // edges of the slider. Padding must be > 0.
            if (options.padding) {
                if (handleNumber === 0) {
                    to = Math.max(to, options.padding[0]);
                }

                if (handleNumber === scope_Handles.length - 1) {
                    to = Math.min(to, 100 - options.padding[1]);
                }
            }

            to = scope_Spectrum.getStep(to);

            // Limit percentage to the 0 - 100 range
            to = limit(to);

            // Return false if handle can't move
            if (to === reference[handleNumber] && !getValue) {
                return false;
            }

            return to;
        }

        // Uses slider orientation to create CSS rules. a = base value;
        function inRuleOrder(v, a) {
            var o = options.ort;
            return (o ? a : v) + ", " + (o ? v : a);
        }

        // Moves handle(s) by a percentage
        // (bool, % to move, [% where handle started, ...], [index in scope_Handles, ...])
        function moveHandles(upward, proposal, locations, handleNumbers) {
            var proposals = locations.slice();

            var b = [!upward, upward];
            var f = [upward, !upward];

            // Copy handleNumbers so we don't change the dataset
            handleNumbers = handleNumbers.slice();

            // Check to see which handle is 'leading'.
            // If that one can't move the second can't either.
            if (upward) {
                handleNumbers.reverse();
            }

            // Step 1: get the maximum percentage that any of the handles can move
            if (handleNumbers.length > 1) {
                handleNumbers.forEach(function(handleNumber, o) {
                    var to = checkHandlePosition(
                        proposals,
                        handleNumber,
                        proposals[handleNumber] + proposal,
                        b[o],
                        f[o],
                        false
                    );

                    // Stop if one of the handles can't move.
                    if (to === false) {
                        proposal = 0;
                    } else {
                        proposal = to - proposals[handleNumber];
                        proposals[handleNumber] = to;
                    }
                });
            }

            // If using one handle, check backward AND forward
            else {
                b = f = [true];
            }

            var state = false;

            // Step 2: Try to set the handles with the found percentage
            handleNumbers.forEach(function(handleNumber, o) {
                state = setHandle(handleNumber, locations[handleNumber] + proposal, b[o], f[o]) || state;
            });

            // Step 3: If a handle moved, fire events
            if (state) {
                handleNumbers.forEach(function(handleNumber) {
                    fireEvent("update", handleNumber);
                    fireEvent("slide", handleNumber);
                });
            }
        }

        // Takes a base value and an offset. This offset is used for the connect bar size.
        // In the initial design for this feature, the origin element was 1% wide.
        // Unfortunately, a rounding bug in Chrome makes it impossible to implement this feature
        // in this manner: https://bugs.chromium.org/p/chromium/issues/detail?id=798223
        function transformDirection(a, b) {
            return options.dir ? 100 - a - b : a;
        }

        // Updates scope_Locations and scope_Values, updates visual state
        function updateHandlePosition(handleNumber, to) {
            // Update locations.
            scope_Locations[handleNumber] = to;

            // Convert the value to the slider stepping/range.
            scope_Values[handleNumber] = scope_Spectrum.fromStepping(to);

            var rule = "translate(" + inRuleOrder(toPct(transformDirection(to, 0) - scope_DirOffset), "0") + ")";
            scope_Handles[handleNumber].style[options.transformRule] = rule;

            updateConnect(handleNumber);
            updateConnect(handleNumber + 1);
        }

        // Handles before the slider middle are stacked later = higher,
        // Handles after the middle later is lower
        // [[7] [8] .......... | .......... [5] [4]
        function setZindex() {
            scope_HandleNumbers.forEach(function(handleNumber) {
                var dir = scope_Locations[handleNumber] > 50 ? -1 : 1;
                var zIndex = 3 + (scope_Handles.length + dir * handleNumber);
                scope_Handles[handleNumber].style.zIndex = zIndex;
            });
        }

        // Test suggested values and apply margin, step.
        function setHandle(handleNumber, to, lookBackward, lookForward) {
            to = checkHandlePosition(scope_Locations, handleNumber, to, lookBackward, lookForward, false);

            if (to === false) {
                return false;
            }

            updateHandlePosition(handleNumber, to);

            return true;
        }

        // Updates style attribute for connect nodes
        function updateConnect(index) {
            // Skip connects set to false
            if (!scope_Connects[index]) {
                return;
            }

            var l = 0;
            var h = 100;

            if (index !== 0) {
                l = scope_Locations[index - 1];
            }

            if (index !== scope_Connects.length - 1) {
                h = scope_Locations[index];
            }

            // We use two rules:
            // 'translate' to change the left/top offset;
            // 'scale' to change the width of the element;
            // As the element has a width of 100%, a translation of 100% is equal to 100% of the parent (.noUi-base)
            var connectWidth = h - l;
            var translateRule = "translate(" + inRuleOrder(toPct(transformDirection(l, connectWidth)), "0") + ")";
            var scaleRule = "scale(" + inRuleOrder(connectWidth / 100, "1") + ")";

            scope_Connects[index].style[options.transformRule] = translateRule + " " + scaleRule;
        }

        // Parses value passed to .set method. Returns current value if not parse-able.
        function resolveToValue(to, handleNumber) {
            // Setting with null indicates an 'ignore'.
            // Inputting 'false' is invalid.
            if (to === null || to === false || to === undefined) {
                return scope_Locations[handleNumber];
            }

            // If a formatted number was passed, attempt to decode it.
            if (typeof to === "number") {
                to = String(to);
            }

            to = options.format.from(to);
            to = scope_Spectrum.toStepping(to);

            // If parsing the number failed, use the current value.
            if (to === false || isNaN(to)) {
                return scope_Locations[handleNumber];
            }

            return to;
        }

        // Set the slider value.
        function valueSet(input, fireSetEvent) {
            var values = asArray(input);
            var isInit = scope_Locations[0] === undefined;

            // Event fires by default
            fireSetEvent = fireSetEvent === undefined ? true : !!fireSetEvent;

            // Animation is optional.
            // Make sure the initial values were set before using animated placement.
            if (options.animate && !isInit) {
                addClassFor(scope_Target, options.cssClasses.tap, options.animationDuration);
            }

            // First pass, without lookAhead but with lookBackward. Values are set from left to right.
            scope_HandleNumbers.forEach(function(handleNumber) {
                setHandle(handleNumber, resolveToValue(values[handleNumber], handleNumber), true, false);
            });

            // Second pass. Now that all base values are set, apply constraints
            scope_HandleNumbers.forEach(function(handleNumber) {
                setHandle(handleNumber, scope_Locations[handleNumber], true, true);
            });

            setZindex();

            scope_HandleNumbers.forEach(function(handleNumber) {
                fireEvent("update", handleNumber);

                // Fire the event only for handles that received a new value, as per #579
                if (values[handleNumber] !== null && fireSetEvent) {
                    fireEvent("set", handleNumber);
                }
            });
        }

        // Reset slider to initial values
        function valueReset(fireSetEvent) {
            valueSet(options.start, fireSetEvent);
        }

        // Set value for a single handle
        function valueSetHandle(handleNumber, value, fireSetEvent) {
            var values = [];

            // Ensure numeric input
            handleNumber = Number(handleNumber);

            if (!(handleNumber >= 0 && handleNumber < scope_HandleNumbers.length)) {
                throw new Error("noUiSlider (" + VERSION + "): invalid handle number, got: " + handleNumber);
            }

            for (var i = 0; i < scope_HandleNumbers.length; i++) {
                values[i] = null;
            }

            values[handleNumber] = value;

            valueSet(values, fireSetEvent);
        }

        // Get the slider value.
        function valueGet() {
            var values = scope_Values.map(options.format.to);

            // If only one handle is used, return a single value.
            if (values.length === 1) {
                return values[0];
            }

            return values;
        }

        // Removes classes from the root and empties it.
        function destroy() {
            for (var key in options.cssClasses) {
                if (!options.cssClasses.hasOwnProperty(key)) {
                    continue;
                }
                removeClass(scope_Target, options.cssClasses[key]);
            }

            while (scope_Target.firstChild) {
                scope_Target.removeChild(scope_Target.firstChild);
            }

            delete scope_Target.noUiSlider;
        }

        // Get the current step size for the slider.
        function getCurrentStep() {
            // Check all locations, map them to their stepping point.
            // Get the step point, then find it in the input list.
            return scope_Locations.map(function(location, index) {
                var nearbySteps = scope_Spectrum.getNearbySteps(location);
                var value = scope_Values[index];
                var increment = nearbySteps.thisStep.step;
                var decrement = null;

                // If the next value in this step moves into the next step,
                // the increment is the start of the next step - the current value
                if (increment !== false) {
                    if (value + increment > nearbySteps.stepAfter.startValue) {
                        increment = nearbySteps.stepAfter.startValue - value;
                    }
                }

                // If the value is beyond the starting point
                if (value > nearbySteps.thisStep.startValue) {
                    decrement = nearbySteps.thisStep.step;
                } else if (nearbySteps.stepBefore.step === false) {
                    decrement = false;
                }

                // If a handle is at the start of a step, it always steps back into the previous step first
                else {
                    decrement = value - nearbySteps.stepBefore.highestStep;
                }

                // Now, if at the slider edges, there is not in/decrement
                if (location === 100) {
                    increment = null;
                } else if (location === 0) {
                    decrement = null;
                }

                // As per #391, the comparison for the decrement step can have some rounding issues.
                var stepDecimals = scope_Spectrum.countStepDecimals();

                // Round per #391
                if (increment !== null && increment !== false) {
                    increment = Number(increment.toFixed(stepDecimals));
                }

                if (decrement !== null && decrement !== false) {
                    decrement = Number(decrement.toFixed(stepDecimals));
                }

                return [decrement, increment];
            });
        }

        // Updateable: margin, limit, padding, step, range, animate, snap
        function updateOptions(optionsToUpdate, fireSetEvent) {
            // Spectrum is created using the range, snap, direction and step options.
            // 'snap' and 'step' can be updated.
            // If 'snap' and 'step' are not passed, they should remain unchanged.
            var v = valueGet();

            var updateAble = ["margin", "limit", "padding", "range", "animate", "snap", "step", "format"];

            // Only change options that we're actually passed to update.
            updateAble.forEach(function(name) {
                if (optionsToUpdate[name] !== undefined) {
                    originalOptions[name] = optionsToUpdate[name];
                }
            });

            var newOptions = testOptions(originalOptions);

            // Load new options into the slider state
            updateAble.forEach(function(name) {
                if (optionsToUpdate[name] !== undefined) {
                    options[name] = newOptions[name];
                }
            });

            scope_Spectrum = newOptions.spectrum;

            // Limit, margin and padding depend on the spectrum but are stored outside of it. (#677)
            options.margin = newOptions.margin;
            options.limit = newOptions.limit;
            options.padding = newOptions.padding;

            // Update pips, removes existing.
            if (options.pips) {
                pips(options.pips);
            }

            // Invalidate the current positioning so valueSet forces an update.
            scope_Locations = [];
            valueSet(optionsToUpdate.start || v, fireSetEvent);
        }

        // Create the base element, initialize HTML and set classes.
        // Add handles and connect elements.
        scope_Base = addSlider(scope_Target);
        addElements(options.connect, scope_Base);

        // Attach user events.
        bindSliderEvents(options.events);

        // Use the public value method to set the start values.
        valueSet(options.start);

        // noinspection JSUnusedGlobalSymbols
        scope_Self = {
            destroy: destroy,
            steps: getCurrentStep,
            on: bindEvent,
            off: removeEvent,
            get: valueGet,
            set: valueSet,
            setHandle: valueSetHandle,
            reset: valueReset,
            // Exposed for unit testing, don't use this in your application.
            __moveHandles: function(a, b, c) {
                moveHandles(a, b, scope_Locations, c);
            },
            options: originalOptions, // Issue #600, #678
            updateOptions: updateOptions,
            target: scope_Target, // Issue #597
            removePips: removePips,
            pips: pips // Issue #594
        };

        if (options.pips) {
            pips(options.pips);
        }

        if (options.tooltips) {
            tooltips();
        }

        aria();

        return scope_Self;
    }

    // Run the standard initializer
    function initialize(target, originalOptions) {
        if (!target || !target.nodeName) {
            throw new Error("noUiSlider (" + VERSION + "): create requires a single element, got: " + target);
        }

        // Throw an error if the slider was already initialized.
        if (target.noUiSlider) {
            throw new Error("noUiSlider (" + VERSION + "): Slider was already initialized.");
        }

        // Test the options and create the slider environment;
        var options = testOptions(originalOptions, target);
        var api = scope(target, options, originalOptions);

        target.noUiSlider = api;

        return api;
    }

    // Use an object instead of a function for future expandability;
    return {
        // Exposed for unit testing, don't use this in your application.
        __spectrum: Spectrum,
        version: VERSION,
        create: initialize
    };
});


/***/ }),
/* 12 */,
/* 13 */,
/* 14 */,
/* 15 */,
/* 16 */,
/* 17 */,
/* 18 */,
/* 19 */,
/* 20 */,
/* 21 */,
/* 22 */,
/* 23 */,
/* 24 */,
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(7);


/***/ })
/******/ ]);