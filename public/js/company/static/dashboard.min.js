/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "http://localhost:8080/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./resources/js/static/dashboard.min.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utility_js__ = __webpack_require__("./resources/js/utility.js");
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }


Chart.defaults.global.defaultFontFamily = "'Poppins', 'Kanit', 'sans-serif'";

var Widget = function Widget(widget) {
    var _this = this;

    _classCallCheck(this, Widget);

    this.itemId = widget.itemId;
    this.widgetId = widget.widgetId;
    this.type = widget.type;
    this.lastUpdateId = widget.lastUpdateId;
    this.title_name = widget.title_name;
    this.lastUpdate = widget.lastUpdate;
    this.timeInterval = widget.timeInterval;
    this.wi = widget.wi;

    this.updateLastUpdate = function () {
        var time = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

        if (time) {
            _this.lastUpdate = new Date(time);
            $("#" + _this.lastUpdateId).html(_this.lastUpdate.toDateString() + " " + _this.lastUpdate.toLocaleTimeString());
        } else {
            _this.lastUpdate = new Date();
            $("#" + _this.lastUpdateId).html(_this.lastUpdate.toDateString() + " " + _this.lastUpdate.toLocaleTimeString());
        }
    };

    var options = {
        cellHeight: 80,
        verticalMargin: 10,
        float: false
    };

    var items = [{
        x: 0,
        y: 0,
        width: 6,
        height: 7
    }];

    var grid = null;

    var ModalDeleteWidget = null;

    var ModalEditWidget = null;

    var onEditWidgetClick = function onEditWidgetClick(el) {
        var _el = $(el);
        var itemId = _el.attr("item");
        var widget = Dashboard.getWidgetById(itemId);
        if (ModalEditWidget === null) {
            ModalEditWidget = "\n                <div class=\"modal fade\" id=\"EditWidget\">\n                    <div class=\"modal-dialog modal-lg\">\n                        <div class=\"modal-content\">\n                            <div class=\"modal-header\">\n                                <h5 class=\"modal-title\">Edit Widget</h5>\n                                <button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button>\n                            </div>\n    \n                            <div class=\"modal-body\" id=\"form-edit-widget\">\n                                <div class=\"row\" id=\"div-title\">\n                                    <div class=\"col-6\">\n                                        <lable>Title</label>\n                                        <input type=\"text\" class=\"form-control\" id=\"edit-title\"/>\n                                    </div>\n                                </div>\n\n                                <div id=\"edit-text-line\" class=\"edit-widget-form\"> \n                                    <div class=\"row\">\n                                        <div class=\"col-6\">\n                                            <lable>Unit</label>\n                                            <input type=\"text\" class=\"form-control\" id=\"edit-unit\"/>\n                                        </div>\n                                    </div>\n                                </div>\n\n                                <div id=\"edit-Gauges\" class=\"edit-widget-form\"> \n                                    <div class=\"row\">\n                                        <div class=\"col-6\">\n                                            <lable>Unit</label>\n                                            <input type=\"text\" class=\"form-control\" id=\"edit-unit\"/>\n                                        </div>\n                                    </div>\n                                </div>\n\n                                <div id=\"edit-text-box\" class=\"value_widget\" style=\"display:none;\">\n                                    <div class=\"row\">\n                                        <div class=\"col-6\">\n                                            <label>Text</label>\n                                            <input type=\"text\" id=\"edit-text-custom\" class=\"form-control\" />\n                                        </div>\n                                        <div class=\"col-6\">\n                                            <label>Font Size (px)</label>\n                                            <input type=\"number\" id=\"edit-font-size\" class=\"form-control\" />\n                                        </div>\n                                    </div>\n                                </div>\n\n                            </div>\n    \n                            <div class=\"modal-footer\">\n                                <button type=\"button\" id=\"\" class=\"btn btn-success btn-block btn-submit-edit-widget\">Done</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>";

            $('body').append(ModalEditWidget);
        }

        var formEditWidget = $("#form-edit-widget");
        $(".edit-widget-form").hide();
        $("#div-title").show();

        if (widget.type === "MutiLine") {
            formEditWidget.find("#edit-title").val(widget.title_name);
        } else if (widget.type === "text-line") {
            formEditWidget.find("#edit-title").val(widget.title_name);
            $("#edit-text-line").show();
            formEditWidget.find("#edit-text-line #edit-unit").val(widget.unit);
        } else if (widget.type === "Gauges") {
            formEditWidget.find("#edit-title").val(widget.title_name);
            $("#edit-Gauges").show();
            formEditWidget.find("#edit-Gauges  #edit-unit").val(widget.unit);
        } else if (widget.type === "TextBox") {
            formEditWidget.find("#edit-text-box #edit-text-custom").val(widget.textbox);
            formEditWidget.find("#edit-text-box #edit-font-size").val(widget.fontsize);
            $("#edit-text-box").show();
            $("#div-title").hide();
        }

        $("#EditWidget").modal('show');
    };

    var submitEditWidget = function submitEditWidget() {};

    var bindWidgetElement = function bindWidgetElement() {
        $(".btn-delete-wi").unbind().click(function () {
            onDeleteWidgetClick($(this));
        });

        $(".btn-edit-wi").unbind().click(function () {
            onEditWidgetClick($(this));
        });

        $(".btn-full-screen").unbind().click(function () {
            onFullScreenClick($(this));
        });
    };

    var onFullScreenClick = function onFullScreenClick(el) {
        var obj = Dashboard.getWidgetById(el.attr("item"));
        $("#modal-full-screen").modal('show');
        $("#content-widget").html(obj.selectWiContentFull());
        obj.createFullWidget();
    };

    var onDeleteWidgetClick = function onDeleteWidgetClick(el) {
        if (ModalDeleteWidget === null) {
            ModalDeleteWidget = "\n                <div class=\"modal fade\" id=\"DeleteWidget\">\n                    <div class=\"modal-dialog\">\n                        <div class=\"modal-content\">\n                            <div class=\"modal-header\">\n                                <h5 class=\"modal-title\">Delete Widget</h5>\n                                <button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button>\n                            </div>\n    \n                            <div class=\"modal-body\">\n                                <h6>Are you sure to delete this widget?</h6>\n                            </div>\n    \n                            <div class=\"modal-footer\">\n                                <button type=\"button\" id=\"\" class=\"btn btn-danger btn-block btn-submit-delete-widget\">Delete</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>";

            $('body').append(ModalDeleteWidget);
        }

        $('#DeleteWidget').modal('show');

        $('.btn-submit-delete-widget').unbind().click(function () {
            submitDeleteWidget($(el));
            $('#DeleteWidget').modal('hide');
        });
    };

    var submitDeleteWidget = function submitDeleteWidget(el) {
        var item = $(el).attr("item");
        grid.removeWidget($('#' + item).closest(".grid-stack-item"));
        var index = widgetList.findIndex(function (widget) {
            return widget.itemId == item;
        });
        widgetList.splice(index, 1);
    };

    var formateDataSave = function formateDataSave(data) {
        var formateDate = {
            type: data.type,
            timeInterval: data.timeInterval
        };

        if (data.type === "MutiLine") {
            formateDate.title_name = data.title_name;
            formateDate.datasets = data.datasets;
        } else if (data.type === "text-line") {
            formateDate.title_name = data.title_name;
            formateDate.unit = data.unit;
            formateDate.rgb = data.rgb;
        } else if (data.type === "Gauges") {
            formateDate.title_name = data.title_name;
            formateDate.opts = data.opts;
            formateDate.limitMin = data.limitMin;
            formateDate.limitMax = data.limitMax;
            formateDate.unit = data.unit;
        } else if (data.type === "Map") {
            formateDate.title_name = data.title_name;
        } else if (data.type === "TextBox") {
            formateDate.textbox = data.textbox;
            formateDate.fontsize = data.fontsize;
        }

        return formateDate;
    };

    this.selectWiContent = function () {
        var valueId = "";
        switch (_this.type) {
            case 'MutiLine':
                return "<canvas id=\"" + _this.widgetId + "\"></canvas>";
            case 'text-line':
                valueId = _this.itemId.replace("item-", "value_");
                return " <h2 class=\"text-left\"><span id=\"" + valueId + "\">0</span> " + _this.unit + "</h2>\n                             <canvas id=\"" + _this.widgetId + "\"></canvas>\n                            ";
            case 'Gauges':
                valueId = _this.itemId.replace("item-", "gauges-text-");
                return "\n                            <h2><span id=\"" + valueId + "\">0</span> <span>" + _this.unit + "</span></h2>\n                            <canvas id=\"" + _this.widgetId + "\"></canvas>\n                            ";
            case 'Map':
                return "\n                            <div id=\"" + _this.widgetId + "\"></div>\n                            ";
            case 'TextBox':
                return "<span id=\"" + _this.widgetId + "\"></span>";
            default:
                break;
        }
    };

    this.selectWiContentFull = function () {
        var valueId = "";
        switch (_this.type) {
            case 'MutiLine':
                return "<canvas id=\"" + _this.fullScreenId + "\"></canvas>";
            case 'text-line':
                valueId = _this.itemId.replace("item-", "value_full");
                return " <h2 class=\"text-left\"><span id=\"" + valueId + "\">0</span> " + _this.unit + "</h2>\n                             <canvas id=\"" + _this.fullScreenId + "\"></canvas>\n                            ";
            case 'Gauges':
                valueId = _this.itemId.replace("item-", "gauges-text-full");
                return "\n                            <h2><span id=\"" + valueId + "\">0</span> <span>" + _this.unit + "</span></h2>\n                            <canvas id=\"" + _this.fullScreenId + "\"></canvas>\n                            ";
            case 'Map':
                return "\n                            <div id=\"" + _this.fullScreenId + "\"></div>\n                            ";
            default:
                break;
        }
    };

    this.createWidget = function () {
        var gridData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;


        var node = items.pop() || {
            x: 3,
            y: 4,
            width: 6,
            height: 7
        };

        $(".grid-stack").gridstack(options);
        grid = $(".grid-stack").data("gridstack");

        var layout_widget = "";
        if (_this.type !== "TextBox") {
            layout_widget = $("#layout-widget").html();
            layout_widget = layout_widget.replace(/div_id/g, _this.itemId);
            layout_widget = layout_widget.replace("((wi))", _this.selectWiContent());
            layout_widget = layout_widget.replace("((title_name))", _this.title_name);
            layout_widget = layout_widget.replace("{last_update}", _this.lastUpdateId);
        } else {
            node.width = 6;
            node.height = 1;
            layout_widget = $("#layout-widget-text").html();
            layout_widget = layout_widget.replace(/div_id/g, _this.itemId);
            layout_widget = layout_widget.replace("((wi))", _this.selectWiContent());
        }

        node.id = _this.itemId;
        var g = null;
        if (gridData) {
            g = grid.addWidget($(layout_widget), gridData.x, gridData.y, gridData.width, gridData.height, true, null, null, null, null, node.id);
        } else {
            g = grid.addWidget($(layout_widget), node.x, node.y, node.width, node.height, true, null, null, null, null, node.id);
        }
        g.data('_gridstack_data', JSON.stringify(formateDataSave(_this)));

        bindWidgetElement();
    };
};

var MutiLine = function (_Widget) {
    _inherits(MutiLine, _Widget);

    function MutiLine(widget) {
        _classCallCheck(this, MutiLine);

        var _this2 = _possibleConstructorReturn(this, (MutiLine.__proto__ || Object.getPrototypeOf(MutiLine)).call(this, widget));

        _this2.fullScreenId = widget.fullScreenId;
        _this2.chart = null;
        _this2.datasets = widget.datasets;

        var options = {
            maintainAspectRatio: false,
            scales: {
                yAxes: [{
                    gridLines: {
                        display: false
                    },
                    ticks: {
                        beginAtZero: true,
                        fontFamily: "'Poppins', 'Kanit', 'sans-serif'",
                        fontStyle: "bold"
                    }
                }],
                xAxes: [{
                    gridLines: {
                        display: false
                    },
                    ticks: {
                        fontFamily: "'Poppins', 'Kanit', 'sans-serif'",
                        fontStyle: "bold"
                    }
                }]

            },
            legend: {
                labels: {
                    fontFamily: "'Poppins', 'Kanit', 'sans-serif'",
                    fontColor: 'black'
                }
            }
        };

        _this2.createMutiLine = function () {
            var ctx = document.getElementById(_this2.widgetId);
            console.log(_this2.datasets);
            var myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    datasets: Object(__WEBPACK_IMPORTED_MODULE_0__utility_js__["a" /* deepCopy */])(_this2.datasets)
                },
                options: options
            });
            _this2.chart = myChart;
        };

        _this2.createFullWidget = function () {
            var ctx = document.getElementById(_this2.fullScreenId);
            var myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    datasets: Object(__WEBPACK_IMPORTED_MODULE_0__utility_js__["a" /* deepCopy */])(_this2.datasets)
                },
                options: options
            });
        };

        _this2.updateData = function () {
            var myChart = _this2.chart;
            var data = Math.random();
            var d = new Date();
            myChart.data.labels.push(d.toLocaleTimeString());
            myChart.data.datasets.forEach(function (dataset) {
                if (dataset.data.length > 10) {
                    dataset.data.splice(0, 1);
                    //myChart.data.labels.splice(0, 1);
                }
                var data2 = Math.random();
                dataset.data.push(data + data2);
            });

            if (myChart.data.labels.length > 10) myChart.data.labels.splice(0, 1);

            myChart.update();
            _this2.updateLastUpdate();
        };
        return _this2;
    }

    return MutiLine;
}(Widget);

var ChartTextLine = function (_MutiLine) {
    _inherits(ChartTextLine, _MutiLine);

    function ChartTextLine(widget) {
        _classCallCheck(this, ChartTextLine);

        var _this3 = _possibleConstructorReturn(this, (ChartTextLine.__proto__ || Object.getPrototypeOf(ChartTextLine)).call(this, widget));

        _this3.fullScreenId = widget.fullScreenId;
        _this3.unit = widget.unit;
        _this3.rgb = widget.rgb;

        var optionChartLineNotLable = {
            maintainAspectRatio: false,
            responsive: true,
            scales: {
                yAxes: [{
                    display: false
                }],
                xAxes: [{
                    display: false
                }]
            },
            legend: {
                display: false
            },
            elements: {
                point: {
                    radius: 0
                },
                line: {
                    tension: 0
                }
            },
            layout: {
                padding: {
                    left: 0,
                    right: 0,
                    top: 0,
                    bottom: 30
                }
            },
            stepsize: 100
        };

        _this3.createTextLine = function () {
            var ctx = document.getElementById(_this3.widgetId);
            var myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [{
                        label: '',
                        data: [],
                        backgroundColor: ['rgba(255, 255, 255, 0)'],
                        borderColor: [_this3.rgb],
                        borderWidth: 2
                    }]
                },
                options: optionChartLineNotLable
            });
            _this3.chart = myChart;
            _this3.updateData();
            return myChart;
        };

        _this3.createFullWidget = function () {
            var ctx = document.getElementById(_this3.fullScreenId);
            var myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [{
                        label: '',
                        data: [],
                        backgroundColor: ['rgba(255, 255, 255, 0)'],
                        borderColor: [_this3.rgb],
                        borderWidth: 2
                    }]
                },
                options: optionChartLineNotLable
            });
        };

        _this3.updateData = function () {

            //test get api 
            // $.ajax({
            //     url: "http://data.tmd.go.th/nwpapi/v1/forecast/location/hourly/region?region=C&fields=tc,rh&date=2018-10-25",
            //     headers: { 'Content-Type': 'application/json', 'authorization': 'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6ImU3Njk5YzY5ZDY0YjVkNDUzNGFiOGUyM2QyMmY0MTdmMjA0NTQ2ZGU5N2Q2OGZjOGU3MTFjNWRjYjJlZTk0NDE0OWNmMjBiZDIzYmIwMmZlIn0.eyJhdWQiOiIyIiwianRpIjoiZTc2OTljNjlkNjRiNWQ0NTM0YWI4ZTIzZDIyZjQxN2YyMDQ1NDZkZTk3ZDY4ZmM4ZTcxMWM1ZGNiMmVlOTQ0MTQ5Y2YyMGJkMjNiYjAyZmUiLCJpYXQiOjE1MzY5MzA1OTQsIm5iZiI6MTUzNjkzMDU5NCwiZXhwIjoxNTY4NDY2NTk0LCJzdWIiOiIyNjUiLCJzY29wZXMiOltdfQ.YpNDR_qqohsKFikhEl1Ghc06yK7E6Aqeg8khUInXuNPKSw6X7_isXZgb3CYZFY9rYLt28VGrHmvqJMUM3Qz13vdI0G2BtEjtvAmoKVgaTWOGkT34igx68AyIDrzw2g-dD6aFlo50KCMMnAP8u7dwqBX9VU4yKc3dsMAIkGu9-lkmuJKL0_Tfx_DiNfIr5AOZAX_ME6R5zjVoiCFnGtX6frVoLc8WH6N5AK2yQrN-gjJwnLYFCS7lkmEtTSxavf-MigVijYRDtjAeO5vqd_uADCjyWsLMQ2BX27pnq09srvfgrhrUGq7w9Qm4IhYRUMHqKouQT9AyGC9nQm_EBHAovtXkjWMObw87ucewTK2BXDhaV3zOe9Ww_Nv2kVMvf5mIl4zMZKp-BjRY0RKBoDg1xfm11IdVzwaiHYSRnMhMDgXcAYRBgxdTNjWLlGlVrapA6GgYatG6-Mie1iuuuhJfah2EzYwTwEuXqwh3cctl5FSxC0JsDtAo8DOYCq_Esbth0nPc4cpFL9YFHaE-vO1Sj-qNBA4b6x8EOGh_rdkOnqEOAVqxKe9lio9jM1N8EOenOlTpmUDB95w8hfI1j_KdpqQqy1zgGRn_BgrHnZJxDeOXKNMfgBtMfD3aQreU75InECJ8_5uCmgtSeYF0bjgAmBYd37yJo9zprO0MNBeEGLk' },
            //     success: (res) => {
            //         console.log(res);
            //         let data = res.WeatherForecasts.find(t => {
            //             return t.location.province == "สมุทรปราการ";
            //         });
            //         let value = this.widgetId;
            //         value = value.replace("myChart_", "value_");
            //         let myChart = this.chart;
            //         let time = data.forecasts[0].time;
            //         data = data.forecasts[0].data.rh;
            //         let d = new Date();
            //         myChart.data.labels.push(d.toLocaleTimeString());
            //         myChart.data.datasets.forEach((dataset) => {
            //             if (dataset.data.length > 10) {
            //                 dataset.data.splice(0, 1);
            //                 //myChart.data.labels.splice(0, 1);
            //             }
            //             dataset.data.push(data);
            //             $("#" + value).html(data);
            //         });

            //         if (myChart.data.labels.length > 10) myChart.data.labels.splice(0, 1);

            //         myChart.update();
            //         this.updateLastUpdate(time);
            //     },
            //     error: (res) => {
            //         console.log(res);
            //     }
            // });

            var value = _this3.widgetId;
            value = value.replace("myChart_", "value_");
            var myChart = _this3.chart;
            var data = Math.floor(100 + Math.random() * 900);
            var d = new Date();
            myChart.data.labels.push(d.toLocaleTimeString());
            myChart.data.datasets.forEach(function (dataset) {
                if (dataset.data.length > 10) {
                    dataset.data.splice(0, 1);
                    //myChart.data.labels.splice(0, 1);
                }
                dataset.data.push(data);
                $("#" + value).html(data);
            });

            if (myChart.data.labels.length > 10) myChart.data.labels.splice(0, 1);

            myChart.update();
            _this3.updateLastUpdate();
        };

        _this3.liveData = function () {
            var value = _this3.widgetId;
            value = value.replace("myChart_", "value_");
            var myChart = _this3.chart;
            var d = new Date();
            myChart.data.labels.push(d.toLocaleTimeString());
            myChart.data.datasets.forEach(function (dataset) {
                if (dataset.data.length > 10) {
                    dataset.data.splice(0, 1);
                    //myChart.data.labels.splice(0, 1);
                }
                var data = dataset.data[dataset.data.length - 1];
                dataset.data.push(data);
            });

            if (myChart.data.labels.length > 10) myChart.data.labels.splice(0, 1);

            myChart.update();
            //this.updateLastUpdate();
        };
        return _this3;
    }

    return ChartTextLine;
}(MutiLine);

var Gauges = function (_Widget2) {
    _inherits(Gauges, _Widget2);

    function Gauges(widget) {
        _classCallCheck(this, Gauges);

        var _this4 = _possibleConstructorReturn(this, (Gauges.__proto__ || Object.getPrototypeOf(Gauges)).call(this, widget));

        _this4.fullScreenId = widget.fullScreenId;
        _this4.textId = widget.textId;
        _this4.gaugeWidget = null;
        _this4.opts = widget.opts;
        _this4.limitMax = widget.limitMax;
        _this4.limitMin = widget.limitMin;
        _this4.unit = widget.unit;

        _this4.createGages = function () {
            var target = document.getElementById(_this4.widgetId); // your canvas element
            var gauge = new Gauge(target).setOptions(_this4.opts); // create sexy gauge!
            gauge.maxValue = _this4.limitMax; // set max gauge value
            gauge.setMinValue(0); // Prefer setter over gauge.minValue = 0
            gauge.animationSpeed = 32; // set animation speed (32 is default value)
            gauge.set(0); // set actual value
            _this4.gaugeWidget = gauge;
            _this4.updateData();
        };

        _this4.updateData = function () {
            var data = Math.floor(Math.random() * (100 - 1));
            $("#" + _this4.textId).html(data);
            _this4.gaugeWidget.set(data);
            _this4.updateLastUpdate();
        };
        return _this4;
    }

    return Gauges;
}(Widget);

var Map = function (_Widget3) {
    _inherits(Map, _Widget3);

    function Map(widget) {
        _classCallCheck(this, Map);

        var _this5 = _possibleConstructorReturn(this, (Map.__proto__ || Object.getPrototypeOf(Map)).call(this, widget));

        _this5.fullScreenId = widget.fullScreenId;
        _this5.myMap = null;

        _this5.createMap = function () {
            var mymap = void 0;
            var mapid = _this5.widgetId;
            var height = $("#" + _this5.itemId).height() - 100;
            $('#' + mapid).css('height', height);
            $('#' + mapid).css('width', 'auto');

            mymap = L.map(mapid, {
                dragging: true,
                zoomControl: true,
                scrollWheelZoom: false,
                zoomAnimation: false
            });

            $.getJSON('https://raw.githubusercontent.com/apisit/thailand.json/master/thailand.json').then(function (geoJSON) {
                var osm = new L.TileLayer.BoundaryCanvas("https://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}", {
                    boundary: geoJSON,
                    minZoom: 5,
                    maxZoom: 9,
                    attribution: '&copy; Tiles &copy; Esri &mdash; Esri, DeLorme, NAVTEQ'
                });

                mymap.addLayer(osm);
                var ukLayer = L.geoJSON(geoJSON);
                mymap.fitBounds(ukLayer.getBounds());
            });

            function disableGrid() {
                var grid = $('.grid-stack').data('gridstack');
                grid.enableMove(false);
            }

            function enableGrid() {
                var grid = $('.grid-stack').data('gridstack');
                grid.enableMove(true);
            }

            $('.grid-stack').on('change', function (e, items) {
                if (mymap != null) {
                    mymap.invalidateSize(true);
                }
            });

            // mymap.on('mousemove', disableGrid);
            // mymap.on('mouseout', enableGrid);

            _this5.myMap = mymap;
            console.log(_this5.myMap);
        };

        _this5.createFullWidget = function () {
            var mymap = void 0;
            var mapid = _this5.fullScreenId;
            var height = "450px";
            $('#' + mapid).css('height', height);
            $('#' + mapid).css('width', 'auto');

            mymap = L.map(mapid, {
                dragging: true,
                zoomControl: true,
                scrollWheelZoom: false,
                zoomAnimation: false
            });

            $.getJSON('https://raw.githubusercontent.com/apisit/thailand.json/master/thailand.json').then(function (geoJSON) {
                var osm = new L.TileLayer.BoundaryCanvas("https://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}", {
                    boundary: geoJSON,
                    minZoom: 5,
                    maxZoom: 9,
                    attribution: '&copy; Tiles &copy; Esri &mdash; Esri, DeLorme, NAVTEQ'
                });
                mymap.addLayer(osm);
                var ukLayer = L.geoJSON(geoJSON);
                mymap.fitBounds(ukLayer.getBounds());
            }).then(function () {
                setTimeout(function () {
                    mymap.invalidateSize(true);
                    $.ajax({
                        dataType: "json",
                        url: '/js/company/test-api.json',
                        async: false,
                        success: function success(data) {
                            var heat = [];
                            var WeatherForecasts = data.WeatherForecasts;
                            for (var i in WeatherForecasts) {
                                //L.marker([WeatherForecasts[i].location.lat, WeatherForecasts[i].location.lon]).addTo(mymap).bindPopup(WeatherForecasts[i].location.province + " " + "อ ุณหภูมิที่ระดับพื้นผิว : " + WeatherForecasts[i].forecasts[1].data.tc + " °C");
                                heat.push([WeatherForecasts[i].location.lat, WeatherForecasts[i].location.lon, WeatherForecasts[i].forecasts[1].data.tc / 100]);
                            }
                            L.heatLayer(heat, {
                                radius: 75
                            }).addTo(mymap);
                        }
                    });
                }, 1000);
            });
        };
        return _this5;
    }

    return Map;
}(Widget);

var TextBox = function (_Widget4) {
    _inherits(TextBox, _Widget4);

    function TextBox(widget) {
        _classCallCheck(this, TextBox);

        var _this6 = _possibleConstructorReturn(this, (TextBox.__proto__ || Object.getPrototypeOf(TextBox)).call(this, widget));

        _this6.textbox = widget.textbox;
        _this6.fontsize = widget.fontsize;
        _this6.createTextBox = function () {
            console.log($("#" + _this6.widgetId));
            $("#" + _this6.widgetId).html(_this6.textbox);
            $("#" + _this6.widgetId).css({ "font-size": _this6.fontsize + "px" });
        };
        return _this6;
    }

    return TextBox;
}(Widget);

var widgetList = [];

var Dashboard = function () {
    function Dashboard() {
        _classCallCheck(this, Dashboard);

        var options = {
            cellHeight: 80,
            verticalMargin: 10,
            float: false
        };

        var grid = null;

        var time = null;

        var getWigetType = function getWigetType() {
            return $("#widget_type").val();
        };

        var getTitleName = function getTitleName() {
            return $("#title-name").val();
        };

        var getTimeInterval = function getTimeInterval() {
            return $("#time-interval").val();
        };

        var getDateTimeNow = function getDateTimeNow() {
            var d = new Date();
            //return d.getDate() + "-" + d.getMonth() + "-" + d.getFullYear() + " " + d.getHours() + ":" + d.getMinutes() + ":" + d.getSeconds();
            return d.toUTCString();
        };

        var getValueMutiLine = function getValueMutiLine(divId) {
            var length_label = $("#Mutiline_value").find(".label-y-chart-line").length;
            var data_line = [];
            for (var i = 0; i < length_label; i++) {
                var label_y = $("#Mutiline_value").find(".label-y-chart-line");
                var rgb = $("#Mutiline_value").find(".rgb-chart-line");
                var rgba = 'rgba(255,255,255,0.0)';
                var data = null;
                data = {
                    label: $(label_y[i]).val(),
                    backgroundColor: rgba,
                    borderColor: $(rgb[i]).val(),
                    borderWidth: 2
                };
                data_line.push(data);
            }

            var data_widget = {
                itemId: "item-" + divId,
                widgetId: "myChart_" + divId,
                lastUpdateId: "myChartLastUpdate_" + divId,
                fullScreenId: "myChartFull_" + divId,
                type: getWigetType(),
                title_name: getTitleName(),
                lastUpdate: getDateTimeNow(),
                timeInterval: getTimeInterval(),
                datasets: [].concat(data_line)
            };
            return data_widget;
        };

        var getValueTextLine = function getValueTextLine(divId) {
            var unit = $("#text-line").find("#unit").val();
            var rgb = $("#value-text-line").find("#rgb").val();

            var data_widget = {
                itemId: "item-" + divId,
                widgetId: "myChart_" + divId,
                lastUpdateId: "myChartLastUpdate_" + divId,
                fullScreenId: "myChartFull_" + divId,
                type: getWigetType(),
                title_name: getTitleName(),
                lastUpdate: getDateTimeNow(),
                timeInterval: getTimeInterval(),
                rgb: rgb,
                unit: unit
            };
            return data_widget;
        };

        var getValueGauges = function getValueGauges(divId) {
            var limitMin = $("#Gauges").find("#g_limitMin").val();
            var limitMax = $("#Gauges").find("#g_limitMax").val();
            var unit = $("#Gauges").find("#unit").val();

            var data_widget = {
                textId: "gauges-text-" + divId,
                itemId: "item-" + divId,
                widgetId: "gauges-" + divId,
                lastUpdateId: "gaugesLastUpdate-" + divId,
                fullScreenId: "gaugesFull-" + divId,
                type: getWigetType(),
                title_name: getTitleName(),
                lastUpdate: getDateTimeNow(),
                timeInterval: getTimeInterval(),
                limitMax: limitMax,
                limitMin: limitMin,
                unit: unit,
                opts: {
                    angle: 0, // The span of the gauge arc
                    lineWidth: 0.23, // The line thickness
                    radiusScale: 1, // Relative radius
                    pointer: {
                        length: 0.6, // // Relative to gauge radius
                        strokeWidth: 0.035, // The thickness
                        color: '#000000' // Fill color
                    },
                    limitMax: false, // If false, max value increases automatically if value > maxValue
                    limitMin: false, // If true, the min value of the gauge will be fixed
                    colorStart: '#6FADCF', // Colors
                    colorStop: '#8FC0DA', // just experiment with them
                    strokeColor: '#E0E0E0', // to see which ones work best for you
                    generateGradient: true,
                    highDpiSupport: true, // High resolution support
                    staticLabels: {
                        font: "10px Poppins", // Specifies font
                        labels: [0, Number(limitMax)], // Print labels at these values
                        color: "#000000", // Optional: Label text color
                        fractionDigits: 0 // Optional: Numerical precision. 0=round off.
                    }
                }
            };

            return data_widget;
        };

        var getValueMap = function getValueMap(divId) {
            var data_widget = {
                itemId: "item-" + divId,
                widgetId: "map-" + divId,
                lastUpdateId: "mapLastUpdate-" + divId,
                fullScreenId: "mapFull-" + divId,
                type: getWigetType(),
                title_name: getTitleName(),
                lastUpdate: getDateTimeNow(),
                timeInterval: getTimeInterval()
            };

            return data_widget;
        };

        var getValueWigetText = function getValueWigetText(divId) {
            var textbox = $("#text-box").find("#text-custom").val();
            var fontsize = $("#text-box").find("#font-size").val();
            var data_widget = {
                itemId: "item-" + divId,
                widgetId: "text-" + divId,
                type: getWigetType(),
                title_name: null,
                lastUpdate: null,
                timeInterval: null,
                textbox: textbox,
                fontsize: fontsize
            };

            return data_widget;
        };

        var createFormBodyInputWidget = function createFormBodyInputWidget(type) {
            $(".value_widget").hide();
            $("#default-value").show();
            if (type === "MutiLine") {
                $("#MutiLine").show();
            } else if (type === "text-line") {
                $("#text-line").show();
            } else if (type === "Gauges") {
                $("#Gauges").show();
            } else if (type === "TextBox") {
                $("#text-box").show();
                $("#default-value").hide();
            } else {
                $("#form-input-widget").html("");
            }
        };

        var onAddValueMutiLineClick = function onAddValueMutiLineClick() {
            var formhtml = $("#line_value_layout").html();
            $("#Mutiline_value").append(formhtml);
        };

        var onAddWidgetClick = function onAddWidgetClick() {
            var type = getWigetType();
            var divId = Math.floor(100000 + Math.random() * 900000);
            var obj_widget = null;
            var widget = null;

            if (type === "MutiLine") {
                widget = getValueMutiLine(divId);
                obj_widget = new MutiLine(Object.assign({}, widget));
                obj_widget.createWidget();
                obj_widget.createMutiLine();
            } else if (type === "text-line") {
                widget = getValueTextLine(divId);
                obj_widget = new ChartTextLine(widget);
                obj_widget.createWidget();
                obj_widget.createTextLine();
            } else if (type === "Gauges") {
                widget = getValueGauges(divId);
                obj_widget = new Gauges(widget);
                obj_widget.createWidget();
                obj_widget.createGages();
            } else if (type === "Map") {
                widget = getValueMap(divId);
                obj_widget = new Map(widget);
                obj_widget.createWidget();
                obj_widget.createMap();
            } else if (type === "TextBox") {
                widget = getValueWigetText(divId);
                obj_widget = new TextBox(widget);
                obj_widget.createWidget();
                obj_widget.createTextBox();
            }
            widgetList.push(obj_widget);
        };

        var saveGrid = function saveGrid() {
            var serializedData = _.map($('.grid-stack > .grid-stack-item:visible'), function (el) {
                el = $(el);
                var node = el.data('_gridstack_node');
                var widget = el.data('_gridstack_data');
                console.log(widget);
                return {
                    x: node.x,
                    y: node.y,
                    width: node.width,
                    height: node.height,
                    widget: JSON.parse(widget)
                };
            });
            //console.log(JSON.stringify(serializedData, null, '        '))
            setStorage("dashboard", serializedData);
            // $('#saved-data').val(JSON.stringify(serializedData, null, '        '));
        };

        var bindElement = function bindElement() {
            $("#settingW").click(function () {
                clearInterval(time);
                $(this).hide();
                $(".full-screen").hide();
                $(".edit-widget").show();
                $("#addW").show();
                $("#saveW").show();
                $("#cancelW").show();
                grid.enableMove(true);
                grid.enableResize(true);
            });

            $("#widget_type").change(function () {
                $(".value_widget").hide();
                createFormBodyInputWidget(getWigetType());
            });

            $("#addW").unbind().click(function () {
                $("input[type=text]").val("");
                $("#myModal").modal('show');
            });

            $("#add-new-widget").unbind().click(function () {
                onAddWidgetClick();
            });

            $("#saveW").unbind().click(function () {
                $("#saveW").hide();
                $("#addW").hide();
                $("#cancelW").hide();
                $("#settingW").show();
                $(".full-screen").show();
                $(".edit-widget").hide();
                updateDatalast();
                saveGrid();
                grid.enableMove(false);
                grid.enableResize(false);
            });

            $("#cancelW").unbind().click(function () {
                $("#saveW").hide();
                $("#addW").hide();
                $(".edit-widget").hide();
                $(".full-screen").show();
                $("#cancelW").hide();
                $("#settingW").show();
                updateDatalast();
                grid.enableMove(false);
                grid.enableResize(false);
            });

            $("#btn-add-value-Mutiline").unbind().click(function () {
                onAddValueMutiLineClick();
            });
        };

        var updateDatalast = function updateDatalast() {
            time = setInterval(function () {
                if (widgetList.length > 0) {
                    updateData([].concat(widgetList));
                }
            }, 1000);
        };

        var updateData = function updateData(widgets) {
            for (var i = 0; i < widgets.length; i++) {
                var widget = widgets[i];
                if (widget.updateData) {
                    if (Dashboard.diffTime(widget.lastUpdate, widget.timeInterval) >= widget.timeInterval) {
                        widget.updateData();
                    } else if (widget.liveData) {
                        widget.liveData();
                    }
                }
            }
        };

        var createDashboardInit = function createDashboardInit(dashboard) {
            var obj_widget = null;
            var widgets = null;
            var gridData = null;
            var type = "";
            for (var key in dashboard) {

                var divId = Math.floor(100000 + Math.random() * 900000);
                obj_widget = null;
                widgets = dashboard[key].widget;
                gridData = dashboard[key];
                type = widgets.type;
                widgets.itemId = "item-" + divId;
                widgets.lastUpdate = getDateTimeNow();
                if (type === "MutiLine") {
                    widgets.widgetId = "myChart_" + divId;
                    widgets.fullScreenId = "myChartFull_" + divId;
                    widgets.lastUpdateId = "myChartLastUpdate_" + divId;
                    obj_widget = new MutiLine(widgets);
                    obj_widget.createWidget(gridData);
                    obj_widget.createMutiLine();
                } else if (type === 'Gauges') {
                    widgets.textId = "gauges-text-" + divId;
                    widgets.widgetId = "gauges-" + divId;
                    widgets.lastUpdateId = "gaugesLastUpdate-" + divId;
                    widgets.fullScreenId = "gaugesFull-" + divId;
                    obj_widget = new Gauges(widgets);
                    obj_widget.createWidget(gridData);
                    obj_widget.createGages();
                } else if (type === "text-line") {
                    widgets.widgetId = "myChart_" + divId;
                    widgets.lastUpdateId = "myChartLastUpdate_" + divId;
                    widgets.fullScreenId = "myChartFull_" + divId;
                    obj_widget = new ChartTextLine(widgets);
                    obj_widget.createWidget(gridData);
                    obj_widget.createTextLine();
                } else if (type === "Map") {
                    widgets.widgetId = "map-" + divId;
                    widgets.lastUpdateId = "mapLastUpdate_" + divId;
                    widgets.fullScreenId = "mapFull-" + divId;
                    obj_widget = new Map(widgets);
                    obj_widget.createWidget(gridData);
                    obj_widget.createMap();
                } else if (type === "TextBox") {
                    widgets.widgetId = "text-" + divId;
                    obj_widget = new TextBox(widgets);
                    obj_widget.createWidget(gridData);
                    obj_widget.createTextBox();
                }
                widgetList.push(obj_widget);
            }

            $(".edit-widget").hide();
        };

        this.initDashboard = function () {
            bindElement();
            // set widget $.ajax
            // test use localstorage
            var dashboard = "";
            if (getStorage("dashboard") != "") {
                dashboard = GridStackUI.Utils.sort(getStorage("dashboard"));
                createDashboardInit(dashboard);
                //console.log(dashboard);
            }

            updateDatalast();

            $(".grid-stack").gridstack(options);
            grid = $(".grid-stack").data("gridstack");
            grid.enableMove(false);
            grid.enableResize(false);

            $("#loading").remove();
        };
    }

    _createClass(Dashboard, null, [{
        key: "diffTime",
        value: function diffTime(lastUpdate) {
            var timeInterval = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

            //console.log(lastUpdate);
            var current = new Date();
            var _lastUpdate = new Date(lastUpdate);

            var diff = (current.getTime() - _lastUpdate.getTime()) / 1000;
            //หน่วยวินาที
            //console.log(diff);
            // diff /= 60;

            return Math.abs(Math.round(diff));
        }
    }, {
        key: "updateGridData",
        value: function updateGridData(id) {}
    }, {
        key: "getWidgetById",
        value: function getWidgetById(itemId) {
            return widgetList.find(function (widget) {
                return widget.itemId == itemId;
            });
        }
    }]);

    return Dashboard;
}();

$(document).ready(function () {
    $("#sidebarCollapse").click();
    var dashboard = new Dashboard();
    dashboard.initDashboard();

    $('.grid-stack').on('gsresizestop', function (event, elem) {
        var el = $(elem);
        var data_widget = JSON.parse(el.data('_gridstack_data'));
        var node = el.data('_gridstack_node');
        console.log(node);
        var type = data_widget.type;
        if (type === "Gauges") {

            // let element = event.target;
            // let width = el.find('.panel__content').width();
            // let height = el.find('.panel__content').height();
            // let panel = el.find('.panel__content');
            // let id = $(panel).find('canvas');
            // console.log($(id).attr("width"));
            // $(id).attr("width", width - 30)
            // $(id).attr("height", height - 30)

            // document.getElementById('gauge').getContext('2d').save();
            // document.getElementById('gauge').getContext('2d').setTransform(1, 0, 0, 1, 0, 0);
            // document.getElementById('gauge').getContext('2d').clearRect(0, 0, document.getElementById('gauge').getContext('2d').canvas.width, document.getElementById('gauge').getContext('2d').canvas.height);
            // document.getElementById('gauge').getContext('2d').restore();
        } else if (type === "Map") {
            var map = Dashboard.getWidgetById(node.id);
            console.log(map);
            map.myMap.invalidateSize();
        }
    });
});

/***/ }),

/***/ "./resources/js/utility.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export showLoadingModal */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return deepCopy; });

var showLoadingModal = function showLoadingModal(el, status) {
    var loading = " <div id=\"loading-save\" style=\"display:none;\">\n                        <div class=\"lds-ring\">\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                            <div></div>\n                        </div>\n                        <h6 class='text-center'>Saving Data ...</h6>\n                    </div>";
    var _el = el;

    if (!_el.find("#loading-save").length) {
        _el.find(".modal-body").after(loading);
    }

    if (status) {
        _el.find("form").hide();
        _el.find("#loading-save").show();
    } else {
        _el.find("form").show();
        _el.find("#loading-save").hide();
    }
};

var deepCopy = function deepCopy(data) {
    return data.map(function (item) {
        return Object.assign({}, item);
    });
};

/***/ }),

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("./resources/js/static/dashboard.min.js");


/***/ })

/******/ });