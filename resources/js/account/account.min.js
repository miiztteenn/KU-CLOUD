import croppie from 'croppie';
import {
    LOADING,
    checkError,
    addEventValidate,
    resetInputValidate,
    checkAuthRes
} from '../utility';


const API = {
    changePassword: 'account/password',
    getAccount: 'account',
    uploadProfile: 'account/profile',
    updateName: 'account/name',
    updateUsername : 'account/username',
    changePrimaryEmail: 'account/email',
    addEmail: 'account/email',
    deleteEmail: 'account/email',
    changePrimaryPhone: 'account/phone',
    addPhone: 'account/phone',
    deletephone: 'account/phone',
    addAddress : 'account/address',
};


toastr.options = {
    "closeButton": false,
    "debug": false,
    "newestOnTop": false,
    "progressBar": true,
    "positionClass": "toast-top-right",
    "preventDuplicates": false,
    "onclick": null,
    "showDuration": "300",
    "hideDuration": "1000",
    "timeOut": "3000",
    "extendedTimeOut": "1000",
    "showEasing": "swing",
    "hideEasing": "linear",
    "showMethod": "fadeIn",
    "hideMethod": "fadeOut"
};

validate.validators.presence.message = "is required";

let validateInput = {
    updateName: {
        parent: "#profile",
        validate: {
            firstname: {
                presence: {
                    allowEmpty: false
                },
                length: {
                    maximum: 50,
                },
            },
            lastname: {
                presence: {
                    allowEmpty: false
                },
                length: {
                    maximum: 50,
                },
            },
        }
    },
    changePassword : {
        parent: "#account",
        validate : {
            old_password : {
                presence: {
                    allowEmpty: false
                },
                format: {
                    pattern: "[a-zA-Z0-9]+",
                    flags: "i",
                    message: "can only contain a-Z and 0-9"
                },
                length: {
                    maximum: 20,
                },
            },
            new_password : {
                presence: {
                    allowEmpty: false
                },
                format: {
                    pattern: "[a-zA-Z0-9]+",
                    flags: "i",
                    message: "can only contain a-Z and 0-9"
                },
                length: {
                    minimum: 6,
                    message: "must be at least 6 characters"
                }
            },
            confirm_password : {
                equality: "new_password",
            }
        },
    },
    addAddress: {
        parent: "form#form_add_address",
        validate: {
            address_detail: {
                presence: {
                    allowEmpty: false,
                }
            },
            province: {
                presence: {
                    allowEmpty: false,
                }
            },
            amphure: {
                presence: {
                    allowEmpty: false,
                }
            },
            district: {
                presence: {
                    allowEmpty: false,
                }
            },
            zip_code: {
                presence: {
                    allowEmpty: false,
                }
            },
        }
    }
}

let state = {
    modeAddressModal : 'add',
    indexAddressSelected : null,
}


class Account {
    constructor() {

        let accountData = null;

        let uploadCrop = null;
        let rawImg = null;

        let modalAddAddress = null;

        let provinces = null;
        let amphures = null;
        let districts = null;

        let createSelectProvices = () => {
            let html = `<option value="">--Select province--</option>`;
            provinces.map(data => {
                html += `<option value="${data.province_id}">${data.name_th} ${data.name_en}</option>`
            })

            $("#province").html(html);
        }

        let getProvinces = () => {
            $.ajax({
                url:END_POINT + 'address/provinces',
                method: 'GET',
                success:(res,textStatus,xhr) => {
                    checkAuthRes(xhr)
                    provinces = res.data;
                   createSelectProvices(); 
                },
                error:(res) => {
                    console.log(res);
                }
             });
        }

        let createSelectAmphures = () => {
            let html = `<option value="">--Select amphure--</option>`;
            amphures.map(data => {
                html += `<option value="${data.amphure_id}">${data.name_th} ${data.name_en}</option>`
            })

            $("#amphure").html(html);

            if(state.modeAddressModal === "edit"){
                $("#amphure").val(accountData.address[state.indexAddressSelected].amphure_id);
                $("#amphure").change();
            }
        }

        let getAmphuresByProvince = ($province_id) => {
            $.ajax({
                url:END_POINT + `address/amphures/province/${$province_id}`,
                method: 'GET',
                success:(res,textStatus,xhr) => {
                    checkAuthRes(xhr)
                    amphures = res.data;
                    createSelectAmphures(); 
                },
                error:(res) => {
                    console.log(res);
                }
             });
        }

        let createSelectdistrict = () => {
            let html = `<option value="">--Select district--</option>`;
            districts.map(data => {
                html += `<option value="${data.district_id}">${data.name_th} ${data.name_en}</option>`
            })

            $("#district").html(html);

            if(state.modeAddressModal === "edit"){
                $("#district").val(accountData.address[state.indexAddressSelected].district_id);
                $("#district").change();
            }
        }

        let getDistrictsByAmphures = (province_id,amphure_id)=>{
            $.ajax({
                url:END_POINT + `address/districts/province/${province_id}/amphure/${amphure_id}`,
                method: 'GET',
                success:(res,textStatus,xhr) => {
                    checkAuthRes(xhr)
                    districts = res.data;
                    createSelectdistrict(); 
                },
                error:(res) => {
                    console.log(res);
                }
             });
        }

        let createEmailAndPhone = () => {


            let email_select = "";
            let email_list = accountData.email.map((data, index) => {
                status = "";
                if (data.is_primary) {
                    status += `<span class="badge badge-pill badge-primary d-flex justify-content-center align-items-center">Primary</span>`;
                }
                if (data.is_verify && !data.is_primary) {
                    email_select += `<option value=${data.email_user}>${data.email_user}</option>`;
                    status += `<span class="badge badge-pill badge-success d-flex justify-content-center align-items-center">Verify success</span> 
                               <i class="far fa-trash-alt text-danger ml-3 btn-delete-email"  style="cursor:pointer" email="${data.email_user}" index="${index}"></i>`;
                } else if (data.is_verify && data.is_primary) {
                    status += `<span class="badge badge-pill badge-success d-flex justify-content-center align-items-center">Verify success</span> `;
                } else {
                    status += `<span class="badge badge-pill badge-danger d-flex justify-content-center align-items-center">Verify not success</span> 
                               <i class="fas fa-paper-plane text-primary  ml-3" style="cursor:pointer" email="${data.email_user}"></i> 
                               <i class="far fa-trash-alt text-danger ml-3 btn-delete-email"  style="cursor:pointer" email="${data.email_user}" index="${index}"></i> `;
                }
                return `<li class="list-group-item mt-1" id="email-${index}" style="padding:.375rem .75rem;">
                            <div class="row">
                                <div class="col-6">
                                ${data.email_user} 
                                </div>
                                <div class="col-6 d-flex justify-content-end">
                                ${status}
                                </div>
                            </div>
                        </li>`;
            });

            let phone_select = "";
            let phone_list = accountData.phone.map((data, index) => {
                status = "";
                if (data.is_primary) {
                    status = `<span class="badge badge-pill badge-primary d-flex justify-content-center align-items-center">Primary</span>`;
                }
                if (data.is_verify && !data.is_primary) {
                    phone_select += `<option value=${data.phone_user}>${data.phone_user}</option>`;
                    status += `<span class="badge badge-pill badge-success d-flex justify-content-center align-items-center">Verify success</span> 
                               <i class="far fa-trash-alt text-danger ml-3 btn-delete-phone"  style="cursor:pointer" phone="${data.phone_user}" index="${index}"></i>`;
                } else if (data.is_verify && data.is_primary) {
                    status += `<span class="badge badge-pill badge-success d-flex justify-content-center align-items-center">Verify success</span> `;
                } else {
                    status += `<span class="badge badge-pill badge-danger d-flex justify-content-center align-items-center">Verify not success</span>
                               <i class="fas fa-paper-plane text-primary  ml-3" style="cursor:pointer" phone="${data.phone_user}"></i> 
                               <i class="far fa-trash-alt text-danger ml-3 btn-delete-phone"  style="cursor:pointer" phone="${data.phone_user}" index="${index}"></i> `;
                }
                return `<li class="list-group-item mt-1" id="phone-${index}"  style="padding:.375rem .75rem;">
                            <div class="row">
                                <div class="col-6">
                                ${data.phone_user} 
                                </div>
                                <div class="col-6 d-flex justify-content-end">
                                ${status}
                                </div>
                            </div>
                        </li>`;
            });

            $("#select-email").html(email_select);
            $("#select-phone").html(phone_select);

            $('#list-email').html(email_list.join(''));
            $('#list-phone').html(phone_list.join(''));

            $(".btn-delete-email").unbind().click(function () {
                let email = $(this).attr('email');
                swal({
                    title: "Are you sure",
                    text: `to delete this email address ${email} ?`,
                    icon: "warning",
                    buttons: true,
                    dangerMode: true,
                }).then((willDelete) => {
                    if (willDelete) {
                        deleteEmail($(this));
                    } else {
                        return;
                    }
                });
            });

            $(".btn-delete-phone").unbind().click(function () {
                let phone = $(this).attr('phone');
                swal({
                    title: "Are you sure",
                    text: `to delete this phone number ${phone} ?`,
                    icon: "warning",
                    buttons: true,
                    dangerMode: true,
                }).then((willDelete) => {
                    if (willDelete) {
                        deletePhone($(this));
                    } else {
                        return;
                    }
                });
            });
        };

        let deleteEmail = (el) => {
            let email = $(el).attr('email');
            let index = $(el).attr('index');
            $.ajax({
                url: END_POINT + API.deleteEmail,
                method: 'DELETE',
                data: {
                    email: email
                },
                success:(res,textStatus,xhr) => {
                    checkAuthRes(xhr)
                    $(`#email-${index}`).remove();
                },
                error: (res) => {
                    console.log(res);
                }
            });
        };

        let deletePhone = (el) => {
            let phone = $(el).attr('phone');
            let index = $(el).attr('index');
            $.ajax({
                url: END_POINT + API.deletephone,
                method: 'DELETE',
                data: {
                    phone: phone
                },
                success:(res,textStatus,xhr) => {
                    checkAuthRes(xhr)
                    $(`#phone-${index}`).remove();
                },
                error: (res) => {
                    console.log(res);
                }
            });
        };

        let readFile = (input) => {
            if (input.files && input.files[0]) {
                var reader = new FileReader();
                reader.onload = function (e) {
                    $('.upload-demo').addClass('ready');
                    rawImg = e.target.result;
                    $('#profile-crop').modal('show');
                }
                reader.readAsDataURL(input.files[0]);
            } else {
                swal("Sorry - you're browser doesn't support the FileReader API");
            }
        }

        let bindElement = () => {

            addEventValidate(validateInput.updateName);
      

            $("input[name='img-profile']").change(function () {
                readFile(this);
            })

            $("#btn-crop-save").unbind().click(function () {
                $("#imageUploadForm").submit();
            })

            $('#imageUploadForm').on('submit', (function (e) {
                LOADING.set($("#btn-crop-save"));
                e.preventDefault();
                uploadCrop.croppie('result', {
                    type: 'canvas',
                    size: 'original'
                }).then(function (resp) {
                    $.ajax({
                        type: 'POST',
                        url: END_POINT + API.uploadProfile,
                        data: {
                            imgProfile: resp
                        },
                        success:(res,textStatus,xhr) => {
                            checkAuthRes(xhr)
                            $("#profile-crop").modal('hide');
                            LOADING.reset($("#btn-crop-save"));
                            location.reload();
                        },
                        error: function (data) {
                            console.log("error");
                            console.log(data);
                        }
                    });

                    console.log(resp);
                });
            }));

            $("#btn-update-password").unbind().click(function () {
                changePassword();
            });

            $("#btn_update_username").unbind().click(function(){
                updateUsername();
            });

            $("#btn-update-profile").unbind().click(function () {
                updateName();
            });

            $("#btn-add-email").unbind().click(function () {
                addEmail();
            });

            $("#btn-save-email-pri").unbind().click(function () {
                changePrimaryEmail();
            });

            $("#btn-add-phone").unbind().click(function () {
                addPhone();
            });

            $("#btn-save-phone-pri").unbind().click(function () {
                changePrimaryPhone();
            });

            $(".address-add").unbind().click(function(){
                resetInputValidate();
                $("#addAddress").attr('mode','add');
                $("#addAddress").modal('show');
            });

            $("#btn_add_address").unbind().click(function(){
                addAddress();
            })

            $("#province").change(function(){
                $("#zip_code").val('')
                if($(this).val() != ""){
                    $("#district").html(`<option value="">--Select district--</option>`);
                    getAmphuresByProvince($(this).val());
                }
                else{
                    $("#district").html(`<option value="">--Select district--</option>`);
                    $("#amphure").html(`<option value="">--Select amphure--</option>`);
                }
            });

            $("#amphure").change(function(){
                $("#zip_code").val('')
                if($(this).val() != ""){
                    getDistrictsByAmphures($("#province").val(),$(this).val());
                }
                else{
                    $("#district").html(`<option value="">--Select district--</option>`);
                }
            });

            $("#district").change(function(){
                $("#zip_code").val('')
                if($(this).val() != ""){
                    let district = districts.filter(data => {
                        return data.district_id === $(this).val();
                    });
                    console.log(district);
                    $("#zip_code").val(district[0].zip_code);
                }
                else{
                    $("#zip_code").val('')
                }
            });

            getProvinces();

            $('#profile-crop').on('shown.bs.modal', function () {
                uploadCrop.croppie('bind', {
                    url: rawImg
                }).then(function () {
                    console.log('jQuery bind complete');
                });
            });

            uploadCrop = $('#upload-demo').croppie({
                enableExif: true,
                enforceBoundary: false,
                viewport: {
                    width: 300,
                    height: 300,
                    type: 'circle'
                },
                boundary: {
                    width: 400,
                    height: 400
                }
            });

            addEventValidate(validateInput.addAddress)
        };

        let addAddress = () => {
            LOADING.set($("#btn_add_address"));
            $.ajax({
                url: END_POINT + API.addAddress,
                method: 'POST',
                data: {
                    address_detail: $('#address_detail').val(),
                    province_id: $('#province').val(),
                    amphure_id: $('#amphure').val(),
                    district_id: $('#district').val(),
                },
                success:(res,textStatus,xhr) => {
                    checkAuthRes(xhr)
                    LOADING.reset($("#btn_add_address"));
                    $("#addAddress").modal('hide');
                    this.showDataLast();
                },
                error: (res) => {
                    LOADING.reset($("#btn_add_address"));
                }
            })
        };

        let changePassword = () => {
            if(checkError(validateInput.changePassword))
                return;
            let old_password = $("input[name='old_password']").val();
            let new_password = $("input[name='new_password']").val();
            let confirm_password = $("input[name='confirm_password']").val();
            $(".text-error").remove();
            if (new_password === confirm_password) {
                $.ajax({
                    url: END_POINT + API.changePassword,
                    method: 'POST',
                    data: {
                        new_password: new_password,
                        old_password: old_password,
                    },
                    success:(res,textStatus,xhr) => {
                        checkAuthRes(xhr)
                        $("input[name='old_password']").val('');
                        $("input[name='new_password']").val('');
                        $("input[name='confirm_password']").val('');
                        toastr["success"]("Success");
                    },
                    error: (res) => {
                        if (!res.responseJSON.old_password) {
                            $("input[name='old_password']").after("<p class='text-danger text-error'>Old password wrong</p>")
                        }
                    }
                })
            } else {
                $("input[name='confirm_password']").after("<p class='text-danger text-error'>Passwords Don't Match</p>")
            }
        }

        let updateUsername = () => {
            let username = $("input[name='username']").val();
            LOADING.set($("#btn_update_username"));
            $.ajax({
                url: END_POINT + API.updateUsername,
                method: 'PUT',
                data: {
                    username: username,
                },
                success:(res,textStatus,xhr) => {
                    checkAuthRes(xhr)
                    LOADING.reset($("#btn_update_username"));
                    toastr["success"]("Success");
                },
                error: (res) => {
                    LOADING.reset($("#btn_update_username"));
                }
            })
        }

        let updateName = () => {
            let fname = $("input[name='firstname']");
            let lname = $("input[name='lastname']");
            if(checkError(validateInput.updateName))
             return;

            LOADING.set($("#btn-update-profile"));
            $.ajax({
                url: END_POINT + API.updateName,
                method: 'POST',
                data: {
                    fname: fname.val(),
                    lname: lname.val(),
                },
                success: (res,textStatus,xhr) => {
                    checkAuthRes(xhr);
                    LOADING.reset($("#btn-update-profile"));
                    location.reload();
                },
                error: (res) => {
                    LOADING.reset($("#btn-update-profile"));
                }
            })
        };

        let addEmail = () => {
            let email = $("input[name='email']").val();
            $.ajax({
                url: END_POINT + API.addEmail,
                method: 'POST',
                data: {
                    email: email
                },
                success:(res,textStatus,xhr) => {
                    checkAuthRes(xhr)
                    $("input[name='add-email']").val('');
                    this.showDataLast();
                },
                error: (res) => {

                }
            });
        };

        let changePrimaryEmail = () => {
            let email = $("#select-email").val();
            $.ajax({
                url: END_POINT + API.changePrimaryEmail,
                method: 'PUT',
                data: {
                    email: email
                },
                success:(res,textStatus,xhr) => {
                    checkAuthRes(xhr)
                    this.showDataLast();
                },
                error: (res) => {
                    console.log(res);
                }
            });
        };

        let addPhone = () => {
            let phone = $("input[name='add-phone']").val();
            $.ajax({
                url: END_POINT + API.addPhone,
                method: 'POST',

                data: {
                    phone: phone
                },
                success:(res,textStatus,xhr) => {
                    checkAuthRes(xhr)
                    $("input[name='add-phone']").val('');
                    this.showDataLast();
                },
                error: (res) => {
                    console.log(res);
                }
            });
        };

        let changePrimaryPhone = () => {
            let phone = $("#select-phone").val();
            $.ajax({
                url: END_POINT + API.changePrimaryPhone,
                method: 'PUT',
                data: {
                    phone: phone
                },
                success:(res,textStatus,xhr) => {
                    checkAuthRes(xhr)
                    this.showDataLast();
                },
                error: (res) => {
                    console.log(res);
                }
            });
        };

        let createAddress = () => {
            let address_add = $(".address-add");
            
            if( accountData.address.length == 0){
                address_add.show();
            }

            $(".address-user").remove();
            accountData.address.map((_data,index) => {
                address_add.parent().append(`
                <div class="address address-user text-left">
                    <p>${_data.address_detail}</p>
                    <p>District : ${_data.district}</p>
                    <p>Amphure : ${_data.amphure}</p>
                    <p>Province : ${_data.province}</p>
                    <p>Zip code : ${_data.zip_code}</p>
                    <hr>
                    <div class="d-flex justify-content-end">
                        <i class="fas fa-edit mr-2 edit-address" index="${index}"></i> <i class="fas fa-trash-alt delete-address"></i>
                    </div>

                </div>`)
            })

            $(".edit-address").unbind().click(function(){
                $("#addAddress").attr("mode","edit");
                state.indexAddressSelected = $(this).attr('index');
                state.modeAddressModal = 'edit';
                $("#address_detail").val(accountData.address[state.indexAddressSelected].address_detail);
                $("#province").val(accountData.address[state.indexAddressSelected].province_id);
                $("#province").change();
                $("#addAddress").modal('show');
            });

            $(".delete-address").unbind().click(function(){
                swal({
                    title: "Are you sure",
                    text: `to delete this address?`,
                    icon: "warning",
                    buttons: true,
                    dangerMode: true,
                }).then((willDelete) => {
                    if (willDelete) {
                        
                    } else {
                        return;
                    }
                });
            });
        };

        this.initialAndRun = () => {
            this.showDataLast();
            bindElement();
        };

        this.showDataLast = () => {
            $.ajax({
                url: END_POINT + API.getAccount,
                success:(res,textStatus,xhr) => {
                    checkAuthRes(xhr)
                    accountData = res.data;
                    createEmailAndPhone();
                    createAddress();
                },
                error: (res) => {
                    console.log(res);
                }
            });
        };
    }
}


$(document).ready(function () {
    let account = new Account();
    account.initialAndRun();
});
