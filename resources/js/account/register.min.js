import {
    LOADING,
    ERROR_INPUT,
    addEventValidate,
    resetInputValidate,
    checkError
} from '../utility';


validate.validators.presence.message = "is required";

let validateInput = {
    register: {
        parent: "form#form_register",
        validate: {
            email: {
                presence: true,
                email: true
            },
            password: {
                presence: {
                    allowEmpty: false,
                },
                format: {
                    pattern: "[a-zA-Z0-9]+",
                    flags: "i",
                    message: "can only contain a-Z and 0-9"
                },
                length: {
                    minimum: 6,
                    message: "must be at least 6 characters"
                }
            },
            confirmPassword: {
                presence: {
                    allowEmpty: false,
                },
                format: {
                    pattern: "[a-zA-Z0-9]+",
                    flags: "i",
                    message: "can only contain a-Z and 0-9"
                },
                length: {
                    minimum: 6,
                    message: "must be at least 6 characters"
                },
                equality: {
                    attribute: "password",
                }
            },
            firstname: {
                presence: {
                    allowEmpty: false
                },
                length: {
                    maximum: 50,
                },
            },
            lastname: {
                presence: {
                    allowEmpty: false
                },
                length: {
                    maximum: 50,
                },
            },
            phone: {
                presence: {
                    allowEmpty: false
                },
                format: {
                    pattern: "[0-9]+",
                    flags: "i",
                    message: "can only contain 0-9"
                },
                length: {
                    minimum: 10,
                    maximum: 10,
                },
            },
            username: {
                presence: {
                    allowEmpty: false
                },
                length: {
                    maximum: 50,
                },
            },
        }
    },
    address: {
        parent: "form#form_register",
        validate: {
            address_detail: {
                presence: {
                    allowEmpty: false,
                }
            },
            province: {
                presence: {
                    allowEmpty: false,
                }
            },
            amphure: {
                presence: {
                    allowEmpty: false,
                }
            },
            district: {
                presence: {
                    allowEmpty: false,
                }
            },
            zip_code: {
                presence: {
                    allowEmpty: false,
                }
            },
        }
    }
}

class Register {
    constructor() {

        let provinces = null;
        let amphures = null;
        let districts = null;

        let createAccount = () => {

            if(checkError(validateInput.address) && document.querySelector('#checkbox_address').checked)
            {
                return;
            }
            else
            {
                resetInputValidate();
            }

            if(checkError(validateInput.register)) return;

            LOADING.set($("#btn_register"));

            $.ajax({
                url: END_POINT + 'account/register',
                method: 'POST',
                data: {
                    username: $('#accountname').val(),
                    fname: $('#fname').val(),
                    lname: $('#lname').val(),
                    email: $('#email').val(),
                    password: $('#password').val(),
                    phone: $('#phone').val(),
                    address_detail: $('#address_detail').val(),
                    province_id: $('#province').val(),
                    amphure_id: $('#amphure').val(),
                    district_id: $('#district').val(),
                    checkbox_address: document.querySelector('#checkbox_address').checked,
                },
                success: () => {
                    LOADING.reset($("#btn_register"));
                    swal({
                        title: "Create your account success !",
                        text: "Please verify your  email address and  phone number before login",
                        icon: "success",
                    }).then(() => {
                        window.location.href = 'Home';
                    })
                },
                error: (res) => {
                    console.log(res);
                    LOADING.reset($("#btn_register"));
                }
            })
        }

        let createSelectProvices = () => {
            let html = `<option value="">--Select province--</option>`;
            provinces.map(data => {
                html += `<option value="${data.province_id}">${data.name_th} ${data.name_en}</option>`
            })

            $("#province").html(html);
        }

        let getProvinces = () => {
            $.ajax({
                url:END_POINT + 'address/provinces',
                method: 'GET',
                success:(res) => {
                    provinces = res.data;
                   createSelectProvices(); 
                },
                error:(res) => {
                    console.log(res);
                }
             });
        }

        let createSelectAmphures = () => {
            let html = `<option value="">--Select amphure--</option>`;
            amphures.map(data => {
                html += `<option value="${data.amphure_id}">${data.name_th} ${data.name_en}</option>`
            })

            $("#amphure").html(html);
        }

        let getAmphuresByProvince = ($province_id) => {
            $.ajax({
                url:END_POINT + `address/amphures/province/${$province_id}`,
                method: 'GET',
                success:(res) => {
                    amphures = res.data;
                    createSelectAmphures(); 
                },
                error:(res) => {
                    console.log(res);
                }
             });
        }

        let createSelectdistrict = () => {
            let html = `<option value="">--Select district--</option>`;
            districts.map(data => {
                html += `<option value="${data.district_id}">${data.name_th} ${data.name_en}</option>`
            })

            $("#district").html(html);
        }

        let getDistrictsByAmphures = (province_id,amphure_id)=>{
            $.ajax({
                url:END_POINT + `address/districts/province/${province_id}/amphure/${amphure_id}`,
                method: 'GET',
                success:(res) => {
                    districts = res.data;
                    createSelectdistrict(); 
                },
                error:(res) => {
                    console.log(res);
                }
             });
        }

        let bindElement = () => {
            $("#btn_register").unbind().click(function () {
                event.preventDefault();
                createAccount();
            });

            $("#province").change(function(){
                $("#zip_code").val('')
                if($(this).val() != ""){
                    $("#district").html(`<option value="">--Select district--</option>`);
                    getAmphuresByProvince($(this).val());
                }
                else{
                    $("#district").html(`<option value="">--Select district--</option>`);
                    $("#amphure").html(`<option value="">--Select amphure--</option>`);
                }
            });

            $("#amphure").change(function(){
                $("#zip_code").val('')
                if($(this).val() != ""){
                    getDistrictsByAmphures($("#province").val(),$(this).val());
                }
                else{
                    $("#district").html(`<option value="">--Select district--</option>`);
                }
            });

            $("#district").change(function(){
                $("#zip_code").val('')
                if($(this).val() != ""){
                    let district = districts.filter(data => {
                        return data.district_id === $(this).val();
                    });
                    console.log(district);
                    $("#zip_code").val(district[0].zip_code);
                }
                else{
                    $("#zip_code").val('')
                }
            });

            addEventValidate(validateInput.register);
            addEventValidate(validateInput.address);

            getProvinces();
        }

        this.initAndRun = () => {
            bindElement();
        }
    }
}


$(document).ready(function () {
    let register = new Register();
    register.initAndRun();
    
    $("#model_body_register").on("hidden.bs.modal", function () {
        window.location.href = END_POINT_WED + "/Home";
    });

    $('#model_body_register').modal({show: true, backdrop: false});
});
