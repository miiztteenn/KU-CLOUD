import {
    LOADING,
    ERROR_INPUT,
    addEventValidate,
    resetInputValidate,
    checkError
} from '../utility';

const END_POINT = 'http://localhost:8000/api/';

validate.validators.presence.message = "is required";

let validateInput = {
    register: {
        parent: "form#form_register",
        validate: {
            email: {
                presence: true,
                email: true
            },
            password: {
                presence: {
                    allowEmpty: false,
                },
                format: {
                    pattern: "[a-zA-Z0-9]+",
                    flags: "i",
                    message: "can only contain a-Z and 0-9"
                },
                length: {
                    minimum: 6,
                    message: "must be at least 6 characters"
                }
            },
            confirmPassword: {
                presence: {
                    allowEmpty: false,
                },
                format: {
                    pattern: "[a-zA-Z0-9]+",
                    flags: "i",
                    message: "can only contain a-Z and 0-9"
                },
                length: {
                    minimum: 6,
                    message: "must be at least 6 characters"
                },
                equality: {
                    attribute: "password",
                }
            },
            firstname: {
                presence: {
                    allowEmpty: false
                },
                length: {
                    maximum: 50,
                },
            },
            lastname: {
                presence: {
                    allowEmpty: false
                },
                length: {
                    maximum: 50,
                },
            },
            phone: {
                presence: {
                    allowEmpty: false
                },
                format: {
                    pattern: "[0-9]+",
                    flags: "i",
                    message: "can only contain 0-9"
                },
                length: {
                    minimum: 10,
                    maximum: 10,
                },
            }
        }
    }
}

class Register {
    constructor() {

        let createAccount = () => {
            if (checkError(validateInput.register)) return;
            LOADING.set($("#btn_register"));
            $.ajax({
                url: END_POINT + 'account/register',
                method: 'POST',
                data: {
                    fname: $('#fname').val(),
                    lname: $('#lname').val(),
                    email: $('#email').val(),
                    password: $('#password').val(),
                    phone: $('#phone').val(),
                },
                success: () => {
                    LOADING.reset($("#btn_register"));
                    swal({
                        title: "Create your account success !",
                        text: "Please verify your  email address and  phone number before login",
                        icon: "success",
                    }).then(() => {
                        window.location.href = 'Auth';
                    })
                },
                error: (res) => {
                    console.log(res);
                    LOADING.reset($("#btn_register"));
                }
            })
        }
        let bindElement = () => {
            $("#btn_register").unbind().click(function () {
                event.preventDefault();
                createAccount();
            });

            addEventValidate(validateInput.register);
        }

        this.initAndRun = () => {
            bindElement();
        }
    }
}


$(document).ready(function () {
    let register = new Register();
    register.initAndRun();
});
