import WidgetObject from './WidgetObject.min.js'
import DataSource from './DataSource.min.js'
import objectPath from 'object-path';
import chart from 'chartjs-plugin-zoom';
import {
  getFlatObject
} from '../../utility.js';
import { LOADING } from '../../utility';

const END_POINT       = 'http://localhost:8000/api/';
var path              = $("#pathImg").val();
var infoID            = $("#infoID").val();
var infoName          = $("#infoName").val();
var CircularJSON      = window.CircularJSON;
var listInfoDatasource    = [];
let widgetObjectList  = [];

var yearlyDataTest = {
  2016: {
    RelativeHumidity: "50",
    VaporPressure: "40",
    LandVisibility: "30",
    WindDirection: "20",
    WindSpeed: "10",
    Rainfall: "5"
  },
  2017: {
    RelativeHumidity: "100",
    VaporPressure: "80",
    LandVisibility: "70",
    WindDirection: "10",
    WindSpeed: "10",
    Rainfall: "50"
  },
  2018: {
    RelativeHumidity: "90",
    VaporPressure: "85",
    LandVisibility: "45",
    WindDirection: "24",
    WindSpeed: "55",
    Rainfall: "8"
  },
};


var timeSeriesTest = {
  dataTimeSeries: [
    {    
      RelativeHumidity: "90",
      VaporPressure: "85",
      LandVisibility: "45",
      WindDirection: "24",
      WindSpeed: "55",
      Rainfall: "8",
      Date: "12/02/2016"
    },
    {    
      RelativeHumidity: "100",
      VaporPressure: "80",
      LandVisibility: "70",
      WindDirection: "10",
      WindSpeed: "10",
      Rainfall: "50",
      Date: "13/04/2017"
    },
    {    
      RelativeHumidity: "50",
      VaporPressure: "40",
      LandVisibility: "30",
      WindDirection: "20",
      WindSpeed: "10",
      Rainfall: "5",
      Date: "14/06/2018"
    },
  ],
};

class Workspace {
  constructor() {
    /* Initial Function */
    this.initialAndRun = () => {
      $("#btn-add-datasource").unbind().click(function () {
        var datasourceModel = new DataSource();
        datasourceModel.DataSourceModel(infoID);
      });

      $("#btnGraph").unbind().click(function () {
        graphMenu();
        console.log("test");
      });

      $("#btnMap").unbind().click(function () {
        mapMenu();
      });

      $("#btnFont").unbind().click(function () {
        fontMenu();
      });

      $("#btnImage").unbind().click(function () {
        imageMenu();
      });

      $("#btnShapes").unbind().click(function () {
        shapesMenu();
      });

      $("#btn_save").unbind().click(function () {
        /* Update position widget data */
        for (var i = 0; i < widgetObjectList.length; i++) {
          if (widgetObjectList[i].type == "line" || widgetObjectList[i].type == "bar" || widgetObjectList[i].type == "pie" || widgetObjectList[i].type == "radar") {
            var graph = $("#canvas_" + widgetObjectList[i].id).data('graph');
            widgetObjectList[i].canvasTag = document.getElementById("div_canvas_" + widgetObjectList[i].id).outerHTML;
            console.log(graph.data);
            console.log(graph.options);
            widgetObjectList[i].chartData = graph.data;
            widgetObjectList[i].chartOption = graph.options;
            console.log(widgetObjectList[i].chartData);
            console.log(widgetObjectList[i].chartOption);
          }
          else if (widgetObjectList[i].type == "map") {
            widgetObjectList[i].mapTag = document.getElementById("div_map_" + widgetObjectList[i].id).outerHTML;
          }
          else if (widgetObjectList[i].type == "head") {
            widgetObjectList[i].spanTag = document.getElementById("span_" + widgetObjectList[i].id).outerHTML;
          }
          else if (widgetObjectList[i].type == "table") {
            widgetObjectList[i].tableTag = document.getElementById("table_" + widgetObjectList[i].id).outerHTML;
          }
          else if (widgetObjectList[i].type == "image") {
            widgetObjectList[i].divImgTag = document.getElementById("div_" + widgetObjectList[i].id).outerHTML;
          }
          else if (widgetObjectList[i].type == "square" || widgetObjectList[i].type == "circle" || widgetObjectList[i].type == "string") {
            widgetObjectList[i].divTag = document.getElementById("div_" + widgetObjectList[i].id).outerHTML;
          }
        }

        /* Save info data to database  */
        $.ajax({
          url: END_POINT + 'infographic/updateInfoData',
          method: 'PUT',
          data: {
              info_id:   infoID,
              info_data: CircularJSON.stringify(widgetObjectList),
          },
          success: (res) => {
            alert("success");
          },
          error: (res) => {
            alert("error");
          }
        }); //Ajax
      }); //Btn save

      $("#btn_fullscreen").unbind().click(function () {
        var popup = window.open();
        popup.document.write("<h1 id='loading'>Loading...</h1>");

        //Set object for fullscreen
        $(".sPosition").removeClass("fCorner");
        $(".propertyMenu-2").html(``);

        //Generate to image
        html2canvas(document.querySelector("#workspace")).then(canvas => {
          var myImage = canvas.toDataURL("image/png");
          var img     = '<img src="' + myImage + '">';

          popup.document.write(img);
          popup.document.title = "Preview";
          popup.document.getElementById("loading").remove();
        }); //Html2canvas
      }); //Btn fullscreen

      $("#btn_download_list a").unbind().click(function () {
        var type = $(this).attr('valuetype');
        var popup = window.open();
        popup.document.write("<h1>Please wait for download...</h1>");

        //Set object for fullscreen
        $(".sPosition").removeClass("fCorner");
        $(".propertyMenu-2").html(``);

        //Generate to image
        html2canvas(document.querySelector("#workspace")).then(canvas => {
          popup.close();
          var myLinkImage = canvas.toDataURL("image/png");

          if(type == "pdf")
          {
            var pdf         = new jsPDF();
            var width       = pdf.internal.pageSize.getWidth();
            var height      = pdf.internal.pageSize.getHeight();
  
            pdf.addImage(myLinkImage, 'PNG', 0, 0, width, height);
            pdf.save(infoName + ".pdf");
          }
          else if(type == "image")
          {
            var a = document.createElement("a");
            a.href = myLinkImage;
            a.setAttribute("download", infoName + ".png");
            var b = document.createEvent("MouseEvents");
            b.initEvent("click", false, true);
            a.dispatchEvent(b);
          }

        }); //Html2canvas
      }); //Btn download

    }; // Initial and run

    /* Load widget data from database */
    this.loadWidgetData = (object) => {
      for (var i = 0; i < object.length; i++) {
        if (object[i].type == "line" || object[i].type == "bar" || object[i].type == "pie" || object[i].type == "radar") {
          var Graphwidget = new Graph();
          Graphwidget.loadGraphData(object[i].id, object[i].canvasTag, object[i].chartData, object[i].chartOption, object[i].type);
        }
        else if (object[i].type == "map") {
          var mapwidget = new Map();
          mapwidget.loadMapWidget(object[i].id, object[i].mapTag);
        }
        else if (object[i].type == "head") {
          var fontHead = new Font();
          fontHead.loadHeadGraph(object[i].id, object[i].spanTag);
        }
        else if (object[i].type == "table") {
          var fontHead = new Font();
          fontHead.loadTableWidget(object[i].id, object[i].tableTag);
        }
        else if (object[i].type == "image") {
          var imagewidget = new Imagesy();
          imagewidget.loadImageWidget(object[i].id, object[i].divImgTag);
        }
        else if (object[i].type == "square" || object[i].type == "circle" || object[i].type == "string") {
          var shapewidget = new Shape();
          shapewidget.loadShapeWidget(object[i].id, object[i].divTag, object[i].type);
        }
      }
    } // Load widget data

    /* Initial Element Action Function */
    var graphMenu = () => {
      if ($("#btnGraph").hasClass("actives")) {
        UnActive("btnGraph");
      }
      else {
        SetActive("btnGraph");

        $("#selectMenu").html(`
            <div class="row select-menu-2-context">
              <span>Add graph</span>
            </div>
            <div class="row select-menu-2-paper">
              <div id="g1" class="row select-menu-2-block">
                <img src="${path}/graph/line.png" class="image-back" style="width:60%; height:60%;"/>
                <div class="row select-menu-2-title"><span>Line</span></div>
                <div class="middle-center"><div class="text-popup">Insert</div></div>
              </div>
              <div id="g2" class="row select-menu-2-block">
                <img src="${path}/graph/bar.png" class="image-back" style="width:60%; height:60%;"/>
                <div class="row select-menu-2-title"><span>Bar</span></div>
                <div class="middle-center"><div class="text-popup">Insert</div></div>
              </div>
              <div id="g3" class="row select-menu-2-block">
                <img  src="${path}/graph/pie.png" class="image-back" style="width:60%; height:60%;"/>
                <div class="row select-menu-2-title"><span>Pie</span></div>
                <div class="middle-center"><div class="text-popup">Insert</div></div>
              </div>
              <div id="g4" class="row select-menu-2-block">
                <img  src="${path}/graph/radar.png" class="image-back" style="width:60%; height:60%;"/>
                <div class="row select-menu-2-title"><span>Radar</span></div>
                <div class="middle-center"><div class="text-popup">Insert</div></div>
              </div>
            </div>`);

        $("#g1").unbind().click(function () {
          var lineGraph = new Graph();
          lineGraph.createLineGraph();
        });

        $("#g2").unbind().click(function () {
          var barGraph = new Graph();
          barGraph.createBarGraph();
        });

        $("#g3").unbind().click(function () {
          var pieGraph = new Graph();
          pieGraph.createPieGraph();
        });

        $("#g4").unbind().click(function () {
          var radarGraph = new Graph();
          radarGraph.createRadarGraph();
        });
      }
    }

    var mapMenu = () => {
      if ($("#btnMap").hasClass("actives")) {
        UnActive("btnMap");
      }
      else {
        SetActive("btnMap");

        $("#selectMenu").html(`
            <div class="row select-menu-2-context">
              <span>Add map</span>
            </div>
            <div class="row select-menu-2-paper">
              <div id="m1" class="row select-menu-2-block">
                <img src="${path}/map/map.png" class="image-back" style="width:60%; height:60%;"/>
                <div class="row select-menu-2-title"><span>Thailand</span></div>
                <div class="middle-center"><div class="text-popup">Insert</div></div>
              </div>
            </div>`);

        $("#m1").unbind().click(function () {
          var mapWidget = new Map();
          mapWidget.createMapWidget();
        });

      }
    }

    var fontMenu = () => {
      if ($("#btnFont").hasClass("actives")) {
        UnActive("btnFont");
      }
      else {
        SetActive("btnFont");

        $("#selectMenu").html(`
            <div class="row select-menu-2-context">
              <span>Add text</span>
            </div>
            <div class="row select-menu-2-paper">
              <div id="f1" class="row select-menu-2-block">
                <img src="${path}/font/head.png" class="image-back" style="width:60%; height:60%;"/>
                <div class="row select-menu-2-title"><span>Title</span></div>
                <div class="middle-center"><div class="text-popup">Insert</div></div>
              </div>
              <div id="f2" class="row select-menu-2-block">
                <img src="${path}/font/subtitle.png" class="image-back" style="width:60%; height:60%;"/>
                <div class="row select-menu-2-title"><span>Subtitle</span></div>
                <div class="middle-center"><div class="text-popup">Insert</div></div>
              </div>
              <div id="f3" class="row select-menu-2-block">
                <img src="${path}/font/table.png" class="image-back" style="width:60%; height:60%;"/>
                <div class="row select-menu-2-title"><span>Table</span></div>
                <div class="middle-center"><div class="text-popup">Insert</div></div>
              </div>
            </div>`);

        $("#f1").unbind().click(function () {
          var fontHead = new Font();
          fontHead.createHeadGraph("title");
        });

        $("#f2").unbind().click(function () {
          var fontHead = new Font();
          fontHead.createHeadGraph("subtitle");
        });

        $("#f3").unbind().click(function () {
          var tableGraph = new Font();
          tableGraph.createTableGraph();
        });
      }
    }

    var imageMenu = () => {
      if ($("#btnImage").hasClass("actives")) {
        UnActive("btnImage");
      }
      else {
        SetActive("btnImage");

        $("#selectMenu").html(`
            <div class="row select-menu-2-context">
              <span>Add image</span>
            </div>
            <div class="row select-menu-2-paper">
              <div id="i1" class="row select-menu-2-block">
                <img src="${path}/image/browse.png" class="image-back" style="width:60%; height:60%;"/>
                <div class="row select-menu-2-title"><span>Browse</span></div>
                <div class="middle-center"><div class="text-popup">Insert</div></div>
              </div>
              <input type="file" id="inputfile_image" style="display:none;" />
            </div>`);

        $("#i1").unbind().click(function () {
          var imageWidget = new Imagesy();
          
          $("#inputfile_image").click();

          $('#inputfile_image').change(function () {
            var reader = new FileReader();
            reader.readAsDataURL($(this)[0].files[0]);
            reader.onload = function (e) 
            {
              imageWidget.createImageWidget(e.target.result);
              /*Reset button */
              $("#btnImage").click();
              $("#btnImage").click();
            }
          });
        });
      }
    }

    var shapesMenu = () => {
      if ($("#btnShapes").hasClass("actives")) {
        UnActive("btnShapes");
      }
      else {
        SetActive("btnShapes");

        $("#selectMenu").html(`
            <div class="row select-menu-2-context">
              <span>Add text</span>
            </div>
            <div class="row select-menu-2-paper">
              <div id="s1" class="row select-menu-2-block">
                <img src="${path}/shape/square.png" class="image-back" style="width:60%; height:60%;"/>
                <div class="row select-menu-2-title"><span>Square</span></div>
                <div class="middle-center"><div class="text-popup">Insert</div></div>
              </div>
              <div id="s2" class="row select-menu-2-block">
                <img src="${path}/shape/circle.png" class="image-back" style="width:60%; height:60%;"/>
                <div class="row select-menu-2-title"><span>Circle</span></div>
                <div class="middle-center"><div class="text-popup">Insert</div></div>
              </div>
              <div id="s3" class="row select-menu-2-block">
                <img src="${path}/shape/string.png" class="image-back" style="width:60%; height:60%;"/>
                <div class="row select-menu-2-title"><span>String</span></div>
                <div class="middle-center"><div class="text-popup">Insert</div></div>
              </div>
            </div>`);

        $("#s1").unbind().click(function () {
          var shapeWidget = new Shape();
          shapeWidget.createShapeWidget("square");
        });

        $("#s2").unbind().click(function () {
          var shapeWidget = new Shape();
          shapeWidget.createShapeWidget("circle");
        });

        $("#s3").unbind().click(function () {
          var shapeWidget = new Shape();
          shapeWidget.createShapeWidget("string");
        });
      }
    }

    /* Custom Function */
    var UnActive = (id) => {
      $("#" + id).removeClass("actives");
      $("#selectMenu").html(``);
      $("#selectMenu").hide();
    }

    var SetActive = (id) => {
      $("#selectMenu").show();
      $(".vertical-menu").find("a").removeClass("actives");
      $("#" + id).addClass("actives");
    }

  } // Constructor
} // Workspace

class Widget {
  constructor() {
    /* Create freetranform */
    this.createWidget = (id, typeid) => {
      var widgetObject = interact('#' + typeid + id)
        .draggable({
          autoScroll: true,
          inertia: true,
          restrict: {
            restriction: 'parent',
            endOnly: true,
            elementRect: { top: 0, left: 0, bottom: 1, right: 1 }
          },
        })
        .resizable({
          // resize from all edges and corners
          edges: {left: true, right: true, bottom: true, top: true},

          // keep the edges inside the parent
          restrictEdges: {
            outer: 'parent',
            endOnly: true,
          },

          // minimum size
          restrictSize: {
            min: { width: 100, height: 50 },
          },

          inertia: true,
        })
        .on('doubletap', function () {
          $(".sPosition").removeClass("fCorner");

          /* Clear property */
          $(".propertyMenu-2").html(``);

        })
        .on('resizemove', function (event) {
          changefocus(id, typeid);
          var target = event.target,
            x = (parseFloat(target.getAttribute('data-x')) || 0),
            y = (parseFloat(target.getAttribute('data-y')) || 0),
            z = (parseFloat(target.getAttribute('data-z')) || 0);

          // update the element's style
          target.style.width = event.rect.width + 'px';
          target.style.height = event.rect.height + 'px';

          //console.log(target);
          //$(target).attr('width', event.rect.width);
          //$(target).attr('height', event.rect.height);

          // translate when resizing from top or left edges
          x += event.deltaRect.left;
          y += event.deltaRect.top;

          target.style.webkitTransform = target.style.transform =
            'translate(' + x + 'px,' + y + 'px) rotate(' + z + 'deg)';

          target.setAttribute('data-x', x);
          target.setAttribute('data-y', y);
          target.setAttribute('data-z', z);

          $("#width_" + id).val(Math.round(event.rect.width));
          $("#height_" + id).val(Math.round(event.rect.height));
          $("#width_" + id).change();
          $("#height_" + id).change();
        });

      return widgetObject;
    }

    /* Custom function */
    let changefocus = (id, typeid) => {
      $(".sPosition").removeClass("fCorner");
      $('#' + typeid + id).addClass("fCorner");
    }

    this.clearfocus = () => {
      $(".sPosition").removeClass("fCorner");
    }
  }
}

/* Graph */
class Graph extends Widget {
  constructor() {
    super();
    this.createLineGraph = () => {
      var id = Math.floor(100000 + Math.random() * 900000);
      this.clearfocus();

      $("#workspace").append(`<div id="div_canvas_${id}" class="sPosition fCorner"><canvas id="canvas_${id}" state-mode="classic"/></div>`);

      var speedData = {
        labels: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
        datasets: [{
          label: "Demo Data 1",
          data: [0, 59, 75, 20, 20, 55, 40],
          backgroundColor: 'rgba(255, 255, 255, 0)',
          borderColor: '#05acd3'
        }, {
          label: "Demo Data 2",
          data: [0, 29, 25, 20, 20, 25, 20],
          backgroundColor: 'rgba(255, 255, 255, 0)',
          borderColor: '#00ce68'
        }]
      };

      var chartOptions = {
        responsive: true,
        maintainAspectRatio: false,
        legend: {
          display: true,
          position: 'top',
          labels: {
            boxWidth: 80,
            fontColor: 'black'
          }
        },
        scales: {
          yAxes: [{
            scaleLabel: {
              display: true,
              labelString: 'Y Label'
            }
          }],
          xAxes: [{
            scaleLabel: {
              display: true,
              labelString: 'X Label'
            }
          }],         
        },
      };

      let ctx = $("#canvas_" + id);
      var myChart = new Chart(ctx, {
        type: 'line',
        data: speedData,
        options: chartOptions
      });

      ctx.data("graph", myChart);
      
      /* Clear other property */
      $(".propertyMenu-2").html(``);

      var property = new ContentProperty();
      property.createGraphProp(id, myChart, "#div_canvas_" + id, "line");

      /* Click each widget event */
      var widgetObject = this.createWidget(id, "div_canvas_");
      widgetObject.on('tap', function (event) {
        /* Change focus */
        $(".sPosition").removeClass("fCorner");
        $("#div_canvas_" + id).addClass("fCorner");

        /* Clear other property */
        $(".propertyMenu-2").html(``);

        var property = new ContentProperty();
        property.createGraphProp(id, myChart, "#div_canvas_" + id, "line");
      })
        .on('dragmove', function (event) {
          /* Change focus */
          $(".sPosition").removeClass("fCorner");
          $("#div_canvas_" + id).addClass("fCorner");

          var target = event.target,
            // keep the dragged position in the data-x/data-y attributes
            x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx,
            y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy,
            z = (parseFloat(target.getAttribute('data-z')) || 0);

          // translate the element
          target.style.webkitTransform =
            target.style.transform =
            'translate(' + x + 'px, ' + y + 'px) rotate(' + z + 'deg)';

          // update the posiion attributes
          target.setAttribute('data-x', x);
          target.setAttribute('data-y', y);
          target.setAttribute('data-z', z);

          /* Clear other property */
          $(".propertyMenu-2").html(``);

          var property = new ContentProperty();
          property.createGraphProp(id, myChart, "#div_canvas_" + id, "line");
        })

      /* Save widget */
      let saveObject = new WidgetObject();
      console.log(myChart.options);
      saveObject.WidgetGraphObject(id, null, null, null, "line");
      console.log(saveObject.chartOption);
      widgetObjectList.push(saveObject);
      widgetObjectList = deepCopy(widgetObjectList);    
      console.log(widgetObjectList[0].chartOption);
    }

    this.createBarGraph = () => {
      var id = Math.floor(100000 + Math.random() * 900000);
      this.clearfocus();

      $("#workspace").append(`<div id="div_canvas_${id}" class="sPosition fCorner"><canvas id="canvas_${id}" state-mode="classic"/></div>`);

      var speedData = {
        labels: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
        datasets: [{
          label: "Demo Data 1",
          data: [0, 59, 75, 20, 20, 55, 40],
          backgroundColor: '#05acd3'
        }, {
          label: "Demo Data 2",
          data: [0, 29, 25, 20, 20, 25, 20],
          backgroundColor: '#00ce68'
        }]
      };

      var chartOptions = {
        responsive: true,
        maintainAspectRatio: false,
        legend: {
          display: true,
          position: 'top',
          labels: {
            boxWidth: 80,
            fontColor: 'black'
          }
        },
        scales: {
          yAxes: [{
            scaleLabel: {
              display: true,
              labelString: 'Y Label'
            }
          }],
          xAxes: [{
            scaleLabel: {
              display: true,
              labelString: 'X Label'
            }
          }],
        }
      };

      let ctx = $("#canvas_" + id);
      var myChart = new Chart(ctx, {
        type: 'bar',
        data: speedData,
        options: chartOptions
      });

      ctx.data("graph", myChart);

      /* Clear other property */
      $(".propertyMenu-2").html(``);

      var property = new ContentProperty();
      property.createGraphProp(id, myChart, "#div_canvas_" + id, "bar");

      /* Click each widget event */
      var widgetObject = this.createWidget(id, "div_canvas_");
      widgetObject.on('tap', function (event) {
        /* Change focus */
        $(".sPosition").removeClass("fCorner");
        $("#div_canvas_" + id).addClass("fCorner");

        /* Clear other property */
        $(".propertyMenu-2").html(``);

        var property = new ContentProperty();
        property.createGraphProp(id, myChart, "#div_canvas_" + id, "bar");
      })
      .on('dragmove', function (event) {
        /* Change focus */
        $(".sPosition").removeClass("fCorner");
        $("#div_canvas_" + id).addClass("fCorner");

        var target = event.target,
        // keep the dragged position in the data-x/data-y attributes
        x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx,
        y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy,
        z = (parseFloat(target.getAttribute('data-z')) || 0);

      // translate the element
      target.style.webkitTransform =
        target.style.transform =
        'translate(' + x + 'px, ' + y + 'px) rotate(' + z + 'deg)';

      // update the posiion attributes
      target.setAttribute('data-x', x);
      target.setAttribute('data-y', y);
      target.setAttribute('data-z', z);

        /* Clear other property */
        $(".propertyMenu-2").html(``);

        var property = new ContentProperty();
        property.createGraphProp(id, myChart, "#div_canvas_" + id, "bar");
      })

      /* Save widget */
      let saveObject = new WidgetObject();
      console.log(myChart.options);
      saveObject.WidgetGraphObject(id, null, myChart.data, myChart.options, "bar");
      console.log(saveObject.chartOption);
      widgetObjectList.push(saveObject);
      widgetObjectList = deepCopy(widgetObjectList);    
      console.log(widgetObjectList[0].chartOption);
    }

    this.createPieGraph = () => {
      var id = Math.floor(100000 + Math.random() * 900000);
      this.clearfocus();

      $("#workspace").append(`<div id="div_canvas_${id}" class="sPosition fCorner"><canvas id="canvas_${id}" state-mode="classic"/></div>`);

      var speedData = {
        labels: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
        datasets: [{
          label: "Demo Data 1",
          data: [0, 59, 75, 20, 20, 55, 40],
          backgroundColor: '#05acd3'
        }, {
          label: "Demo Data 2",
          data: [0, 29, 25, 20, 20, 25, 20],
          backgroundColor: '#00ce68'
        }]
      };

      var chartOptions = {
        responsive: true,
        maintainAspectRatio: false,
        legend: {
          display: true,
          position: 'top',
          labels: {
            boxWidth: 80,
            fontColor: 'black'
          }
        },
        scales: {
          yAxes: [{
            scaleLabel: {
              display: true,
              labelString: 'Y Label'
            }
          }],
          xAxes: [{
            scaleLabel: {
              display: true,
              labelString: 'X Label'
            }
          }],
        }
      };

      let ctx = $("#canvas_" + id);
      var myChart = new Chart(ctx, {
        type: 'pie',
        data: speedData,
        options: chartOptions
      });

      ctx.data("graph", myChart);

      /* Clear other property */
      $(".propertyMenu-2").html(``);

      var property = new ContentProperty();
      property.createGraphProp(id, myChart, "#div_canvas_" + id, "pie");

      /* Click each widget event */
      var widgetObject = this.createWidget(id, "div_canvas_");
      widgetObject.on('tap', function (event) {
        /* Change focus */
        $(".sPosition").removeClass("fCorner");
        $("#div_canvas_" + id).addClass("fCorner");

        /* Clear other property */
        $(".propertyMenu-2").html(``);

        var property = new ContentProperty();
        property.createGraphProp(id, myChart, "#div_canvas_" + id, "pie");
      })
      .on('dragmove', function (event) {
        /* Change focus */
        $(".sPosition").removeClass("fCorner");
        $("#div_canvas_" + id).addClass("fCorner");

        var target = event.target,
        // keep the dragged position in the data-x/data-y attributes
        x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx,
        y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy,
        z = (parseFloat(target.getAttribute('data-z')) || 0);

      // translate the element
      target.style.webkitTransform =
        target.style.transform =
        'translate(' + x + 'px, ' + y + 'px) rotate(' + z + 'deg)';

      // update the posiion attributes
      target.setAttribute('data-x', x);
      target.setAttribute('data-y', y);
      target.setAttribute('data-z', z);

        /* Clear other property */
        $(".propertyMenu-2").html(``);

        var property = new ContentProperty();
        property.createGraphProp(id, myChart, "#div_canvas_" + id, "pie");
      })

      /* Save widget */
      let saveObject = new WidgetObject();
      console.log(myChart.options);
      saveObject.WidgetGraphObject(id, null, myChart.data, myChart.options, "pie");
      console.log(saveObject.chartOption);
      widgetObjectList.push(saveObject);
      widgetObjectList = deepCopy(widgetObjectList);    
      console.log(widgetObjectList[0].chartOption);
    }

    this.createRadarGraph = () => {
      var id = Math.floor(100000 + Math.random() * 900000);
      this.clearfocus();

      $("#workspace").append(`<div id="div_canvas_${id}" class="sPosition fCorner"><canvas id="canvas_${id}" state-mode="classic"/></div>`);

      var speedData = {
        labels: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
        datasets: [{
          label: "Demo Data 1",
          data: [0, 59, 75, 20, 20, 55, 40],
          backgroundColor: 'rgba(255, 255, 255, 0)',
          borderColor: '#05acd3'
        }, {
          label: "Demo Data 2",
          data: [0, 29, 25, 20, 20, 25, 20],
          backgroundColor: 'rgba(255, 255, 255, 0)',
          borderColor: '#00ce68'
        }]
      };

      var chartOptions = {
        responsive: true,
        maintainAspectRatio: false,
        legend: {
          display: true,
          position: 'top',
          labels: {
            boxWidth: 80,
            fontColor: 'black'
          }
        },
        scales: {
          yAxes: [{
            scaleLabel: {
              display: true,
              labelString: 'Y Label'
            }
          }],
          xAxes: [{
            scaleLabel: {
              display: true,
              labelString: 'X Label'
            }
          }],
        }
      };

      let ctx = $("#canvas_" + id);
      var myChart = new Chart(ctx, {
        type: 'radar',
        data: speedData,
        options: chartOptions
      });

      ctx.data("graph", myChart);
      
      /* Clear other property */
      $(".propertyMenu-2").html(``);

      var property = new ContentProperty();
      property.createGraphProp(id, myChart, "#div_canvas_" + id, "radar");

      /* Click each widget event */
      var widgetObject = this.createWidget(id, "div_canvas_");
      widgetObject.on('tap', function (event) {
        /* Change focus */
        $(".sPosition").removeClass("fCorner");
        $("#div_canvas_" + id).addClass("fCorner");

        /* Clear other property */
        $(".propertyMenu-2").html(``);

        var property = new ContentProperty();
        property.createGraphProp(id, myChart, "#div_canvas_" + id, "radar");
      })
      .on('dragmove', function (event) {
        /* Change focus */
        $(".sPosition").removeClass("fCorner");
        $("#div_canvas_" + id).addClass("fCorner");

        var target = event.target,
        // keep the dragged position in the data-x/data-y attributes
        x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx,
        y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy,
        z = (parseFloat(target.getAttribute('data-z')) || 0);

      // translate the element
      target.style.webkitTransform =
        target.style.transform =
        'translate(' + x + 'px, ' + y + 'px) rotate(' + z + 'deg)';

      // update the posiion attributes
      target.setAttribute('data-x', x);
      target.setAttribute('data-y', y);
      target.setAttribute('data-z', z);

        /* Clear other property */
        $(".propertyMenu-2").html(``);

        var property = new ContentProperty();
        property.createGraphProp(id, myChart, "#div_canvas_" + id, "radar");
      })

      /* Save widget */
      let saveObject = new WidgetObject();
      console.log(myChart.options);
      saveObject.WidgetGraphObject(id, null, myChart.data, myChart.options, "radar");
      console.log(saveObject.chartOption);
      widgetObjectList.push(saveObject);
      widgetObjectList = deepCopy(widgetObjectList);    
      console.log(widgetObjectList[0].chartOption);
    }

    this.loadGraphData = (id, canvasTag, chartData, chartOptions, chartType) => {
      this.clearfocus();
      $("#workspace").append(canvasTag);

      let ctx = $("#canvas_" + id);
      var myChart2 = new Chart(ctx, {
        type: chartType,
        options: chartOptions
      });

      addLabel(myChart2, chartData.labels);
      addDatasets(myChart2, chartData.datasets);

      ctx.data("graph", myChart2);

      /* Clear other property */
      $(".propertyMenu-2").html(``);
      this.clearfocus();

      /* Click each widget event */
      var widgetObject = this.createWidget(id, "div_canvas_");
      widgetObject.on('tap', function (event) {
        /* Change focus */
        $(".sPosition").removeClass("fCorner");
        $("#div_canvas_" + id).addClass("fCorner");

        /* Clear other property */
        $(".propertyMenu-2").html(``);

        var property = new ContentProperty();
        property.createGraphProp(id, myChart2, "#div_canvas_" + id, chartType);
      })
        .on('dragmove', function (event) {
          /* Change focus */
          $(".sPosition").removeClass("fCorner");
          $("#div_canvas_" + id).addClass("fCorner");

          var target = event.target,
          // keep the dragged position in the data-x/data-y attributes
          x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx,
          y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy,
          z = (parseFloat(target.getAttribute('data-z')) || 0);

        // translate the element
        target.style.webkitTransform =
          target.style.transform =
          'translate(' + x + 'px, ' + y + 'px) rotate(' + z + 'deg)';

        // update the posiion attributes
        target.setAttribute('data-x', x);
        target.setAttribute('data-y', y);
        target.setAttribute('data-z', z);

          /* Clear other property */
          $(".propertyMenu-2").html(``);

          var property = new ContentProperty();
          property.createGraphProp(id, myChart2, "#div_canvas_" + id, chartType);
        })

      /* Save widget */
      let saveObject = new WidgetObject();
      saveObject.WidgetGraphObject(id, null, myChart2.data, myChart2.options, chartType);
      widgetObjectList.push(saveObject);
      widgetObjectList = deepCopy(widgetObjectList);    
    }

    let addLabel = (chart, labels) => {
      for (var i = 0; i < labels.length; i++) {
        chart.data.labels.push(labels[i]);
      }
      chart.update();
    }

    let addDatasets = (chart, dataSets) => {
      for (var i = 0; i < dataSets.length; i++) {
        var newData =
        {
          label: dataSets[i].label,
          data: dataSets[i].data,
          backgroundColor: dataSets[i].backgroundColor,
          borderColor: dataSets[i].borderColor
        };

        chart.data.datasets.push(newData);
      }
      chart.update();
    }
  }
} //Widget class

class Map extends Widget
{
  constructor()
  {
    super();
    this.createMapWidget = () => 
    {
      var id = Math.floor(100000 + Math.random() * 900000);
      this.clearfocus();

      $("#workspace").append(`<div id="div_map_${id}" class="sPosition fCorner crispyOutter"><div id="map_${id}" class="crispyInner"></div></div>`);

      $('#map_' + id).css('height', 300);
      $('#map_' + id).css('width', 300);

      let mymap;
      let mapid = "map_" + id;

      mymap = L.map(mapid, {
        dragging: true,
        zoomControl: true,
        scrollWheelZoom: false,
        zoomAnimation: false,
      });

      $.getJSON('https://raw.githubusercontent.com/apisit/thailand.json/master/thailand.json').then(function (geoJSON) {
        var osm = new L.TileLayer.BoundaryCanvas("https://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}", {
            boundary: geoJSON,
            minZoom: 5,
            maxZoom: 9,
            attribution: '&copy; Tiles &copy; Esri &mdash; Esri, DeLorme, NAVTEQ'
        });

        mymap.addLayer(osm);
        var ukLayer = L.geoJSON(geoJSON);
        mymap.fitBounds(ukLayer.getBounds());
      });

      // mymap.on('mouseover', console.log("in"));
      // mymap.on('mouseout', console.log("out"));

      /* Clear other property */
      $(".propertyMenu-2").html(``);

      var property = new ContentProperty();
      property.createMapProp(id, "#div_map_" + id, "map", mymap);

      /* Click each widget event */
      var widgetObject = this.createWidget(id, "div_map_");
      widgetObject.on('tap', function (event) {
        /* Change focus */
        $(".sPosition").removeClass("fCorner");
        $("#div_map_" + id).addClass("fCorner");

        /* Clear other property */
        $(".propertyMenu-2").html(``);

        var property = new ContentProperty();
        property.createMapProp(id, "#div_map_" + id, "map", mymap);
      })
        .on('dragmove', function (event) {
          /* Change focus */
          $(".sPosition").removeClass("fCorner");
          $("#div_map_" + id).addClass("fCorner");

          var target = event.target,
          // keep the dragged position in the data-x/data-y attributes
          x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx,
          y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy,
          z = (parseFloat(target.getAttribute('data-z')) || 0);

        // translate the element
        target.style.webkitTransform =
          target.style.transform =
          'translate(' + x + 'px, ' + y + 'px) rotate(' + z + 'deg)';

        // update the posiion attributes
        target.setAttribute('data-x', x);
        target.setAttribute('data-y', y);
        target.setAttribute('data-z', z);

          /* Clear other property */
          $(".propertyMenu-2").html(``);

          var property = new ContentProperty();
          property.createMapProp(id, "#div_map_" + id, "map", mymap);
        })

      /* Save widget */
      let saveObject = new WidgetObject();
      saveObject.MapWidgetObject(id, null, "map");
      widgetObjectList.push(saveObject);
    }

    this.loadMapWidget = (id, mapTag) => {
      this.clearfocus();

      $("#workspace").append(mapTag);

      $('#map_' + id).css('height', 300);
      $('#map_' + id).css('width', 300);

      let mymap;
      let mapid = "map_" + id;

      mymap = L.map(mapid, {
        dragging: true,
        zoomControl: true,
        scrollWheelZoom: false,
        zoomAnimation: false,
      });

      $.getJSON('https://raw.githubusercontent.com/apisit/thailand.json/master/thailand.json').then(function (geoJSON) {
        var osm = new L.TileLayer.BoundaryCanvas("https://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}", {
            boundary: geoJSON,
            minZoom: 5,
            maxZoom: 9,
            attribution: '&copy; Tiles &copy; Esri &mdash; Esri, DeLorme, NAVTEQ'
        });

        mymap.addLayer(osm);
        var ukLayer = L.geoJSON(geoJSON);
        mymap.fitBounds(ukLayer.getBounds());
      });

      /* Clear other property */
      $(".propertyMenu-2").html(``);
      this.clearfocus();

      /* Click each widget event */
       /* Click each widget event */
      var widgetObject = this.createWidget(id, "div_map_");
      widgetObject.on('tap', function (event) {
        /* Change focus */
        $(".sPosition").removeClass("fCorner");
        $("#div_map_" + id).addClass("fCorner");

        /* Clear other property */
        $(".propertyMenu-2").html(``);

        var property = new ContentProperty();
        property.createMapProp(id, "#div_map_" + id, "map", mymap);
      })
        .on('dragmove', function (event) {
          /* Change focus */
          $(".sPosition").removeClass("fCorner");
          $("#div_map_" + id).addClass("fCorner");

          var target = event.target,
          // keep the dragged position in the data-x/data-y attributes
          x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx,
          y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy,
          z = (parseFloat(target.getAttribute('data-z')) || 0);

        // translate the element
        target.style.webkitTransform =
          target.style.transform =
          'translate(' + x + 'px, ' + y + 'px) rotate(' + z + 'deg)';

        // update the posiion attributes
        target.setAttribute('data-x', x);
        target.setAttribute('data-y', y);
        target.setAttribute('data-z', z);

          /* Clear other property */
          $(".propertyMenu-2").html(``);

          var property = new ContentProperty();
          property.createMapProp(id, "#div_map_" + id, "map", mymap);
        })

      /* Save widget */
      let saveObject = new WidgetObject();
      saveObject.MapWidgetObject(id, null, "map");
      widgetObjectList.push(saveObject);
    }
  }
}

/* Font */
class Font extends Widget {
  constructor() {
    super();
    this.createHeadGraph = (type) => {
      var id = Math.floor(100000 + Math.random() * 900000);
      this.clearfocus();

      if(type == "title")
      {
        $("#workspace").append(`<span id="span_${id}" class="sPosition fCorner" style="font-size: 100px;">Title</span>`);
      }
      else if(type == "subtitle")
      {
        $("#workspace").append(`<span id="span_${id}" class="sPosition fCorner" style="font-size: 40px; color: rgb(73, 73, 73);">subtitle</span>`);
      }
      
      /* Clear other property */
      $(".propertyMenu-2").html(``);

      var property = new ContentProperty();
      property.createTextProp(id, "#span_" + id, "text");

      /* Click each widget event */
      var widgetObject = this.createWidget(id, "span_");
      widgetObject.on('tap', function (event) {
        /* Change focus */
        $(".sPosition").removeClass("fCorner");
        $("#span_" + id).addClass("fCorner");

        /* Clear other property */
        $(".propertyMenu-2").html(``);

        var property = new ContentProperty();
        property.createTextProp(id, "#span_" + id, "text");
      })
        .on('dragmove', function (event) {
          /* Change focus */
          $(".sPosition").removeClass("fCorner");
          $("#span_" + id).addClass("fCorner");

          var target = event.target,
          // keep the dragged position in the data-x/data-y attributes
          x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx,
          y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy,
          z = (parseFloat(target.getAttribute('data-z')) || 0);

        // translate the element
        target.style.webkitTransform =
          target.style.transform =
          'translate(' + x + 'px, ' + y + 'px) rotate(' + z + 'deg)';

        // update the posiion attributes
        target.setAttribute('data-x', x);
        target.setAttribute('data-y', y);
        target.setAttribute('data-z', z);

          /* Clear other property */
          $(".propertyMenu-2").html(``);

          var property = new ContentProperty();
          property.createTextProp(id, "#span_" + id, "text");
        })

      /* Save widget */
      let saveObject = new WidgetObject();
      saveObject.HeadFontObject(id, null, "head");
      widgetObjectList.push(saveObject);
    }

    this.loadHeadGraph = (id, spanTag) => {
      this.clearfocus();

      $("#workspace").append(spanTag);

      /* Clear other property */
      $(".propertyMenu-2").html(``);
      this.clearfocus();

      /* Click each widget event */
      var widgetObject = this.createWidget(id, "span_");
      widgetObject.on('tap', function (event) {
        /* Change focus */
        $(".sPosition").removeClass("fCorner");
        $("#span_" + id).addClass("fCorner");

        /* Clear other property */
        $(".propertyMenu-2").html(``);

        var property = new ContentProperty();
        property.createTextProp(id, "#span_" + id, "text");
      })
        .on('dragmove', function (event) {
          /* Change focus */
          $(".sPosition").removeClass("fCorner");
          $("#span_" + id).addClass("fCorner");

          var target = event.target,
          // keep the dragged position in the data-x/data-y attributes
          x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx,
          y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy,
          z = (parseFloat(target.getAttribute('data-z')) || 0);

        // translate the element
        target.style.webkitTransform =
          target.style.transform =
          'translate(' + x + 'px, ' + y + 'px) rotate(' + z + 'deg)';

        // update the posiion attributes
        target.setAttribute('data-x', x);
        target.setAttribute('data-y', y);
        target.setAttribute('data-z', z);

          /* Clear other property */
          $(".propertyMenu-2").html(``);

          var property = new ContentProperty();
          property.createTextProp(id, "#span_" + id, "text");
        })

      /* Save widget */
      let saveObject = new WidgetObject();
      saveObject.HeadFontObject(id, null, "head");
      widgetObjectList.push(saveObject);
    }

    this.createTableGraph = () => {
      var id = Math.floor(100000 + Math.random() * 900000);
      this.clearfocus();

      $("#workspace").append(`
                                <table id="table_${id}" class="sPosition fCorner table" table-class="1">
                                  <tr>
                                    <th>Column</th>
                                    <th>Column</th>
                                    <th>Column</th>
                                  </tr>
                                  <tr>
                                    <td>Data</td>
                                    <td>Data</td>
                                    <td>Data</td>
                                  </tr>
                                  <tr>
                                    <td>Data</td>
                                    <td>Data</td>
                                    <td>Data</td>
                                  </tr>
                                </table>
                              `);

        const editor = new SimpleTableCellEditor("table_" + id);
        editor.SetEditable("td",{
          keys : {
          validation: [13],
          cancellation: [27]
          }
        });

        editor.SetEditable("th",{
          keys : {
          validation: [13],
          cancellation: [27]
          }
        });

      /* Clear other property */
      $(".propertyMenu-2").html(``);

      var property = new ContentProperty();
      property.createTableProp(id, "#table_" + id, "table");

      /* Click each widget event */
      var widgetObject = this.createWidget(id, "table_");
      widgetObject.on('tap', function (event) {
        /* Change focus */
        $(".sPosition").removeClass("fCorner");
        $("#table_" + id).addClass("fCorner");

        /* Clear other property */
        $(".propertyMenu-2").html(``);

        var property = new ContentProperty();
        property.createTableProp(id, "#table_" + id, "table");
      })
        .on('dragmove', function (event) {
          /* Change focus */
          $(".sPosition").removeClass("fCorner");
          $("#table_" + id).addClass("fCorner");

          var target = event.target,
          // keep the dragged position in the data-x/data-y attributes
          x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx,
          y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy,
          z = (parseFloat(target.getAttribute('data-z')) || 0);

        // translate the element
        target.style.webkitTransform =
          target.style.transform =
          'translate(' + x + 'px, ' + y + 'px) rotate(' + z + 'deg)';

        // update the posiion attributes
        target.setAttribute('data-x', x);
        target.setAttribute('data-y', y);
        target.setAttribute('data-z', z);

          /* Clear other property */
          $(".propertyMenu-2").html(``);

          var property = new ContentProperty();
          property.createTableProp(id, "#table_" + id, "table");
        })

      /* Save widget */
      let saveObject = new WidgetObject();
      saveObject.WidgetTableObject(id, null, "table");
      widgetObjectList.push(saveObject);
    }

    this.loadTableWidget = (id, tableTag) => {
      this.clearfocus();

      $("#workspace").append(tableTag);

      const editor = new SimpleTableCellEditor("table_" + id);
      editor.SetEditable("td",{
        keys : {
        validation: [13],
        cancellation: [27]
        }
      });

      editor.SetEditable("th",{
        keys : {
        validation: [13],
        cancellation: [27]
        }
      });

      /* Clear other property */
      $(".propertyMenu-2").html(``);
      this.clearfocus();

      /* Click each widget event */
      var widgetObject = this.createWidget(id, "table_");
      widgetObject.on('tap', function (event) {
        /* Change focus */
        $(".sPosition").removeClass("fCorner");
        $("#table_" + id).addClass("fCorner");

        /* Clear other property */
        $(".propertyMenu-2").html(``);

        var property = new ContentProperty();
        property.createTableProp(id, "#table_" + id, "table");
      })
        .on('dragmove', function (event) {
          /* Change focus */
          $(".sPosition").removeClass("fCorner");
          $("#table_" + id).addClass("fCorner");

          var target = event.target,
          // keep the dragged position in the data-x/data-y attributes
          x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx,
          y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy,
          z = (parseFloat(target.getAttribute('data-z')) || 0);

        // translate the element
        target.style.webkitTransform =
          target.style.transform =
          'translate(' + x + 'px, ' + y + 'px) rotate(' + z + 'deg)';

        // update the posiion attributes
        target.setAttribute('data-x', x);
        target.setAttribute('data-y', y);
        target.setAttribute('data-z', z);

          /* Clear other property */
          $(".propertyMenu-2").html(``);

          var property = new ContentProperty();
          property.createTableProp(id, "#table_" + id, "table");
        })

      /* Save widget */
      let saveObject = new WidgetObject();
      saveObject.WidgetTableObject(id, null, "table");
      widgetObjectList.push(saveObject);
    }
  } //Constructor
} //Font class

class Imagesy extends Widget{
  constructor(){
    super();
    this.createImageWidget = (src_image) => {
      var id = Math.floor(100000 + Math.random() * 900000);
      this.clearfocus();

      $("#workspace").append(`<div id="div_${id}" class="sPosition fCorner"><img id="image_${id}" src="${src_image}" class="scaleImage" /></div>`);
      
      $('#div_' + id).css('height', 150);
      $('#div_' + id).css('width', 150);

      /* Clear other property */
      $(".propertyMenu-2").html(``);

      var property = new ContentProperty();
      property.createImageProp(id, "#div_" + id, "#image_" + id, "image");

      /* Click each widget event */
      var widgetObject = this.createWidget(id, "div_");
      widgetObject.on('tap', function (event) {
        /* Change focus */
        $(".sPosition").removeClass("fCorner");
        $("#div_" + id).addClass("fCorner");

        /* Clear other property */
        $(".propertyMenu-2").html(``);

        var property = new ContentProperty();
        property.createImageProp(id, "#div_" + id, "#image_" + id, "image");
      })
        .on('dragmove', function (event) {
          /* Change focus */
          $(".sPosition").removeClass("fCorner");
          $("#div_" + id).addClass("fCorner");

          var target = event.target,
          // keep the dragged position in the data-x/data-y attributes
          x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx,
          y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy,
          z = (parseFloat(target.getAttribute('data-z')) || 0);

        // translate the element
        target.style.webkitTransform =
          target.style.transform =
          'translate(' + x + 'px, ' + y + 'px) rotate(' + z + 'deg)';

        // update the posiion attributes
        target.setAttribute('data-x', x);
        target.setAttribute('data-y', y);
        target.setAttribute('data-z', z);

          /* Clear other property */
          $(".propertyMenu-2").html(``);

          var property = new ContentProperty();
          property.createImageProp(id, "#div_" + id, "#image_" + id, "image");
        })

      /* Save widget */
      let saveObject = new WidgetObject();
      saveObject.WidgetImageObject(id, null, "image");
      widgetObjectList.push(saveObject);
    }   

    this.loadImageWidget = (id, divImgTag) => {
      this.clearfocus();
      $("#workspace").append(divImgTag);

      $('#div_' + id).css('height', 150);
      $('#div_' + id).css('width', 150);

      /* Clear other property */
      $(".propertyMenu-2").html(``);

      var property = new ContentProperty();
      property.createImageProp(id, "#div_" + id, "#image_" + id, "image");

      /* Click each widget event */
      var widgetObject = this.createWidget(id, "div_");
      widgetObject.on('tap', function (event) {
        /* Change focus */
        $(".sPosition").removeClass("fCorner");
        $("#div_" + id).addClass("fCorner");

        /* Clear other property */
        $(".propertyMenu-2").html(``);

        var property = new ContentProperty();
        property.createImageProp(id, "#div_" + id, "#image_" + id, "image");
      })
        .on('dragmove', function (event) {
          /* Change focus */
          $(".sPosition").removeClass("fCorner");
          $("#div_" + id).addClass("fCorner");

          var target = event.target,
          // keep the dragged position in the data-x/data-y attributes
          x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx,
          y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy,
          z = (parseFloat(target.getAttribute('data-z')) || 0);

        // translate the element
        target.style.webkitTransform =
          target.style.transform =
          'translate(' + x + 'px, ' + y + 'px) rotate(' + z + 'deg)';

        // update the posiion attributes
        target.setAttribute('data-x', x);
        target.setAttribute('data-y', y);
        target.setAttribute('data-z', z);

          /* Clear other property */
          $(".propertyMenu-2").html(``);

          var property = new ContentProperty();
          property.createImageProp(id, "#div_" + id, "#image_" + id, "image");
        })

      /* Save widget */
      let saveObject = new WidgetObject();
      saveObject.WidgetImageObject(id, null, "image");
      widgetObjectList.push(saveObject);
    }
  } //Constructor
} //Image class

class Shape extends Widget{
  constructor(){
    super();
    this.createShapeWidget = (type) => {
      var id = Math.floor(100000 + Math.random() * 900000);
      this.clearfocus();

      if(type == "square")
      {
        $("#workspace").append(`<div id="div_${id}" class="sPosition fCorner"><div id="shape_${id}" class="square"></div></div>`);
      }
      else if(type == "circle")
      {
        $("#workspace").append(`<div id="div_${id}" class="sPosition fCorner"><div id="shape_${id}" class="circle"></div></div>`);
      }
      else if(type == "string")
      {
        $("#workspace").append(`<div id="div_${id}" class="sPosition fCorner"><div id="shape_${id}" class="string"></div></div>`);

      }

      $('#div_' + id).css('height', 150);
      $('#div_' + id).css('width', 150);

      /* Clear other property */
      $(".propertyMenu-2").html(``);

      var property = new ContentProperty();
      property.createShapeProp(id, "#div_" + id, "#shape_" + id, type);

      /* Click each widget event */
      var widgetObject = this.createWidget(id, "div_");
      widgetObject.on('tap', function (event) {
        /* Change focus */
        $(".sPosition").removeClass("fCorner");
        $("#div_" + id).addClass("fCorner");

        /* Clear other property */
        $(".propertyMenu-2").html(``);

        var property = new ContentProperty();
        property.createShapeProp(id, "#div_" + id, "#shape_" + id, type);
      })
        .on('dragmove', function (event) {
          /* Change focus */
          $(".sPosition").removeClass("fCorner");
          $("#div_" + id).addClass("fCorner");

          var target = event.target,
          // keep the dragged position in the data-x/data-y attributes
          x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx,
          y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy,
          z = (parseFloat(target.getAttribute('data-z')) || 0);

        // translate the element
        target.style.webkitTransform =
          target.style.transform =
          'translate(' + x + 'px, ' + y + 'px) rotate(' + z + 'deg)';

        // update the posiion attributes
        target.setAttribute('data-x', x);
        target.setAttribute('data-y', y);
        target.setAttribute('data-z', z);

          /* Clear other property */
          $(".propertyMenu-2").html(``);

          var property = new ContentProperty();
          property.createShapeProp(id, "#div_" + id, "#shape_" + id, type);
        })

      /* Save widget */
      let saveObject = new WidgetObject();
      saveObject.WidgetShapeObject(id, null, type);
      widgetObjectList.push(saveObject);
    }

    this.loadShapeWidget = (id, divTag, type) => {
      this.clearfocus();
      console.log(divTag);
      $("#workspace").append(divTag);

      /* Clear other property */
      $(".propertyMenu-2").html(``);
      this.clearfocus();

      /* Click each widget event */
      var widgetObject = this.createWidget(id, "div_");
      widgetObject.on('tap', function (event) {
        /* Change focus */
        $(".sPosition").removeClass("fCorner");
        $("#div_" + id).addClass("fCorner");

        /* Clear other property */
        $(".propertyMenu-2").html(``);

        var property = new ContentProperty();
        property.createShapeProp(id, "#div_" + id, "#shape_" + id, type);
      })
        .on('dragmove', function (event) {
          /* Change focus */
          $(".sPosition").removeClass("fCorner");
          $("#div_" + id).addClass("fCorner");

          var target = event.target,
          // keep the dragged position in the data-x/data-y attributes
          x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx,
          y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy,
          z = (parseFloat(target.getAttribute('data-z')) || 0);

        // translate the element
        target.style.webkitTransform =
          target.style.transform =
          'translate(' + x + 'px, ' + y + 'px) rotate(' + z + 'deg)';

        // update the posiion attributes
        target.setAttribute('data-x', x);
        target.setAttribute('data-y', y);
        target.setAttribute('data-z', z);

          /* Clear other property */
          $(".propertyMenu-2").html(``);

          var property = new ContentProperty();
          property.createShapeProp(id, "#div_" + id, "#shape_" + id, type);
        })

      /* Save widget */
      let saveObject = new WidgetObject();
      saveObject.WidgetShapeObject(id, null, type);
      widgetObjectList.push(saveObject);
    }
  } //Constructor
} //Shape class

class Property {
  constructor() {
    /* Create UI & function property */
    $("#propertySpace").html(`<div class="propertyMenu-2">
                                <div class="propertyMenu-2-context"></div>
                                <div class="propertyMenu-2-paper"></div>
                              </div>`);

    this.createContext = (id, full_id, type, myChart) => {
      $(".propertyMenu-2-context").append(`  
            <div class="container">
                <div class="row row-block border-bottom-only">
                    <div class="col-2">
                        <button type="button" id="backest_widget_${id}" class="btn btn-default"><i class="far fa-caret-square-down"></i></button>
                    </div>
                    <div class="col-3">
                        <button type="button" id="topest_widget_${id}"  class="btn btn-default"><i class="far fa-caret-square-up"></i></button>
                    </div>
                    <div class="col-2">
                        <button type="button" id="align_left_widget_${id}" class="btn btn-default"><i class="fas fa-align-left"></i></button>
                    </div>
                    <div class="col-2">
                        <button type="button" id="align_center_widget_${id}" class="btn btn-default"><i class="fas fa-align-center"></i></button>
                    </div>
                    <div class="col-2">         
                        <button type="button" id="align_right_widget_${id}" class="btn btn-default"><i class="fas fa-align-right"></i></button>
                    </div>
                </div>
                <div class="row row-block">
                    <div class="col-9">
                        <button type="button" id="download_widget_${id}" class="btn btn-default form-control">Download</button>
                    </div>
                    <div class="col-2" style="display:none;">
                        <button type="button" id="preview_widget_${id}" class="btn btn-default" ><i class="fas fa-desktop"></i></button>
                    </div>
                    <div class="col-1">
                        <button type="button" id="delete_widget_${id}" class="btn btn-default" ><i class="fas fa-trash-alt"></i></button>
                    </div>
                </div>
            </div>`);
      
      $("#backest_widget_" + id).click(function () {
        $(".sPosition").each(function (index) {
          if ($(this).hasClass("fCorner")) {
            $(this).css("z-index", 0);
          }
          else {
            $(this).css("z-index", index + 1);
          }
        });
      });

      $("#topest_widget_" + id).click(function () {
        $(".sPosition").each(function (index) {
          if ($(this).hasClass("fCorner")) {
            $(this).css("z-index", $(".sPosition").length);
          }
          else {
            $(this).css("z-index", index);
          }
        });
      });

      $("#align_left_widget_" + id).click(function () {
        var transform   = $(full_id).css('transform').split(',');
        var transformY  = transform[5].split(')')[0];

        $(full_id).css('transform', 'translate(0px, ' + transformY + 'px)');
        $(full_id).attr('data-x', 0);
        $(full_id).attr('data-y', transformY);
      });

      $("#align_center_widget_" + id).click(function () {
        var transform   = $(full_id).css('transform').split(',');
        var transformY  = transform[5].split(')')[0];
        var transformX  = (595 / 2) - ($(full_id).width() / 2);

        $(full_id).css('transform', 'translate(' + transformX + 'px, ' + transformY + 'px)');
        $(full_id).attr('data-x', transformX);
        $(full_id).attr('data-y', transformY);
      });

      $("#align_right_widget_" + id).click(function () {
        var transform   = $(full_id).css('transform').split(',');
        var transformY  = transform[5].split(')')[0];
        var transformX  = 595 - $(full_id).width();

        $(full_id).css('transform', 'translate(' + transformX + 'px, ' + transformY + 'px)');
        $(full_id).attr('data-x', transformX);
        $(full_id).attr('data-y', transformY);
      });

      $("#download_widget_" + id).click(function () {
        var transform = $(full_id).css('transform');
        var data_x    = $(full_id).css('data-x');
        var data_y    = $(full_id).css('data-y');
        var width     = $(full_id).css('width');
        var height     = $(full_id).css('height');

        $(full_id).css('transform', 'translate(0px, 0px)');
        $(full_id).css('data-x', 0);
        $(full_id).css('data-y', 0);
        $(full_id).css('width', 1920);
        $(full_id).css('height', 1080);
        $(full_id).removeClass("fCorner");

        $("#modelDownload_" + id).remove();
        var modalDownload = `
        <div class="modal" id="modelDownload_${id}" class="modelcropper">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title">Download</h4>
                        <button type="button" id="close_download_${id}" class="close" data-dismiss="modal">&times;</button>
                    </div>

                    <div class="modal-body">
                        <div class="row justify-content-center">
                            <div class="col-5 header-line">
                               <span class="header-title">Save as file</span>
                               <div class="row">
                                  <div class="col-6">
                                    <button type="button" id="download_as_pdf_${id}" class="btn btn-default" style="width:inherit;" data-loading-text="<i class='fas fa-circle-notch fa-spin'></i>LOADING..."><i class="far fa-file-pdf" style="margin-right:10px"></i>PDF</button>
                                  </div>
                                  <div class="col-6">
                                    <button type="button" id="download_as_excel_${id}" class="btn btn-default" style="width:inherit;" data-loading-text="<i class='fas fa-circle-notch fa-spin'></i>LOADING..."><i class="fas fa-file-excel" style="margin-right:10px"></i>EXCEL</button>
                                  </div>
                               </div>
                            </div>
                            <div class="col-5 header-line">
                              <span class="header-title">Save as image</span>
                                <div class="row">
                                  <div class="col-6">
                                    <button type="button" id="download_as_png_${id}" class="btn btn-default" style="width:inherit;" data-loading-text="<i class='fas fa-circle-notch fa-spin'></i>LOADING..."><i class="far fa-file-image" style="margin-right:10px"></i>PNG</button>
                                  </div>
                                  <div class="col-6">
                                    <button type="button" id="download_as_jpg_${id}" class="btn btn-default" style="width:inherit;" data-loading-text="<i class='fas fa-circle-notch fa-spin'></i>LOADING..."><i class="far fa-image" style="margin-right:10px"></i>JPG</button>
                                  </div>
                               </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>`;

        $('body').append(modalDownload);
        $("#modelDownload_" + id).modal('show');

        $("#download_as_pdf_" + id).click(function () {
          LOADING.set($("#download_as_pdf_" + id));

          html2canvas(document.querySelector(full_id)).then(canvas => {
            var myLinkImage = canvas.toDataURL("image/png");
            var pdf         = new jsPDF();

            pdf.addImage(myLinkImage, 'JPEG', 0, 0, pdf.internal.pageSize.getWidth(), pdf.internal.pageSize.getHeight());
            pdf.save( infoName + ".pdf");

            LOADING.reset($("#download_as_pdf_" + id));
          });
        });
        
        $("#download_as_png_" + id).click(function () {
          LOADING.set($("#download_as_png_" + id));

          html2canvas(document.querySelector(full_id)).then(canvas => {
            var myLinkImage = canvas.toDataURL("image/png");

            var a = document.createElement("a");
            a.href = myLinkImage;
            a.setAttribute("download", infoName + ".png");
            var b = document.createEvent("MouseEvents");
            b.initEvent("click", false, true);
            a.dispatchEvent(b);

            LOADING.reset($("#download_as_png_" + id));
          });
        });

        $("#download_as_jpg_" + id).click(function () {
          LOADING.set($("#download_as_jpg_" + id));

          html2canvas(document.querySelector(full_id)).then(canvas => {
            var myLinkImage = canvas.toDataURL("image/png");

            var a = document.createElement("a");
            a.href = myLinkImage;
            a.setAttribute("download", infoName + ".jpg");
            var b = document.createEvent("MouseEvents");
            b.initEvent("click", false, true);
            a.dispatchEvent(b);

            LOADING.reset($("#download_as_jpg_" + id));
          });
        });

        $('#modelDownload_' + id).on('hidden.bs.modal', function (e) {
          restoreSetting();

          $("#modelDownload_" + id).modal('hide');
          $("#modelDownload_" + id).modal('dispose');
          $("#modelDownload_" + id).remove();
        })

        function restoreSetting()
        {
          $(full_id).css('transform', transform);
          $(full_id).css('data-x', data_x);
          $(full_id).css('data-y', data_y);
          $(full_id).css('width', width);
          $(full_id).css('height', height);
          $(full_id).addClass("fCorner");
        }
      });

      $("#preview_widget_" + id).click(function () {
        var popup = window.open();
        popup.document.write("<h1 id='loading'>Loading...</h1>");

        var transform = $(full_id).css('transform');
        var data_x = $(full_id).css('data-x');
        var data_y = $(full_id).css('data-y');

        $(full_id).css('transform', 'translate(0px, 0px)');
        $(full_id).css('data-x', 0);
        $(full_id).css('data-y', 0);
        $(full_id).removeClass("fCorner");

        html2canvas(document.querySelector(full_id)).then(div => {
          var myImage = div.toDataURL("image/png");

          $(full_id).css('transform', transform);
          $(full_id).css('data-x', data_x);
          $(full_id).css('data-y', data_y);
          $(full_id).addClass("fCorner");

          var img = '<img src="' + myImage + '">';
          popup.document.write(img);
          popup.document.title = "Preview";
          popup.document.getElementById("loading").remove();
        });
      });  
      
      $("#delete_widget_" + id).click(function () {
        widgetObjectList  = arrayRemove(widgetObjectList, id);

        if(type == "line" || type == "bar" || type == "pie" || type == "radar")
        {
          let ctx = document.getElementById("div_canvas_" + id);       
          myChart.destroy();
          ctx.remove();
        }
        else if(type == "map")
        {
          let ctx  = document.getElementById("div_map_" + id);
          ctx.remove();
        }
        else if(type == "text")
        {
          let ctx  = document.getElementById("span_" + id);
          ctx.remove();
        }
        else if(type == "table")
        {
          let ctx = document.getElementById("table_" + id);
          ctx.remove();
        }
        else if(type == "image")
        {
          let ctx = document.getElementById("div_" + id);   
          ctx.remove();
        }
        else if(type == "square" || type == "circle" || type == "string")
        {
          let ctx  = document.getElementById("div_" + id);
          ctx.remove();
        }
        $(".propertyMenu-2").html(``);
      });
    }

    this.createEditdata = (id, myChart, full_id, type) => {
      var countChartData = 0;
      var selectDatasourceList = [];
      var selectDataList = [];
      var selectAggList = [];
      var selectDatasourceListSeries = [];
      var selectDataListSeries = [];
      var stateMode;
      var dailyLables;
      var monthlyLables;
      var yearlyLables;
      var apiList = [];
      var periodType;

      $(".propertyMenu-2-paper").append(`                
          <div class="propertyMenu-2-block">
            <button type="button" id="edit_chart_data_${id}" class="btn btn-default form-control button-width">Edit data</button>     
          </div>`);

      $("#edit_chart_data_" + id).click(function () {
        $("#model_edit_chart_data_" + id).remove();

        selectDatasourceList = [];
        selectDataList = [];
        selectAggList = [];
        selectDatasourceListSeries = [];
        selectDataListSeries = [];
        stateMode = "classic";
        apiList = [];
        periodType = "daily";

        var modalEditChartData = `
        <div class="modal" id="model_edit_chart_data_${id}">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title">Edit data chart</h4>
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                    </div>

                    <div class="modal-body">
                      <div class="row" style="box-shadow: 0 3px 2px -2px grey; margin-bottom:15px;"> 
                        <div class="col-12">
                          <ul class="nav nav-tabs" style="border-bottom:none; padding-top:5px; padding-bottom:10px;">
                            <li><button class="btn btn-primary mr-2" data-toggle="tab" id="btn_classic_${id}">Classic</button></li>
                            <li><button class="btn btn-primary mr-2" data-toggle="tab" id="btn_series_${id}">Time series</button></li>
                          </ul>   
                        </div>           
                      </div>
                      <div id="classic_${id}" style="display:none;">  
                        <div class="row">
                          <div class="col-5">
                            <div class="row" style="padding-top:5px; padding-bottom:5px;">
                              <div class="col-4 mt-2">
                                <span>Select period</span>
                              </div>
                              <div class="col-8">
                                <ul class="nav nav-tabs" id="period_tab_${id}" style="border-bottom:none; padding-top:5px; padding-bottom:5px;">
                                  <li><button class="btn btn-primary period-tab" data-toggle="tab" href="#daily_${id}" id="btn_daily_${id}" value="daily" style="margin-right:5px;">Daily</button></li>
                                  <li><button class="btn btn-primary period-tab" data-toggle="tab" href="#monthly_${id}" id="btn_monthly_${id}" value="monthly" style="margin-right:5px;">Monthly</button></li>
                                  <li><button class="btn btn-primary period-tab" data-toggle="tab" href="#yearly_${id}" id="btn_yearly_${id}" value="yearly" style="margin-right:5px;">Yearly</button></li>
                                </ul>
                              </div>
                            </div>
                            <div class="tab-content" style="padding-top:5px; padding-bottom:5px;">
                              <div id="daily_${id}" class="tab-pane fade">  
                                <div class="row" style="padding-top:5px; padding-bottom:5px;">
                                  <div class="col-6">
                                    <span>Start date</span>
                                  </div>
                                  <div class="col-6">
                                    <span>End date</span>
                                  </div>
                                </div>            
                                <div class="row" style="padding-top:5px; padding-bottom:5px;">
                                  <div class="col-6">
                                    <input type="text" id="start_daily_${id}" class="form-control"/>
                                  </div>
                                  <div class="col-6">
                                    <input type="text" id="end_daily_${id}" class="form-control"/>
                                  </div>
                                </div>
                              </div>
                              <div id="monthly_${id}" class="tab-pane fade">
                                <div class="row" style="padding-top:5px; padding-bottom:5px;">
                                  <div class="col-6">
                                    <span>Start month</span>
                                  </div>
                                  <div class="col-6">
                                    <span>End month</span>
                                  </div>
                                </div>            
                                <div class="row" style="padding-top:5px; padding-bottom:5px;">
                                  <div class="col-6">
                                    <input type="text" id="start_monthly_${id}" class="form-control"/>
                                  </div>
                                  <div class="col-6">
                                    <input type="text" id="end_monthly_${id}" class="form-control"/>
                                  </div>
                                </div>
                              </div>
                              <div id="yearly_${id}" class="tab-pane fade">
                                <div class="row" style="padding-top:5px; padding-bottom:5px;">
                                  <div class="col-6">
                                    <span>Start year</span>
                                  </div>
                                  <div class="col-6">
                                    <span>End year</span>
                                  </div>
                                </div>            
                                <div class="row" style="padding-top:5px; padding-bottom:5px;">
                                  <div class="col-6">
                                    <input type="text" id="start_yearly_${id}" class="form-control"/>
                                  </div>
                                  <div class="col-6">
                                    <input type="text" id="end_yearly_${id}" class="form-control"/>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                          <div class="col-7" id="div_preview_canvas_${id}_classic">
                            <canvas id="preview_canvas_${id}_classic"></canvas>
                          </div>
                        </div>
                        <hr>
                        <div class="row" style="padding-top:5px; padding-bottom:10px; box-shadow: 0 3px 2px -2px grey;">
                          <div class="col-6">
                            <span>Set data</span>
                            <button id="add_new_data_${id}" class="btn btn-default btn-sm btn-radius"><i class="fas fa-plus"></i>Add new data</button>
                          </div>
                          <div class="col-1 mt-2">
                            <span>X Label </span>
                          </div>
                          <div class="col-2">
                            <input type="text" id="x_label_classic_${id}" class="form-control" value="${myChart.options.scales.xAxes[0].scaleLabel.labelString}"/>
                          </div>
                          <div class="col-1 mt-2">
                            <span>Y Label </span>
                          </div>
                          <div class="col-2">
                            <input type="text" id="y_label_classic_${id}"  class="form-control" value="${myChart.options.scales.yAxes[0].scaleLabel.labelString}"/>
                          </div>
                        </div>
                        <div id="chart_data_${id}" class="row taboverflow" style="padding-top:5px; padding-bottom:5px;">
                        </div>
                      </div>

                      <div id="series_${id}" style="display:none;">
                        <div class="row" style="height:150px;">
                          <div class="col-5">
                            <div class="row">
                              <div class="col-12" style="padding-top:5px; padding-bottom:5px;">
                                <span>Time series period</span>
                              </div>
                            </div>
                            <div class="row">
                              <div class="col-12" style="padding-top:5px; padding-bottom:5px;">
                                <select type="text" id="select_period_series_${id}" class="form-control">
                                  <option value="0">-Select-</option>
                                  <option value="15day">15 Day later</option>
                                  <option value="6month">6 Month later</option>
                                  <option value="1year">1 Year later</option>
                                  <option value="custom">Custom</option>
                                </select>     
                              </div>
                            </div>
                            <div class="row" id="div_custom_${id}" style="display:none;">
                              <div class="col-3" style="padding-top:5px; padding-bottom:5px;">
                                <input type="text" class="form-control"/>
                              </div>
                              <div class="col-9" style="padding-top:5px; padding-bottom:5px;">
                                <select type="text" class="form-control">
                                  <option value="0">-Select-</option>
                                  <option value="day">Day later</option>
                                  <option value="week">Week later</option>
                                  <option value="month">Month later</option>
                                  <option value="year">Year later</option>
                                </select>  
                              </div>
                            </div>
                          </div>
                          <div class="col-7" id="div_preview_canvas_${id}_series">
                            <canvas id="preview_canvas_${id}_series"></canvas>
                          </div>
                        </div>
                        <hr>
                        <div class="row" style="padding-top:5px; padding-bottom:10px; box-shadow: 0 3px 2px -2px grey;">
                          <div class="col-6">
                            <span>Set data</span>
                            <button id="add_new_data_${id}_series" class="btn btn-default btn-sm btn-radius"><i class="fas fa-plus"></i>Add new data</button>
                          </div>
                          <div class="col-1 mt-2">
                            <span>X Label </span>
                          </div>
                          <div class="col-2">
                            <input type="text" id="x_label_series_${id}" class="form-control" value="${myChart.options.scales.xAxes[0].scaleLabel.labelString}"/>
                          </div>
                          <div class="col-1 mt-2">
                            <span>Y Label </span>
                          </div>
                          <div class="col-2">
                            <input type="text" id="y_label_series_${id}" class="form-control" value="${myChart.options.scales.yAxes[0].scaleLabel.labelString}"/>
                          </div>
                        </div>
                        <div id="chart_data_${id}_series" class="row taboverflow" style="padding-top:5px; padding-bottom:5px;">
                        </div>
                      </div>
    
                    </div>
                    <div class="modal-footer" style="box-shadow: 0 -3px 2px -2px grey;">
                        <button type="button" id="save_chart_data_${id}" class="btn btn-success">Apply</button>
                    </div>
                </div>
            </div>
        </div>`;

        $('body').append(modalEditChartData);
        $("#model_edit_chart_data_" + id).modal('show');

        if(type == "pie" || type == "radar")
        {
          $('#btn_series_' + id).prop('disabled', true);
        }
        var stateModeCheck = $('#canvas_' + id);

        $('#btn_classic_' + id).click(function(){
          stateMode = "classic";
          $("#classic_" + id).fadeIn();
          $("#series_" + id).hide();
          setButtonPeriod(id , stateModeCheck.attr('period-type'), stateModeCheck.attr('start-value'), stateModeCheck.attr('end-value'));
        });

        $('#btn_series_' + id).click(function(){
          stateMode = "series";
          $("#series_" + id).fadeIn();
          $("#classic_" + id).hide();
        });

        if(stateModeCheck.attr('state-mode') == "classic")
        {
          $("#btn_classic_" + id).click();

          setButtonPeriod(id , stateModeCheck.attr('period-type'), stateModeCheck.attr('start-value'), stateModeCheck.attr('end-value'));        

          var classicChart = cloneCanvas(myChart, id, type, "classic");
          setDefaultData(classicChart);
          setValueClassicChart(classicChart);

          var seriesChart = newSeriesCanvas(id, type, "series");
          setDefaultDataSeries(seriesChart);
        }
        else if(stateModeCheck.attr('state-mode') == "series")
        {
          $("#btn_series_" + id).click();

          var seriesChart = cloneCanvas(myChart, id, type, "series");
          setDefaultDataSeries(seriesChart);
          setValueSeriesChart(seriesChart);

          var classicChart = newClassicCanvas(id, type, "classic");
          setDefaultData(classicChart);
        }

        $('#select_period_series_' + id).change(function(){
          if($('#select_period_series_' + id).val() == "custom")
          {
            $("#div_custom_" + id).show();
          }
          else
          {
            $("#div_custom_" + id).hide();
          }
        });

        //Function overall
        $("#btn_daily_" + id).click(function () {

          classicChart.data.labels = [];
          dailyLables = [];

          for(let i = 0; i < classicChart.data.datasets.length; i++)
          {
            classicChart.data.datasets.data = [];
          }

          let ctx  = $("#chart_data_" + id);
          ctx.contents().remove();

          setDefaultData(classicChart);
        });

        $("#btn_monthly_" + id).click(function () {

          classicChart.data.labels = [];
          monthlyLables = [];

          for(let i = 0; i < classicChart.data.datasets.length; i++)
          {
            classicChart.data.datasets.data = [];
          }
          
          let ctx  = $("#chart_data_" + id);
          ctx.contents().remove();

          setDefaultData(classicChart);
        });
        
        $("#add_new_data_" + id).click(function () {

          let newData;

          if(type == "bar" || type == "pie")
          {
            newData =
            {
              label: "New data",
              data: [100,80,60],
              backgroundColor: '#343a40'
            };
          }
          else
          {
            newData =
            {
              label: "New data",
              data: [100,80,60],
              backgroundColor: 'rgba(255, 255, 255, 0)',
              borderColor:'#343a40'
            };
          }
  
          classicChart.data.datasets.push(newData);
          classicChart.update();

          let ctx  = $("#chart_data_" + id);
          ctx.contents().remove();

          selectDatasourceList.push(0);
          selectDataList.push("Null");
          selectAggList.push(0);

          setDefaultData(classicChart);
        });

        $("#add_new_data_" + id + "_series").click(function () {

          let newData;

          if(type == "bar" || type == "pie")
          {
            newData =
            {
              label: "New data",
              data: [{x: new Date('2019','02','15'), y:50}],
              backgroundColor: '#343a40'
            };
          }
          else
          {
            newData =
            {
              label: "New data",
              data: [{x: new Date('2019','02','15'), y:50}],
              backgroundColor: 'rgba(255, 255, 255, 0)',
              borderColor:'#343a40'
            };
          }
  
          seriesChart.data.datasets.push(newData);
          seriesChart.update();

          let ctx  = $("#chart_data_" + id + "_series");
          ctx.contents().remove();

          selectDatasourceListSeries.push(0);
          selectDataListSeries.push("Null");

          setDefaultDataSeries(seriesChart);
        });

        $("#x_label_classic_" + id).change(function () {
          classicChart.options.scales.xAxes[0].scaleLabel.labelString = $("#x_label_classic_" + id).val();
          classicChart.update();
        });

        $("#y_label_classic_" + id).change(function () {
          classicChart.options.scales.yAxes[0].scaleLabel.labelString = $("#y_label_classic_" + id).val();
          classicChart.update();
        });

        $("#x_label_series_" + id).change(function () {
          seriesChart.options.scales.xAxes[0].scaleLabel.labelString = $("#x_label_series_" + id).val();
          seriesChart.update();
        });

        $("#y_label_series_" + id).change(function () {
          seriesChart.options.scales.yAxes[0].scaleLabel.labelString = $("#y_label_series_" + id).val();
          seriesChart.update();
        });

        $("#save_chart_data_" + id).click(function () {

          if(stateMode == "classic")
          {
            addOptions(myChart, classicChart.options);
            addLabel(myChart, classicChart.data.labels);
            addDatasets(myChart, classicChart.data.datasets);
          }
          else if(stateMode == "series")
          {
            addOptions(myChart, seriesChart.options);
            addLabel(myChart, seriesChart.data.labels);
            addDatasets(myChart, seriesChart.data.datasets);
          }

          var ctxAttr = $('#canvas_' + id);
          ctxAttr.attr('state-mode', stateMode);
          ctxAttr.attr('period-type', periodType);
          ctxAttr.attr('start-value', $("start_" + periodType + "_" + id).val());
          ctxAttr.attr('end-value', $("end_" + periodType + "_" + id).val());

          var ctx = $('#canvas_' + id);
          ctx.data("graph", myChart);

          $(".propertyMenu-2").html(``);

          var property = new ContentProperty();
          property.createGraphProp(id, myChart, "#div_canvas_" + id, type);

          $("#model_edit_chart_data_" + id).modal('hide');
        });
        
      });

      function setButtonPeriod(id, periodType, startValue, endValue)
      {
        if(periodType == "daily")
        {
          $("#btn_daily_" + id).click();
          $("#start_daily_" + id).val(startValue);
          $("#end_daily_" + id).val(endValue);
          dailyLables = myChart.data.labels;
        }
        else if(periodType == "monthly")
        {
          $("#btn_monthly_" + id).click();
          $("#start_monthly_" + id).val(startValue);
          $("#end_monthly_" + id).val(endValue);
          monthlyLables = myChart.data.labels;
        }
        else if(periodType == "yearly")
        {
          $("#btn_yearly_" + id).click();
          $("#start_yearly_" + id).val(startValue);
          $("#end_yearly_" + id).val(endValue);
          yearlyLables = myChart.data.labels;
        }
        else
        {
          $("#btn_daily_" + id).click();
        }
      }

      function setValueClassicChart(classicChart)
      {
        for(var k = 0; k < classicChart.data.datasets.length; k++)
        {
          var ctx = $('#canvas_' + id);
          
          if(ctx.attr('select-datasource-list') != null)
          {
            selectDatasourceList.push(ctx.attr('select-datasource-list').split(',')[k]);
          }
          else
          {
            selectDatasourceList.push(0);
          }

          if(ctx.attr('select-keydata-list') != null)
          {
            selectDataList.push(ctx.attr('select-keydata-list').split(',')[k]);
          }
          else
          {
            selectDataList.push("Null");
          }

          if(ctx.attr('select-agg-list') != null)
          {
            selectAggList.push(ctx.attr('select-agg-list').split(',')[k]);
          }
          else
          {
            selectAggList.push(0);
          }
        }
      }

      function setValueSeriesChart(seriesChart)
      {
        for(var k = 0; k < seriesChart.data.datasets.length; k++)
        {
          var ctx = $('#canvas_' + id);
          
          if(ctx.attr('select-datasource-list-series') != null)
          {
            selectDatasourceListSeries.push(ctx.attr('select-datasource-list-series').split(',')[k]);
          }
          else
          {
            selectDatasourceListSeries.push(0);
          }

          if(ctx.attr('select-keydata-list-series') != null)
          {
            selectDataListSeries.push(ctx.attr('select-keydata-list-series').split(',')[k]);
          }
          else
          {
            selectDataListSeries.push("Null");
          }
        }
      }

      function newClassicCanvas(id, type, stateType)
      {
        let ctx = document.getElementById("preview_canvas_" + id + "_" + stateType);

        let demoData;

        if(type == "bar" || type == "pie")
        {
          demoData = {
            labels: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
            datasets: [{
              label: "Demo Data 1",
              data: [0, 59, 75, 20, 20, 55, 40],
              backgroundColor: '#05acd3'
            }, {
              label: "Demo Data 2",
              data: [0, 29, 25, 20, 20, 25, 20],
              backgroundColor: '#00ce68'
            }]
          };
        }
        else
        {
          demoData = {
            labels: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
            datasets: [{
              label: "Demo Data 1",
              data: [0, 59, 75, 20, 20, 55, 40],
              backgroundColor: 'rgba(255, 255, 255, 0)',
              borderColor: '#05acd3'
            }, {
              label: "Demo Data 2",
              data: [0, 29, 25, 20, 20, 25, 20],
              backgroundColor: 'rgba(255, 255, 255, 0)',
              borderColor: '#00ce68'
            }]
          };
        }
  
        let chartOptions = {
          responsive: true,
          maintainAspectRatio: false,
          legend: {
            display: true,
            position: 'top',
            labels: {
              boxWidth: 80,
              fontColor: 'black'
            }
          },
          scales: {
            yAxes: [{
              scaleLabel: {
                display: true,
                labelString: 'Y Label'
              }
            }],
            xAxes: [{
              scaleLabel: {
                display: true,
                labelString: 'X Label'
              }
            }],
          }
        };

        let myChart2 = new Chart(ctx, {
          type: type,
          data: demoData,
          options: chartOptions
        });

        return myChart2;
      }

      function newSeriesCanvas(id, type, stateType)
      {
        let ctx = document.getElementById("preview_canvas_" + id + "_" + stateType);

        let demoData;

        if(type == "bar" || type == "pie")
        {
          demoData = {
            datasets: [{
              label: "Demo Data",
              data: [
                { x: new Date(2017,5,11), y: 100 },
                { x: new Date(2019,2,21), y: 50 },],
              backgroundColor: '#05acd3'
            }]
          };
        }
        else
        {
          demoData = {
            datasets: [{
              label: "Demo Data",
              data: [
                { x: new Date(2017,5,11), y: 100 },
                { x: new Date(2019,2,21), y: 50 },],
              backgroundColor: 'rgba(255, 255, 255, 0)',
              borderColor:'#05acd3'
            }]
          };
        }
  
        let chartOptions = {
          responsive: true,
          maintainAspectRatio: false,
          legend: {
            display: true,
            position: 'top',
            labels: {
              boxWidth: 80,
              fontColor: 'black'
            }
          },
          scales: {
              xAxes: [{
                  type: 'time',
                  distribution: 'linear',
                  ticks:{
                    source:'auto'
                  },
                  scaleLabel: {
                    display: true,
                    labelString: 'X Label'
                  }
              }],
              yAxes: [{
                scaleLabel: {
                  display: true,
                  labelString: 'Y Label'
                }
              }],
          }
        };

        let myChart2 = new Chart(ctx, {
          type: type,
          data: demoData,
          options: chartOptions
        });

        return myChart2;
      }

      function cloneCanvas(myChart, id, type, stateType) {

        let ctx = document.getElementById("preview_canvas_" + id + "_" + stateType);
        var myChart2 = new Chart(ctx, {
          type: type,
          options: myChart.options
        });

        addLabel(myChart2, myChart.data.labels);
        addDatasets(myChart2, myChart.data.datasets);

        return myChart2;
      }

      function addLabel(chart, labels){
        chart.data.labels = [];
        for (var i = 0; i < labels.length; i++) {
          chart.data.labels.push(labels[i]);
        }
        chart.update();
      }
  
      function addDatasets(chart, dataSets){
        chart.data.datasets = [];
        for (var i = 0; i < dataSets.length; i++) {
          var newData =
          {
            label: dataSets[i].label,
            data: dataSets[i].data,
            backgroundColor: dataSets[i].backgroundColor,
            borderColor: dataSets[i].borderColor
          };
  
          chart.data.datasets.push(newData);
        }
        chart.update();
      }

      function addOptions(chart, option){
        chart.options = option;
        chart.update();
      }

      function setDefaultData(chart)
      {
        let colorChart;

        for(var i = 0; i < chart.data.datasets.length; i++)
        {
          if(type == "bar" || type == "pie")
          {
            colorChart = chart.data.datasets[i].backgroundColor;
          }
          else
          {
            colorChart = chart.data.datasets[i].borderColor;
          }
  
          $("#chart_data_" + id).append(`
              <div id="div_preview_chart_${id}_${i}" class="col-12">
                <div class="row" style="padding-top:5px; padding-bottom:5px;">
                  <div class="col-2">
                    <span>Datasource</span>
                  </div>
                  <div class="col-4">
                    <span>Data</span>
                  </div>
                  <div class="col-2">
                    <span>Aggregate</span>
                  </div>
                  <div class="col-2">
                    <span>Label</span>
                  </div>
                  <div class="col-1">
                    <span>Color</span>
                  </div>
                </div>
                <div class="row" style="padding-top:5px; padding-bottom:5px;">
                  <div class="col-2">
                    <select type="text" id="select_datasource_list_${id}_${i}" name="list_datasource" class="form-control">
                      <option value="0">-Select-</option>
                    </select>
                  </div>
                  <div class="col-4">
                    <input type="text" list="datalist_keydata_list_${id}_${i}" id="id_keydata_list_${id}_${i}" class="form-control" />
                    <datalist id="datalist_keydata_list_${id}_${i}">
                      <option value="Null"></option>
                    </datalist> 
                  </div>
                  <div class="col-2">         
                    <select type="text" id="select_agg_list_${id}_${i}" class="form-control">
                      <option value="0">-Select-</option>
                      <option value="1">Avg</option>
                      <option value="2">Max</option>
                      <option value="3">Min</option>
                    </select>
                  </div>
                  <div class="col-2">
                    <input type="text" id="label_preview_chart_${id}_${i}" class="form-control" value="${chart.data.datasets[i].label}"/>
                  </div>
                  <div class="col-1">
                    <input type="color" id="color_preview_chart_${id}_${i}" class="form-control" value="${colorChart}"/>
                  </div>
                  <div class="col-1">
                    <button type="button" id="delete_preview_chart_${id}_${i}" class="btn btn-default" ><i class="fas fa-trash-alt"></i></button>
                  </div>
                </div>
              </div>`);

          countChartData++;

          $("#label_preview_chart_" + id + "_" + i).keyup(labelPreviewChartUpdate(chart, i));
          $("#color_preview_chart_" + id + "_" + i).change(colorPreviewChartUpdate(chart, i));
          $("#delete_preview_chart_" + id + "_" + i).click(deletePreviewChartUpdate(chart, i));

          $("#select_datasource_list_" + id + "_" + i).change(dataValueUpdata(chart, i));
          $("#id_keydata_list_" + id + "_" + i).change(dataKeyValueUpdata(chart, i));
          $("#select_agg_list_" + id + "_" + i).change(dataAggValueUpdata(i));

          $("#delete_preview_chart_" + id + "_0").remove();
        }
        
        // console.log(yearlyDataTest);

        // console.log(objectPath.get(yearlyDataTest,"2016.RelativeHumidity"));

        // console.log(getFlatObject(yearlyDataTest));

        $.ajax({
          url: END_POINT + 'webservices/company',
          method: 'GET',
          success: (res) => {
            listInfoDatasource = res.data;
            console.log(listInfoDatasource);
            listInfoDatasource.map((data, index) => {
                $("select[name='list_datasource']").append(`<option value="${index + 1}">${data.service_name}</option>`);
            });
            
            for(var j = 0; j < selectDatasourceList.length; j++)
            {
              document.getElementById("select_datasource_list_" + id + "_" + j).selectedIndex = selectDatasourceList[j];         
              $("#select_datasource_list_" + id + "_" + j).change();
              $("#id_keydata_list_" + id + "_" + j).val(selectDataList[j]);
              $("#id_keydata_list_" + id + "_" + j).change();
              document.getElementById("select_agg_list_" + id + "_" + j).selectedIndex = selectAggList[j];  
            }

          },
          error: (res) => {
              console.log(res);
          }
        });

      }

      function dataValueUpdata(chart, index)
      {
        return function()
        {
          if(stateMode == "series")
          {
            let selectValue = $("#select_datasource_list_" + id + "_" + index + "_series").val();

            if(selectValue != 0)
            {
              $("#datalist_keydata_list_" + id + "_" + index + "_series").html(`<option value="Null"></option>`);
              $("#id_keydata_list_" + id + "_" + index + "_series").val("Null");          
  
              //Demo test ISUS
              let keyValueList = getFlatObject(timeSeriesTest.dataTimeSeries[0]);

              for(var key in keyValueList)
              {
                if(key != "Date")
                {
                  $("#datalist_keydata_list_" + id + "_" + index + "_series").append(`<option value="${key}"></option>`);
                }
              }
              $("#id_keydata_list_" + id + "_" + index + "_series").val("");
            
              // chart.data.labels = Object.keys(yearlyDataTest);
              // chart.update();
            }
            else
            {
              $("#datalist_keydata_list_" + id + "_" + index + "_series").html(`<option value="Null"></option>`);
              $("#id_keydata_list_" + id + "_" + index + "_series").val("Null");
            }
  
            selectDatasourceListSeries[index] = selectValue;
            var ctx = $('#canvas_' + id);
            ctx.attr('select-datasource-list-series', selectDatasourceListSeries);
          }
          else
          {
            let selectValue = $("#select_datasource_list_" + id + "_" + index).val();

            if(selectValue != 0)
            {
              $("#datalist_keydata_list_" + id + "_" + index).html(`<option value="Null"></option>`);
              $("#id_keydata_list_" + id + "_" + index).val("Null");          
  
              //Demo test ISUS
              for(let i = 0; i < $('.period-tab').length; i++)
              {
                if($('.period-tab')[i].className.includes("active"))
                {
                  periodType = $('.period-tab')[i].value;
                }  
              }

              if(periodType == "daily")
              {
                $.ajax({
                  url: END_POINT + 'infographic/getApiDaily',
                  async:false,
                  method: 'GET',
                  data: {
                    info_id: infoID
                  },
                  success: (res) => {
                    apiList[index] = res.data;
                    let keyValueList = getFlatObject(apiList[index]["daily"][0]);

                    for(var key in keyValueList)
                    {
                      if(key.includes("$"))
                      {
                        $("#datalist_keydata_list_" + id + "_" + index).append(`<option value="${key}"></option>`);
                      }
                    }

                    $("#id_keydata_list_" + id + "_" + index).val("");

                    if(chart.data.labels.length == 7 && chart.data.labels[0] == "Su")
                    {
                      chart.data.labels = [];
                      dailyLables = [];
                      chart.data.datasets[index].data = [];
                    }

                    let check = 0;
                    for(let i = 0; i < apiList[index]["daily"].length; i++)
                    {
                      for(let j = 0; j < chart.data.labels.length; j++)
                      {
                        if(apiList[index]["daily"][i]["day"] == chart.data.labels[j])
                        {
                          check = 1;
                          break;
                        }
                      }
                      if(check != 1)
                      {
                        dailyLables.push(apiList[index]["daily"][i]["day"]);
                      }
                    }

                    chart.data.labels = dailyLables;
                    chart.update();
                  },
                  error: (res) => {
                    console.log(res);
                  }
                });
              }
              else if(periodType == "monthly")
              {
                $.ajax({
                  url: END_POINT + 'infographic/getApiMonthly',
                  async:false,
                  method: 'GET',
                  data: {
                    info_id: infoID
                  },
                  success: (res) => {
                    apiList[index] = res.data;
                    let keyValueList = getFlatObject(apiList[index]["monthly"][0]);
                    for(var key in keyValueList)
                    {
                      if(key.includes("$"))
                      {
                        $("#datalist_keydata_list_" + id + "_" + index).append(`<option value="${key}"></option>`);
                      }
                    }
                    $("#id_keydata_list_" + id + "_" + index).val("");

                    if(chart.data.labels.length == 7 && chart.data.labels[0] == "Su")
                    {
                      chart.data.labels = [];
                      monthlyLables = [];
                      chart.data.datasets[index].data = [];
                    }

                    let check = 0;
                    for(let i = 0; i < apiList[index]["monthly"].length; i++)
                    {
                      for(let j = 0; j < chart.data.labels.length; j++)
                      {
                        if(apiList[index]["monthly"][i]["day"] == chart.data.labels[j])
                        {
                          check = 1;
                          break;
                        }
                      }
                      if(check != 1)
                      {
                        monthlyLables.push(apiList[index]["monthly"][i]["day"]);
                      }
                    }

                    chart.data.labels = monthlyLables;
                    chart.update();
                  },
                  error: (res) => {
                    console.log(res);
                  }
                });
              }




            }
            else
            {
              $("#datalist_keydata_list_" + id + "_" + index).html(`<option value="Null"></option>`);
              $("#id_keydata_list_" + id + "_" + index).val("Null");
            }
  
            selectDatasourceList[index] = selectValue;
            var ctx = $('#canvas_' + id);
            ctx.attr('select-datasource-list', selectDatasourceList);
          }
        };
      }

      function dataKeyValueUpdata(chart, index)
      {
        return function()
        {
          if(stateMode == "series")
          {
            let selectKeyValue = $("#id_keydata_list_" + id + "_" + index + "_series").val();

            if(selectKeyValue != "Null")
            {
              chart.data.datasets[index].data = [];

              let keyValueList = getFlatObject(timeSeriesTest);

              for(var key in keyValueList)
              {
                if(key.includes(selectKeyValue))
                {
                  let path =  key.replace(new RegExp('\\/', 'g'), '.');
                  let dateFormat = objectPath.get(timeSeriesTest, path.replace(selectKeyValue, 'Date')).split('/');
                  let day = dateFormat[0];
                  let month = dateFormat[1];
                  let year = dateFormat[2];

                  var t = {x: new Date(year,month,day), y: objectPath.get(timeSeriesTest, path)};
                  chart.data.datasets[index].data.push(t);
                }
              }
              chart.update();
            }
  
            selectDataListSeries[index] = $("#id_keydata_list_" + id + "_" + index + "_series").val();
            var ctx = $('#canvas_' + id);
            ctx.attr('select-keydata-list-series', selectDataListSeries);
          }
          else
          {
            let selectKeyValue = $("#id_keydata_list_" + id + "_" + index).val();

            if(selectKeyValue != "Null")
            {
              // let keyValueList = getFlatObject(apiList[index]["daily"]);
              // console.log(objectPath.get(apiList[index],"daily.0." + selectKeyValue));
              
              if(periodType == "daily")
              {
                for(let i = 0; i < apiList[index]["daily"].length; i++)
                {
                  for(let j = 0; j < chart.data.labels.length; j++)
                  {
                    let dateApi = objectPath.get(apiList[index],"daily."+ i +".day");
                    if(chart.data.labels[j] == dateApi)
                    {
                      chart.data.datasets[index].data[j] = objectPath.get(apiList[index],"daily."+ i + "." + selectKeyValue);
                      break;
                    }
                  }
                }
              }
              else if(periodType == "monthly")
              {
                for(let i = 0; i < apiList[index]["monthly"].length; i++)
                {
                  for(let j = 0; j < chart.data.labels.length; j++)
                  {
                    let dateApi = objectPath.get(apiList[index],"monthly."+ i +".day");
                    if(chart.data.labels[j] == dateApi)
                    {
                      console.log(objectPath.get(apiList[index],"monthly."+ i +"." + selectKeyValue));
                      chart.data.datasets[index].data[j] = objectPath.get(apiList[index],"monthly."+ i +"." + selectKeyValue);
                      break;
                    }
                  }
                }
              }
              chart.update();

              // chart.data.datasets[index].data = [];
  
              // for(var key in keyValueList)
              // {
              //   if(key.includes(selectKeyValue))
              //   {
              //     var t = objectPath.get(yearlyDataTest, key.replace('/', '.'));
              //     chart.data.datasets[index].data.push(t);
              //   }       
              // }
              // chart.update();
            }
  
            selectDataList[index] = $("#id_keydata_list_" + id + "_" + index).val();
            var ctx = $('#canvas_' + id);
            ctx.attr('select-keydata-list', selectDataList);
          }
        };
      }

      function dataAggValueUpdata(index)
      {
        return function()
        {
          let selectValue = $("#select_agg_list_" + id + "_" + index).val();

          if(selectValue != 0)
          {
          }

          selectAggList[index] = $("#select_agg_list_" + id + "_" + index).val();
          var ctx = $('#canvas_' + id);
          ctx.attr('select-agg-list', selectAggList);
        };
      }

      function colorPreviewChartUpdate(chart, index)
      {
        return function()
        {
          if(type == "bar" || type == "pie")
          {
            if(stateMode == "series")
            {
              chart.data.datasets[index].backgroundColor =  $("#color_preview_chart_" + id + "_" + index + "_series").val();
            }
            else
            {
              chart.data.datasets[index].backgroundColor =  $("#color_preview_chart_" + id + "_" + index).val();
            }  
          }
          else
          {
            if(stateMode == "series")
            {
              chart.data.datasets[index].borderColor =  $("#color_preview_chart_" + id + "_" + index + "_series").val();
            }
            else
            {
              chart.data.datasets[index].borderColor =  $("#color_preview_chart_" + id + "_" + index).val();
            }
          }

          chart.update();
        };
      }

      function labelPreviewChartUpdate(chart, index)
      {
        return function()
        {
          if(stateMode == "series")
          {
            chart.data.datasets[index].label =  $("#label_preview_chart_" + id + "_" + index + "_series").val();
            chart.update();
          }
          else
          {
            chart.data.datasets[index].label =  $("#label_preview_chart_" + id + "_" + index).val();
            chart.update();
          }

        };
      }

      function deletePreviewChartUpdate(chart, index)
      {
        return function()
        {
          if(stateMode == "series")
          {
            chart.data.datasets.splice(index, 1);
            chart.update();

            let ctx  = $("#chart_data_" + id + "_series");
            ctx.contents().remove();

            setDefaultDataSeries(chart);

            selectDatasourceListSeries.splice(index, 1);
            selectDataListSeries.splice(index, 1);
          }
          else
          {
            chart.data.datasets.splice(index, 1);
            chart.update();

            let ctx  = $("#chart_data_" + id);
            ctx.contents().remove();

            setDefaultData(chart);

            selectDatasourceList.splice(index, 1);
            selectDataList.splice(index, 1);
            selectAggList.splice(index, 1);
          }
        };
      }

      function setDefaultDataSeries(chart)
      {
        let colorChart;

        for(var i = 0; i < chart.data.datasets.length; i++)
        {
          if(type == "bar" || type == "pie")
          {
            colorChart = chart.data.datasets[i].backgroundColor;
          }
          else
          {
            colorChart = chart.data.datasets[i].borderColor;
          }
  
          $("#chart_data_" + id + "_series").append(`
              <div id="div_preview_chart_${id}_${i}_series" class="col-12">
                <div class="row" style="padding-top:5px; padding-bottom:5px;">
                  <div class="col-2">
                    <span>Datasource</span>
                  </div>
                  <div class="col-6">
                    <span>Data</span>
                  </div>
                  <div class="col-2">
                    <span>Label</span>
                  </div>
                  <div class="col-1">
                    <span>Color</span>
                  </div>
                </div>
                <div class="row" style="padding-top:5px; padding-bottom:5px;">
                  <div class="col-2">
                    <select type="text" id="select_datasource_list_${id}_${i}_series" name="list_datasource_series" class="form-control">
                      <option value="0">-Select-</option>
                    </select>
                  </div>
                  <div class="col-6">
                    <input type="text" list="datalist_keydata_list_${id}_${i}_series" id="id_keydata_list_${id}_${i}_series" class="form-control" />
                    <datalist id="datalist_keydata_list_${id}_${i}_series">
                      <option value="Null"></option>
                    </datalist> 
                  </div>
                  <div class="col-2">
                    <input type="text" id="label_preview_chart_${id}_${i}_series" class="form-control" value="${chart.data.datasets[i].label}"/>
                  </div>
                  <div class="col-1">
                    <input type="color" id="color_preview_chart_${id}_${i}_series" class="form-control" value="${colorChart}"/>
                  </div>
                  <div class="col-1">
                    <button type="button" id="delete_preview_chart_${id}_${i}_series" class="btn btn-default" ><i class="fas fa-trash-alt"></i></button>
                  </div>
                </div>
              </div>`);

          countChartData++;

          $("#label_preview_chart_" + id + "_" + i + "_series").keyup(labelPreviewChartUpdate(chart, i));
          $("#color_preview_chart_" + id + "_" + i + "_series").change(colorPreviewChartUpdate(chart, i));
          $("#delete_preview_chart_" + id + "_" + i + "_series").click(deletePreviewChartUpdate(chart, i));

          $("#select_datasource_list_" + id + "_" + i + "_series").change(dataValueUpdata(chart, i));
          $("#id_keydata_list_" + id + "_" + i + "_series").change(dataKeyValueUpdata(chart, i));

          $("#delete_preview_chart_" + id + "_0" + "_series").remove();
        }
        
        $.ajax({
          url: END_POINT + 'webservices/company',
          method: 'GET',
          data: {
            info_id: infoID
          },
          success: (res) => {
            listInfoDatasource = res.data;
            console.log(listInfoDatasource);
            listInfoDatasource.map((data, index) => {
                $("select[name='list_datasource_series']").append(`<option value="${index + 1}">${data.name}</option>`);
            });
            
            for(var j = 0; j < selectDatasourceListSeries.length; j++)
            {
              document.getElementById("select_datasource_list_" + id + "_" + j + "_series").selectedIndex = selectDatasourceListSeries[j];         
              $("#select_datasource_list_" + id + "_" + j + "_series").change();
              $("#id_keydata_list_" + id + "_" + j + "_series").val(selectDataListSeries[j]);
              $("#id_keydata_list_" + id + "_" + j + "_series").change();
              console.log(selectDataListSeries[j]);
            }

          },
          error: (res) => {
              console.log(res);
          }
        });

      }

    }

    this.createCropImage = (id, full_id, full_id_image) => {
      let cropObject;

      $(".propertyMenu-2-paper").append(`                
          <div class="propertyMenu-2-block">
            <button type="button" id="crop_image_widget_${id}" class="btn btn-default form-control button-width">Crop image</button>     
          </div>`);

      $("#crop_image_widget_" + id).click(function () {
        $("#modelCrop_" + id).remove();
        var modalCrop = `
        <div class="modal" id="modelCrop_${id}" class="modelcropper">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title">Crop image</h4>
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                    </div>

                    <div class="modal-body">
                        <div class="row">
                            <div class="col-11 text-center">
                                <img id="image_crop_${id}" style="max-width: 100%; max-height:50%;" />
                            </div>
                        </div>
                    </div>

                    <div class="modal-footer">
                        <button type="button" id="save_image_crop_${id}" class="btn btn-success">Save</button>
                    </div>
                </div>
            </div>
        </div>`;

        $('body').append(modalCrop);
        $("#modelCrop_" + id).modal('show');
        $("#image_crop_" + id).attr("src", $(full_id_image).attr("src"));
        let image = document.getElementById('image_crop_' + id);
        cropObject = new Cropper(image, {});

        $("#save_image_crop_" + id).click(function () {
          $(full_id_image).attr("src", cropObject.getCroppedCanvas({width: 500, height: 500}).toDataURL());
          cropObject.destroy();
          $("#modelCrop_" + id).modal('hide');
          $("#modelCrop_" + id).modal('dispose');
          $("#modelCrop_" + id).remove();
        });
      });
    }

    this.createTextchange = (id, full_id) => {
      $(".propertyMenu-2-paper").append(`                      
          <div class="propertyMenu-2-block">
            <div class="container">
                <div class="row row-block">
                    <span>Text change</span>
                </div>
                <div class="row row-block">
                    <input type="text" id="inputtext_${id}" class="form-control"/>
                </div>
            </div>    
          </div>`);

      // Set start value
      $("#inputtext_" + id).val($("#span_" + id).html());

      $("#inputtext_" + id).keyup(function () {
        $("#span_" + id).html($("#inputtext_" + id).val());
      });
    }

    this.createImportData = (id, full_id) => {
      $(".propertyMenu-2-paper").append(`                
          <div class="propertyMenu-2-block">
            <button type="button" class="btn btn-default form-control button-width">Import data</button>    
          </div>`);
    }

    this.createScale = (id, full_id, type) => {
      $(".propertyMenu-2-paper").append(`  
          <div class="propertyMenu-2-block">
            <div class="container">
                <div class="row row-block">
                    <div class="col-6">
                        <span>Width (px)</span>
                    </div>
                    <div class="col-6">
                        <span>Height (px)</span>
                    </div>
                </div>
                <div class="row row-block">
                    <div class="col-6">
                        <input type="text" id="width_${id}" class="form-control" />
                    </div>
                    <div class="col-6">
                        <input type="text" id="height_${id}" class="form-control" />
                    </div>
                </div>
            </div>    
          </div>`);

      // Set start value
      $("#width_" + id).val(Math.round($(full_id).width()));
      $("#height_" + id).val(Math.round($(full_id).height()));

      $("#width_" + id).unbind().change(function () {
        $(full_id).css('width', $("#width_" + id).val());
        $(full_id).css('height', $("#height_" + id).val());

        if(type == "map")
        {
          $("#map_" + id).css('width', $("#width_" + id).val() - 100);
          $("#map_" + id).css('height', $("#height_" + id).val() - 100);
        }
      });

      $("#height_" + id).unbind().change(function () {
        $(full_id).css('width', $("#width_" + id).val());
        $(full_id).css('height', $("#height_" + id).val());

        if(type == "map")
        {
          $("#map_" + id).css('width', $("#width_" + id).val() - 100);
          $("#map_" + id).css('height', $("#height_" + id).val() - 100);
        }
      });
    }

    this.createAddColumnAndRow = (id, full_id) => {
      $(".propertyMenu-2-paper").append(`    
          <div class="propertyMenu-2-block">
            <div class="container">
                <div class="row row-block">
                    <span>New column name</span>
                </div>
                <div class="row row-block">
                    <div class="col-7">
                        <input type="text" id="column_name_${id}" class="form-control"/>
                    </div>
                    <div class="col-2">
                        <button type="button" id="add_column_${id}" class="btn btn-default" ><i class="fas fa-angle-right"></i></button>
                    </div>
                    <div class="col-1">
                        <button type="button" id="add_row_${id}" class="btn btn-default" ><i class="fas fa-angle-down"></i></button>
                    </div>
                </div>
                <div class="row-block">
                    <button type="button" id="delete_column_${id}" class="btn btn-default form-control button-width">Delete column</button>
                </div>
                <div class="row-block">
                    <button type="button" id="delete_row_${id}" class="btn btn-default form-control button-width">Delete row</button>
                </div>
            </div>    
          </div>`);

      $("#add_column_" + id).unbind().click(function () {
        var tableObject = $(full_id);
        var countCells = tableObject[0].rows[0].cells.length;

        for(var i = 0; i < tableObject[0].rows.length; i++)
        {
          var row = tableObject[0].rows[i];
          var cells;

          if(i == 0)
          {
            cells = row.cells[row.cells.length - 1];
            cells.insertAdjacentHTML("afterend", "<th>" + $("#column_name_" + id).val() + "</th>");
          }
          else
          {
            cells = row.insertCell(countCells);
            cells.innerHTML = "Data";
          }
        }  

        editTable();
      });

      $("#add_row_" + id).unbind().click(function () {
        var tableObject = $(full_id);
        var tableHtml = document.getElementById("table_" + id);
        var row = tableHtml.insertRow(tableObject[0].rows.length);

        for(var i = 0; i < tableObject[0].rows[0].cells.length; i++)
        {
          var cells = row.insertCell(i);
          cells.innerHTML = "Data";
        }      

        editTable();
      });

      $("#delete_column_" + id).unbind().click(function () {
        var tableObject = $(full_id);
        var countCells = tableObject[0].rows[0].cells.length;

        for(var i = 0; i < tableObject[0].rows.length; i++)
        {
          var row = tableObject[0].rows[i];
          row.deleteCell(countCells - 1);      
        }  
      });

      $("#delete_row_" + id).unbind().click(function () {
        var tableObject = $(full_id);
        var tableHtml = document.getElementById("table_" + id);
        tableHtml.deleteRow(tableObject[0].rows.length - 1);    
      });
      
      function editTable(){
        const editor = new SimpleTableCellEditor("table_" + id);
        editor.SetEditable("td",{
          keys : {
          validation: [13],
          cancellation: [27]
          }
        });

        editor.SetEditable("th",{
          keys : {
          validation: [13],
          cancellation: [27]
          }
        });
      }
    }

    this.createThemesTable = (id, full_id) => {
      $(".propertyMenu-2-paper").append(`  
          <div class="propertyMenu-2-block">
            <div class="container">
                <div class="row row-block">
                    <span>Themes</span>
                </div>
                <div class="row row-block">
                    <select type="text" id="themes_table_${id}" class="form-control">
                      <option value="1">Default</option>
                      <option value="2">Striped</option>
                      <option value="3">Bordered</option>
                    </select>
                </div>
            </div>    
          </div>`);

      var arrayClass = ["table-striped","table-bordered"];

      // Set start value
      document.getElementById("themes_table_" + id).selectedIndex = ($(full_id).attr('table-class') || 1) - 1;

      $("#themes_table_" + id).unbind().change(function () {

        // Remove table class
        var classList = document.getElementById('table_' + id).className.split(/\s+/);

        for (var i = 0; i < classList.length; i++) 
        {
            if(arrayClass.includes(classList[i]))
            {
              $(full_id).removeClass(classList[i]);
            }
        }
  
        // Add new table class
        var classSelect = $("#themes_table_" + id).val();
        
        switch(classSelect)
        {
          case "1" :
            $(full_id).attr('table-class', '1');
            break;
          case "2" :
            $(full_id).addClass('table-striped');
            $(full_id).attr('table-class', '2');
            break;
          case "3" :
          $(full_id).addClass('table-bordered');
            $(full_id).attr('table-class', '3');
            break;
        }
      });
    }

    this.createColorAndFont = (id, full_id) => {
      $(".propertyMenu-2-paper").append(`    
          <div class="propertyMenu-2-block">
            <div class="container">
                <div class="row row-block">
                    <div class="col-6 text-align-left">
                        <span>Color</span>
                    </div>
                    <div class="col-6 text-align-left">
                        <span>Font</span>
                    </div>
                </div>
                <div class="row row-block">
                    <div class="col-6">
                        <input type="color" id="color_font_${id}" class="form-control">
                    </div>
                    <div class="col-6">
                        <select type="text" id="family_font_${id}" class="form-control">
                          <option value="1">Poppins</option>
                          <option value="2">Times New Roman</option>
                          <option value="3">Arial</option>
                          <option value="4">Arial Black</option>
                          <option value="5">Georgia</option>
                          <option value="6">Tahoma</option>
                          <option value="7">Lucida Console</option>
                          <option value="8">Courier New</option>
                        </select>
                    </div>
                </div>
            </div>    
          </div>`);

      // Set start value
      $("#color_font_" + id).val(rgbToHex($("#span_" + id).css('color')));
      document.getElementById("family_font_" + id).selectedIndex = ($(full_id).attr('font-value') || 1) - 1;

      $("#color_font_" + id).unbind().change(function () {
        $("#span_" + id).css('color', $(this).val());
      });

      $("#family_font_" + id).unbind().change(function () {
        var fontSelect = $("#family_font_" + id).val();
        
        switch(fontSelect)
        {
          case "1" :
            $(full_id).css('font-family', 'Poppins, Kanit, sans-serif');
            $(full_id).attr('font-value', '1');
            break;
          case "2" :
            $(full_id).css('font-family', 'Times New Roman, Times, serif');
            $(full_id).attr('font-value', '2');
            break;
          case "3" :
            $(full_id).css('font-family', 'Arial, Helvetica, sans-serif');
            $(full_id).attr('font-value', '3');
            break;
          case "4" :
            $(full_id).css('font-family', 'Arial Black, Gadget, sans-serif');
            $(full_id).attr('font-value', '4');
            break;
          case "5" :
            $(full_id).css('font-family', 'Georgia, serif');
            $(full_id).attr('font-value', '5');
            break;
          case "6" :
            $(full_id).css('font-family', 'Tahoma, Geneva, sans-serif');
            $(full_id).attr('font-value', '6');
            break;
          case "7" :
            $(full_id).css('font-family', 'Lucida Console, Monaco, monospace');
            $(full_id).attr('font-value', '7');
            break;
          case "8" :
            $(full_id).css('font-family', 'Courier New, Courier, monospace');
            $(full_id).attr('font-value', '8');
            break;
        }
      });

      // Convert rgb code to hex code
      function rgbToHex(color) {
        color = "" + color;
        if (!color || color.indexOf("rgb") < 0) {
          return;
        }

        if (color.charAt(0) == "#") {
          return color;
        }

        var nums = /(.*?)rgb\((\d+),\s*(\d+),\s*(\d+)\)/i.exec(color),
          r = parseInt(nums[2], 10).toString(16),
          g = parseInt(nums[3], 10).toString(16),
          b = parseInt(nums[4], 10).toString(16);

        return "#" + (
          (r.length == 1 ? "0" + r : r) +
          (g.length == 1 ? "0" + g : g) +
          (b.length == 1 ? "0" + b : b)
        );
      }
    }

    this.createColorAndDeleteForShape = (id, full_id, full_id_shape, type) => {
      $(".propertyMenu-2-paper").append(` 
      <div class="propertyMenu-2-block">
        <div class="container">
            <div class="row row-block">
                <span>Color</span>
            </div>
            <div class="row row-block">
                <input type="color" class="form-control" id="color_shape_${id}">
            </div>
        </div>    
      </div>`);
      
      if(type == "square" || type == "circle")
      {
        // Set start value
        console.log($(full_id_shape).css('background-color'));
        $("#color_shape_" + id).val(rgbToHex($(full_id_shape).css('background-color')));

        $("#color_shape_" + id).unbind().change(function () {
          $(full_id_shape).css('background-color', $(this).val());
        });
      }
      else if(type == "string")
      {
        // Set start value
        $("#color_shape_" + id).val(rgbToHex($(full_id_shape).css('border-right-color')));

        $("#color_shape_" + id).unbind().change(function () {
          $(full_id_shape).css('border-right-color', $(this).val());
        });
      }

      // Convert rgb code to hex code
      function rgbToHex(color) {
        color = "" + color;
        if (!color || color.indexOf("rgb") < 0) {
          return;
        }

        if (color.charAt(0) == "#") {
          return color;
        }

        var nums = /(.*?)rgb\((\d+),\s*(\d+),\s*(\d+)\)/i.exec(color),
          r = parseInt(nums[2], 10).toString(16),
          g = parseInt(nums[3], 10).toString(16),
          b = parseInt(nums[4], 10).toString(16);

        return "#" + (
          (r.length == 1 ? "0" + r : r) +
          (g.length == 1 ? "0" + g : g) +
          (b.length == 1 ? "0" + b : b)
        );
      }
    }

    this.createStringStyle = (id, full_id, full_id_shape) => {
      $(".propertyMenu-2-paper").append(`          
          <div class="propertyMenu-2-block">
            <div class="container">
                <div class="row row-block">
                    <div class="col-4">
                        <button type="button" id="solid_style_${id}" class="btn btn-default" ><i class="fas fa-minus"></i></button>
                    </div>
                    <div class="col-4">
                        <button type="button" id="dotted_style_${id}" class="btn btn-default" ><i class="fas fa-ellipsis-h"></i></button>
                    </div>
                    <div class="col-4">
                        <button type="button" id="double_style_${id}" class="btn btn-default" ><i class="fas fa-equals"></i></button>
                    </div>
                </div>
            </div>    
          </div>`);
          
      $("#solid_style_" + id).unbind().click(function () {
        $(full_id_shape).css('border-right-style', "solid");
      });

      $("#dotted_style_" + id).unbind().click(function () {
        $(full_id_shape).css('border-right-style', "dotted");
      });

      $("#double_style_" + id).unbind().click(function () {
        $(full_id_shape).css('border-right-style', "double");
      });
    }

    this.createFontSize = (id, full_id) => {
      $(".propertyMenu-2-paper").append(` 
          <div class="propertyMenu-2-block">
            <div class="container">
                <div class="row row-block">
                    <span>Font size (pt)</span>
                </div>
                <div class="row row-block">
                    <div class="col-8" style="padding-left:0px;">
                        <input type="range" min="9" max="120" value="9" id="slider_font_widget_${id}" class="slider" />
                    </div>
                    <div class="col-4">
                        <input type="text" id="slider_font_input_widget_${id}" class="form-control" />
                    </div>
                </div>
            </div>    
          </div>`);

      // Set start value
      $("#slider_font_widget_" + id).val($(full_id).css('font-size').replace('px', ''));
      $("#slider_font_input_widget_" + id).val($(full_id).css('font-size').replace('px', ''));

      $("#slider_font_widget_" + id).unbind().change(function () {
        $("#slider_font_input_widget_" + id).val($(this).val());
        $(full_id).css('font-size', $(this).val() + "px");
      });

      $("#slider_font_input_widget_" + id).unbind().change(function () {
        if ($(this).val() < 9 || $(this).val() > 120) {
          alert("test : 9 - 120");
        }
        else {
          $("#slider_font_widget_" + id).val($(this).val());
          $(full_id).css('font-size', $(this).val() + "px");
        }
      });
    }

    this.createRotation = (id, full_id) => {
      $(".propertyMenu-2-paper").append(` 
          <div class="propertyMenu-2-block">
            <div class="container">
                <div class="row row-block">
                    <span>Rotation</span>
                </div>
                <div class="row row-block">
                    <div class="col-8" style="padding-left:0px;">
                        <input type="range" min="0" max="360" value="0" id="slider_rotation_widget_${id}" class="slider" />
                    </div>
                    <div class="col-4">
                        <input type="text" id="slider_rotation_input_widget_${id}" class="form-control" />
                    </div>
                </div>
            </div>    
          </div>`);

      var x = $(full_id).attr("data-x");
      var y = $(full_id).attr("data-y");
      var z = ($(full_id).attr("data-z") || 0);

      // Set start value
      $("#slider_rotation_widget_" + id).val(z);
      $("#slider_rotation_input_widget_" + id).val(z);

      $("#slider_rotation_widget_" + id).unbind().change(function () {
        var rotationValue = $(this).val();
        $("#slider_rotation_input_widget_" + id).val(rotationValue);
        $(full_id).attr('data-z', rotationValue);
        $(full_id).css('transform', 'translate(' + x + 'px, ' + y + 'px) rotate(' + rotationValue + 'deg)')
      });

      $("#slider_rotation_input_widget_" + id).unbind().change(function () {
        if ($(this).val() < 0 || $(this).val() > 360) {
          alert("test : 0 - 360");
        }
        else {
          var rotationValue = $(this).val();
          $("#slider_rotation_widget_" + id).val(rotationValue);
          $(full_id).attr('data-z', rotationValue);
          $(full_id).css('transform', 'translate(' + x + 'px, ' + y + 'px) rotate(' + rotationValue + 'deg)')
        }
      });
    }

    this.createTransparency = (id, full_id) => {
      $(".propertyMenu-2-paper").append(`    
          <div class="propertyMenu-2-block">
            <div class="container">
                <div class="row row-block">
                    <span>Transparency (%)</span>
                </div>
                <div class="row row-block">
                    <div class="col-8" style="padding-left:0px;">
                        <input type="range" min="0" max="100" value="1" id="slider_tran_widget_${id}" class="slider" />
                    </div>
                    <div class="col-4">
                        <input type="text" id="slider_tran_input_widget_${id}" class="form-control" />
                    </div>
                </div>
            </div>    
          </div>`);
          
      // Set start value
      $("#slider_tran_widget_" + id).val(100 - ($(full_id).css('opacity') * 100));
      $("#slider_tran_input_widget_" + id).val(100 - ($(full_id).css('opacity') * 100));

      $("#slider_tran_widget_" + id).unbind().change(function () {
        var opacityValue = (100 - $(this).val()) / 100;
        $("#slider_tran_input_widget_" + id).val($(this).val());
        $(full_id).css('opacity', opacityValue);
      });

      $("#slider_tran_input_widget_" + id).unbind().change(function () {
        if ($(this).val() < 0 || $(this).val() > 100) {
          alert("test : 0 - 100");
        }
        else {
          var opacityValue = (100 - $(this).val()) / 100;
          $("#slider_tran_widget_" + id).val($(this).val());
          $(full_id).css('opacity', opacityValue);
        }
      });
    }

    this.createBorderRadius = (id, full_id, full_id_shape) => {
      $(".propertyMenu-2-paper").append(` 
          <div class="propertyMenu-2-block">
            <div class="container">
                <div class="row row-block">
                    <span>Border radius (%)</span>
                </div>
                <div class="row row-block">
                    <div class="col-8" style="padding-left:0px;">
                        <input type="range" min="0" max="50" value="0" id="slider_radius_widget_${id}" class="slider" />
                    </div>
                    <div class="col-4">
                        <input type="text" id="slider_radius_input_widget_${id}" class="form-control" />
                    </div>
                </div>
            </div>    
          </div>`);
          
      // Set start value
      $("#slider_radius_widget_" + id).val($(full_id_shape).css('border-radius').replace('%', ''));
      $("#slider_radius_input_widget_" + id).val($(full_id_shape).css('border-radius').replace('%', ''));

      $("#slider_radius_widget_" + id).unbind().change(function () {
        var radiusValue = $(this).val();
        $("#slider_radius_input_widget_" + id).val($(this).val());
        $(full_id_shape).css('border-radius', radiusValue + "%");
      });

      $("#slider_radius_input_widget_" + id).unbind().change(function () {
        if ($(this).val() < 0 || $(this).val() > 50) {
          alert("test : 0 - 50");
        }
        else {
          var radiusValue = $(this).val();
          $("#slider_radius_widget_" + id).val($(this).val());
          $(full_id_shape).css('border-radius', radiusValue + "%");
        }
      });
    }

    this.createBorderWidth = (id, full_id, full_id_shape) => {
      $(".propertyMenu-2-paper").append(` 
          <div class="propertyMenu-2-block">
            <div class="container">
                <div class="row row-block">
                    <span>Border width (px)</span>
                </div>
                <div class="row row-block">
                    <div class="col-8" style="padding-left:0px;">
                        <input type="range" min="5" max="20" value="0" id="slider_width_widget_${id}" class="slider" />
                    </div>
                    <div class="col-4">
                        <input type="text" id="slider_width_input_widget_${id}" class="form-control" />
                    </div>
                </div>
            </div>    
          </div>`);
          
      // Set start value
      $("#slider_width_widget_" + id).val($(full_id_shape).css('border-right-width').replace('px', ''));
      $("#slider_width_input_widget_" + id).val($(full_id_shape).css('border-right-width').replace('px', ''));

      $("#slider_width_widget_" + id).unbind().change(function () {
        var widthValue = $(this).val();
        $("#slider_width_input_widget_" + id).val($(this).val());
        $(full_id_shape).css('border-right-width', widthValue + "px");
      });

      $("#slider_width_input_widget_" + id).unbind().change(function () {
        if ($(this).val() < 5 || $(this).val() > 20) {
          alert("test : 0 - 50");
        }
        else {
          var widthValue = $(this).val();
          $("#slider_width_widget_" + id).val($(this).val());
          $(full_id_shape).css('border-right-width', widthValue + "px");
        }
      });
    }

    this.createChartDetail = (id, full_id, myChart) => {
      $(".propertyMenu-2-paper").append(`  
          <div class="propertyMenu-2-block">
            <div class="container">
                <div class="row row-block">
                    <span>Chart properties</span>
                </div>
                <div id="color_and_text_${id}">
                </div>
            </div>    
          </div>`);

        for(var i = 0; i < myChart.data.datasets.length; i++)
        {
          $("#color_and_text_" + id).append(`   
              <div class="row row-block">
                <div class="col-4">
                    <input type="color" id="color_chart_${id}_${i}" class="form-control" value="${myChart.data.datasets[i].borderColor}">
                </div>
                <div class="col-8">
                    <input type="text" id="label_chart_${id}_${i}" class="form-control" value="${myChart.data.datasets[i].label}" />
                </div>
              </div>`);

            $("#color_chart_" + id + "_" + i).change(colorChartUpdate(myChart, i));
            $("#label_chart_" + id + "_" + i).keyup(labelChartUpdate(myChart, i));
        }

        function colorChartUpdate(myChart, index)
        {
          return function()
          {
            myChart.data.datasets[index].borderColor =  $("#color_chart_" + id + "_" + index).val();
            myChart.update();

            var ctx = $('#canvas_' + id);
            ctx.data("graph", myChart);
          };
        }

        function labelChartUpdate(myChart, index)
        {
          return function()
          {
            myChart.data.datasets[index].label =  $("#label_chart_" + id + "_" + index).val();
            myChart.update();

            var ctx = $('#canvas_' + id);
            ctx.data("graph", myChart);
          };
        }
    }

    this.createMapEvent = (mapObject, full_id) => {
      mapObject.on('mousemove', disableDraggable);
      mapObject.on('mouseout', enableDraggable);

      function disableDraggable(){
        interact(full_id).draggable(false);
        return;
      }

      function enableDraggable(){
        interact(full_id).draggable(true);
        return;
      }
    }
  } // Constructor
} // Property class

class ContentProperty extends Property {
  constructor() {
    /* Call function property */
    /* Select property for each widget type */
    super();
    this.createGraphProp = (id, myChart, full_id, type) => {
      this.createContext(id, full_id, type, myChart);
      this.createEditdata(id, myChart, full_id, type);
      this.createScale(id, full_id, type);
      this.createRotation(id, full_id);
      this.createTransparency(id, full_id);
      // this.createChartDetail(id, full_id, myChart);
    }

    this.createMapProp = (id, full_id, type, mapObject) => {
      this.createContext(id, full_id, type, null);
      this.createScale(id, full_id, type);
      this.createRotation(id, full_id);
      this.createTransparency(id, full_id);
      this.createMapEvent(mapObject, full_id);
    }

    this.createTextProp = (id, full_id, type) => {
      this.createContext(id, full_id, type, null);
      this.createTextchange(id, full_id);
      this.createScale(id, full_id, type);
      this.createRotation(id, full_id);
      this.createTransparency(id, full_id);
      this.createColorAndFont(id, full_id);
      this.createFontSize(id, full_id);
    }

    this.createTableProp = (id, full_id, type) => {
      this.createContext(id, full_id, type, null);
      this.createImportData(id, full_id);
      this.createScale(id, full_id, type);
      this.createAddColumnAndRow(id, full_id);
      this.createThemesTable(id, full_id);
      this.createRotation(id, full_id);
      this.createTransparency(id, full_id);
    }

    this.createImageProp = (id, full_id, full_id_image, type) =>{
      this.createContext(id, full_id, type, null);
      this.createCropImage(id, full_id, full_id_image);
      this.createScale(id, full_id, type);
      this.createRotation(id, full_id);
      this.createTransparency(id, full_id);
      this.createBorderRadius(id, full_id, full_id_image);
    }

    this.createShapeProp = (id, full_id, full_id_shape, type) =>{
      this.createContext(id, full_id, type, null);
      this.createColorAndDeleteForShape(id, full_id, full_id_shape, type);

      if(type == "string")
      {
        this.createStringStyle(id, full_id, full_id_shape);
      }

      this.createScale(id, full_id, type);
      this.createRotation(id, full_id);
      this.createTransparency(id, full_id);

      if(type == "string")
      {
        this.createBorderWidth(id, full_id, full_id_shape);
      }
      else
      {
        this.createBorderRadius(id, full_id, full_id_shape);   
      }
    }
  } // Constructor
} // ContentProperty class

/* Set initial value */
$(document).ready(function () {
  let workspace = new Workspace();
  var object    = null;

  /* Setting element */
  workspace.initialAndRun({});

  /* Get saved data */
  $.ajax({
    url: END_POINT + 'infographic/getInfoByInfoID',
    method: 'GET',
    data: {
        info_id: infoID
    },
    success: (res) => {
      if(res.data.info_data != null)
      {
        object = CircularJSON.parse(res.data.info_data);
        workspace.loadWidgetData(object);
      }
    },
    error: (res) => {
      console.log("error");
    }
  }); //Ajax
}); //Document ready

/* Globle function */
function arrayRemove(arr, value) {
  return arr.filter(function (ele) {
    return ele.id != value;
  });
}

let deepCopy = (data) => {
  return data.map((item) => {
      return Object.assign({}, item);
  });
};

