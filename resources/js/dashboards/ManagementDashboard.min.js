import {elements} from './ViewBase.min';

const WIDGET_TYPE = {
    BAR: 'Bar',
    MUTILINE: 'MutiLine',
    MUTILINE_STATIC: 'MutiLine_static',
    TEXTLINE: 'TextLine',
    RADAR: 'Radar',
    RADAR_STATIC: 'Radar_static',
    GAUGES: 'Gauges',
    MAP: 'Map',
    MAP_STATIC: 'Map_static',
    TEXTVALUE: 'TextValue',
    TABLE: 'Table',
    TABLE_STATIC: 'Table_static',
    TEXTBOX: 'TextBox',
};

let PERIOD = {
    TODAY: 'Today',
    YESTERDAY: 'Yesterday',
    CURRENT_WEEK: 'Current Week',
    WEEK_1: '1 Week',
    WEEK_2: '2 Week',
    WEEK_4: '4 Week',
    CURRENT_MONTH: 'Current Month',
    LAST_MONTH: 'Last Month',
    MONTH_3: '3 Month',
    MONTH_6: '6 Month',
    MONTH_12: '12 Month',
    CUSTOM: 'Custom'
}

let state = {
    selectWidgetType : WIDGET_TYPE.MUTILINE,
};

class Dashboard {
    constructor(config){
        let renderFormAddWidget = () => {
            let type = state.selectWidgetType;

            if (type.search('static') !== -1) {
                state.isRealTime = false;
            }

            elements.divValueWidget.hide();
            elements.divDefaultValue.show();
            elements.btnSubmitAddWidget.show();

            if (type === WIDGET_TYPE.MUTILINE || type === WIDGET_TYPE.MUTILINE_STATIC) {
                elements.mutiLine.show();
            } else if (type === WIDGET_TYPE.TEXTLINE) {
                elements.textLine.show();
            } else if (type === WIDGET_TYPE.RADAR) {
                elements.radar.show();
                radarEx = new RadarEx();
                radarEx.createRadarExample();

                $("#addWidget").on("change", ".radar-labels,.label-radar", function () {
                    radarEx.updateRadarExample();
                });

                $("#btn-add-datasource-radar").unbind().click(function () {
                    $(".remove-radar-labels").prop('disabled', true);
                    $("#btn-add-label-radar").hide();
                    $("#btn-edit-label-radar").show();
                    $(".radar-labels").prop('disabled', true);
                    createFormDatasourceRadar();
                    radarEx.updateRadarExample();

                    $(".remove-datasource-radar").unbind().click(function () {
                        $(this).parent().remove();
                        radarEx.updateRadarExample();
                    });
                });

                $("#btn-edit-label-radar").unbind().click(function () {
                    swal({
                        title: "Are you sure?",
                        text: "When you edit lables datasource will reset",
                        icon: "warning",
                        buttons: true,
                        dangerMode: true,
                    }).then((willDelete) => {
                        if (willDelete) {
                            $("#btn-add-label-radar").show();
                            $("#btn-edit-label-radar").hide();
                            $("#Radar_value").empty();
                            $(".radar-labels").prop('disabled', false);
                            $(".remove-radar-labels").prop('disabled', false);
                            radarEx.updateRadarExample();
                        } else {
                            return;
                        }
                    });
                });
            } else if (type === WIDGET_TYPE.TABLE) {
                elements.table.show();
                tableEx = new TableEx($("#example_table"), {
                    col: {
                        amount: 3,
                    },
                    row: {
                        amount: 3
                    }
                })

                tableEx.createTableEx();

                $("#btn_add_col").unbind().click(function () {
                    tableEx.addCol();
                    $(".select-datasource").change();
                });

                $("#btn_remove_col").unbind().click(function () {
                    tableEx.removeCol();
                });

                $("#btn_add_row").unbind().click(function () {
                    tableEx.addRow();
                    $(".select-datasource").change();
                });


                $("#btn_remove_row").unbind().click(function () {
                    tableEx.removeRow();
                });

            } else if (type === WIDGET_TYPE.GAUGES) {
                elements.gauges.show();
            } else if (type === WIDGET_TYPE.TEXTVALUE) {
                elements.textValue.show();
            } else if (type === WIDGET_TYPE.TEXTBOX) {
                elements.textBox.show();
                elements.divDefaultValue.hide();

            } else if (type === WIDGET_TYPE.MAP) {
                $("#map").show();
            } else {
                $("#add-new-widget").hide();
                $("#default_value").hide();
                $("#form-input-widget").html("");
            }
        };

        let getValueMutiLine = () => {
            
        }

        let onBtnSubmitAddWidgetClick = () => {

        }

        let bindElements = () =>{
            elements.settingWidget.unbind().click(function(){
                $(this).hide();
                elements.addWidget.show();
                elements.saveWidget.show();
                elements.cancelWidget.show();
            });

            elements.cancelWidget.unbind().click(function(){
                $(this).hide();
                elements.settingWidget.show();
                elements.addWidget.hide();
                elements.saveWidget.hide();
                elements.cancelWidget.hide();
            });

            elements.addWidget.unbind().click(function(){
                elements.addWidgetModal.modal('show');
            });

            elements.selectWidgetType.unbind().change(function(){
                state.selectWidgetType = $(this).val();
                renderFormAddWidget();
            });

            elements.btnSubmitAddWidget.unbind().click(function(){
                onBtnSubmitAddWidgetClick();
            });
        };
        
        this.initDashboard = () => {
            bindElements();
        };
    }

}


export function FatoryCreateManagmentDashboard(config) {
    state.dashboard = new Dashboard(config);
    state.dashboard.initDashboard();
}