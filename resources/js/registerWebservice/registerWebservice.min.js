import { LOADING,checkAuthRes, addEventValidate, resetInputValidate, checkError } from '../utility';


const API = {
    getAllRegisterWebservice  : "register/webservices",
    getAllEmailCustomer : "register/webservices/{webservice_id}/emails",
    getWebservices : "webservices/company",
    registerUser : "register/webservices",
    deleteRegister : "register/webservices",
}

validate.validators.presence.message = "is required";

let validateInput = {
    create : {
        parent: "form#form_bind_user",
        validate: {
            webservice : {
                presence: true,
            },
            email: {
                presence: {
                    allowEmpty: false,
                },
            }
        }
    }
}

class RegisterWebservice{
    constructor(){

        let dataList = null;
        let webserviceList = null;
        let dataTable = null;
        let input_bind_email  = null;

        let updateDatatableData = () => {
            let Datatable = [];
            dataTable.fnClearTable();
            $.each(dataList, function (index, item) {

                let ret = [];
                ret[0] = item.user.fname + ' ' +item.user.lname;
                ret[1] = item.webservice.service_name;
                ret[2] = `<center>
                            <button type="button" class="btn btn-danger btn-sm btn-delete" index=${index}  data-toggle="tooltip"
                                data-placement="top" title="Delete">
                                <i class="fas fa-trash-alt"></i>
                            </button>
                          </center>`;
                Datatable.push(ret);
            });
            
            if(Datatable.length > 0)
            dataTable.fnAddData(Datatable);

            $(".btn-lookup").unbind().click(function () {
                onBtnLookupClick($(this).attr('key'));
            });

            $(".btn-edit").unbind().click(function () {
                onBtnEditClick($(this).attr('index'));
            });

            $(".btn-delete").unbind().click(function () {
                onBtnDeleteClick($(this).attr('index'));
            });

            $('[data-toggle="tooltip"]').tooltip();
        };

        let onBtnDeleteClick = (index) => {
            swal({
                title: "Are you sure?",
                text: `to delete this register`,
                icon: "warning",
                buttons: true,
                dangerMode: true,
            }).then((willDelete) => {
                if (willDelete) {
                    onBtnDeleteSubmit(index);
                } else {
                    return;
                }
            });
           
        }

        let onBtnDeleteSubmit = (index) => {
            $.ajax({
                url : END_POINT + API.deleteRegister,
                method : "DELETE",
                data : {
                    register_webservice_id : dataList[index].register_webservice_id,
                    user_id : dataList[index].user_id,
                },
                success : (res,textStatus,xhr) => {
                    checkAuthRes(xhr);

                    this.showLastestDatatable();
                },
                error : (res) => {
                    console.log(res);
                }
            });
        }

        let registerUser = () => {
            if(checkError(validateInput.create)){
                return;
            }
            LOADING.set($("#btn_save_register_user"));
            $.ajax({
                url : END_POINT + API.registerUser,
                method : "POST",
                data : {
                    webservice_id : $("#webservice").val(),
                    users: input_bind_email.val(),
                },
                success : (res,textStatus,xhr) => {
                    checkAuthRes(xhr);
                    LOADING.reset($("#btn_save_register_user"));
                    $("#registerUser").modal('hide');
                    this.showLastestDatatable();
                },
                error : (res) => {
                    console.log(res);
                    LOADING.reset($("#btn_save_register_user"));
                    $("#registerUser").modal('hide');
                }
            });
        }

        let getAllEmailCustomer = () => {
            input_bind_email = $('#input_bind_email');
            input_bind_email.hide();
            $.ajax({
                url: END_POINT + API.getAllEmailCustomer.replace('{webservice_id}',$("#webservice").val()),
                method: "GET",
                headers: {
                    authorization: 'bearer ' + getCookie('token'),
                },
                success: (res,textStatus,xhr) => {
                    checkAuthRes(xhr);
                    input_bind_email.empty();
                    if (input_bind_email.data('fastselect')) {
                        input_bind_email.data('fastselect').destroy();
                    }
                    res.data.map(data => {
                        input_bind_email.append(`<option value="${data.user_id}">${data.email_user}</option>`);
                    })
                    input_bind_email.fastselect();
                    input_bind_email.show();
                },
                error: (res) => {

                }
            });
        };

        let createSelectWebservice = () => {
            let select = $("#webservice");
            let opt = '<option value="">--Select webservice--</option>';
            webserviceList.map(_data => {
                opt += `<option value="${_data.webservice_id}">${_data.service_name}</option>`;
            });

            select.html(opt);
        }

        let getWebservices = () => {
            $.ajax({
                url: END_POINT + API.getWebservices,
                method: "GET",
                headers: {
                    authorization: 'bearer ' + getCookie('token'),
                },
                success: (res,textStatus,xhr) => {
                    checkAuthRes(xhr);
                    webserviceList = res.data;
                    createSelectWebservice();
                },
                error: (res) => {

                }
            });
        };


        let resetInputEmail = () => {
            input_bind_email = $('#input_bind_email');
            input_bind_email.hide();
            input_bind_email.empty();
            if (input_bind_email.data('fastselect')) {
                input_bind_email.data('fastselect').destroy();
            }
        }



        let bindElement = () => {
            $("#btn_register_service").unbind().click(function(){
                resetInputValidate();
                $('#webservice').val("");
                resetInputEmail();
                $("#registerUser").modal('show');
            })

            $("#btn_save_register_user").unbind().click(function(){
                registerUser();
            });

            $("#webservice").unbind().change(function(){
                
                if($(this).val() == ""){
                    resetInputEmail();
                    return;
                }

                getAllEmailCustomer();
            });

          

            getWebservices();

            addEventValidate(validateInput.create);
        }

        let showDatatableLoadingStatus = (showOrHide) => {
            if (showOrHide) {
                $(".dataTables_wrapper").hide();
                $('#example').hide();
                $('.lds-roller').show();
            }
            else {
                $(".dataTables_wrapper").show();
                $('.lds-roller').hide();
                $('.text-loading').hide();
                $('#example').show();
                $('.text-static').show();
            }
        };

        let initialDatatable = () => {
            if (dataTable !== null) {
                return false;
            }

            dataTable = $('#example').dataTable({});
        };

        this.showLastestDatatable = () => {
            showDatatableLoadingStatus(true);
            $.ajax({
                url: END_POINT + API.getAllRegisterWebservice,
                headers: {
                    authorization: 'bearer ' + getCookie('token'),
                },
                success: (res,textStatus,xhr) => {
                    console.log(res);
                    checkAuthRes(xhr)
                    showDatatableLoadingStatus(false);
                    dataList = res.data;
                    updateDatatableData();
                },
                error: (res) => {
                    console.log(res);
                    showDatatableLoadingStatus(false);
                }
            });
        };

        this.initialAndRun = () => {
            bindElement();
            initialDatatable();
            this.showLastestDatatable();
        };

    }
}

$(document).ready(function(){
    let registerWebservice = new RegisterWebservice();
    registerWebservice.initialAndRun();
});