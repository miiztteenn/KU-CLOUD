const REG = /([a-zA-Z0-9_]+)/g;
export default class TableEx {
    constructor(el, config) {
        this.el = el;
        this.config = config;

        this.createTableEx = () => {
            el.find('thead').empty();
            el.find('tbody').empty();
            el.find('thead').append('<tr></tr>');
            for (let i = 0; i < config.col.amount; i++) {
                el.find('thead tr').append(`<th><input type="text" value="col${i}" class="form-control col-label"></th>`);
            };

            for (let i = 0; i < config.row.amount; i++) {
                let rows = '';
                for (let j = 0; j < config.col.amount; j++) {
                    if (j === 0) {
                        rows += `<td><input type="text" value="row${i}" class="form-control row-label"></td>`;
                    } else {
                        rows += `<td><input type="text" class="form-control value-datasource" placeholder="datasource">
                                    <ul class="list-group data-list" style="display: none"></ul>
                                </td>`;
                    }
                }
                el.find('tbody').append(`<tr>${rows}</tr>`);

            };
        }

        this.addCol = () => {
            el.find('thead tr').append(`<th><input type="text" value="col${config.col.amount}" class="form-control col-label"></th>`);
            el.find('tbody tr').each(function () {
                $(this).append(`<td><input type="text" class="form-control value-datasource" placeholder="datasource">
                                    <ul class="list-group data-list" style="display: none"></ul>
                                </td>`);
            });
            config.col.amount += 1;
        }

        this.removeCol = () => {
            if (config.col.amount >= 2) {
                el.find('thead tr th:last').remove();
                el.find('tbody tr').each(function () {
                    $(this).find('td:last').remove();
                });
                config.col.amount -= 1;
            }
        }

        this.addRow = () => {
            let rows = '';
            for (let j = 0; j < config.col.amount; j++) {

                if (j === 0) {
                    rows += `<td><input type="text" value="row${config.row.amount}" class="form-control row-label"></td>`;
                } else {
                    rows += `<td><input type="text" class="form-control value-datasource" placeholder="datasource">
                                <ul class="list-group data-list" style="display: none"></ul>
                             </td>`;
                }
            }
            config.row.amount += 1;
            el.find('tbody').append(`<tr>${rows}</tr>`);
        }

        this.removeRow = () => {
            if (config.row.amount >= 2) {
                el.find('tbody tr:last').remove();
                config.row.amount -= 1;
            }
        }

        this.getValue = () => {
            let col_labels = [];
            el.find(".col-label").each(function () {
                col_labels.push($(this).val());
            });

            let dataRow = [];
            el.find(".row-label").each(function () {
                let row_lable = $(this).val();
                let value_datasoruce = [];
                $(this).parent().parent().find('.value-datasource').each(function () {
                    value_datasoruce.push($(this).val());
                });

                dataRow.push({
                    label: row_lable,
                    data: value_datasoruce
                })
            });

            return {
                col_labels: col_labels,
                rows: dataRow
            }

        }
    }
}
