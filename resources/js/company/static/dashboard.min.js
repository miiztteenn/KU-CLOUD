import { deepCopy } from '../../utility.js';
import saveAs from 'file-saver';
Chart.defaults.global.defaultFontFamily = "'Poppins', 'Kanit', 'sans-serif'";

const END_POINT = 'http://localhost:8000/api/';

let Datasource = null;

const REG = /([a-zA-Z0-9_]+)/g;

const WIDGET_TYPE = {
    MUTILINE: 'MutiLine',
    TEXTLINE: 'TextLine',
    RADER: 'Rader',
    GAUGES: 'Gauges',
    MAP: 'Map',
    TEXTVALUE: 'TextValue',
    TEXTBOX: 'TextBox',
};

class ModalEditWidget {
    constructor(widget) {
        this.widget = widget;

        let ModalEditWidget = null;

        this.createModalEdit = (inputHtml, bindElement) => {
            if (ModalEditWidget === null) {
                ModalEditWidget = `<div class="modal fade" id="EditWidget">
                                        <div class="modal-dialog modal-lg">
                                            <div class="modal-content">
                                                <div class="modal-header">
                                                    <h5 class="modal-title">Edit Widget</h5>
                                                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                                                </div>

                                                <div class="modal-body" id="form-edit-widget">     
                                                </div>

                                                <div class="modal-footer">
                                                    <button type="button" id="btn-submit-edit-widget" class="btn btn-success btn-block">Save</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>`;

                $('body').append(ModalEditWidget);
            }
            $("#form-edit-widget").html(inputHtml);
            $("#EditWidget").modal('show');
        };

        this.submitEditClick = (func) => {
            $("#btn-submit-edit-widget").unbind().click(function () {
                func();
            });
        };

        this.closeModalEdit = () => {
            $("#EditWidget").modal('hide');
        };

        this.findTitleWidget = () => {
            let el = $("#" + this.widget.itemId).find('.title-widget');
            return el;
        };
    }
}

class ModalEditWidgetMutiLine extends ModalEditWidget {
    constructor(widget) {
        super(widget);
        let inputHtml = `<div class="row" id="div-title">
                            <div class="col-6">
                                <lable>Title</label>
                            <input type="text" class="form-control" id="edit-title"/>
                            </div>
                        </div>`;

        let bindElement = () => {
            this.submitEditClick(onSubmit);
        };

        let onSubmit = () => {
            let title = $("#edit-title").val();
            $(this.findTitleWidget()).html(title);
            this.widget.title_name = title;
            this.closeModalEdit();
        };

        let setElement = () => {
            $("#edit-title").val(widget.title_name);
        };

        this.initCreate = () => {
            this.createModalEdit(inputHtml, bindElement);
            bindElement();
            setElement();
        };
    }
}

class ModalEditWidgetGauges extends ModalEditWidget {
    constructor(widget) {
        super(widget);
        let inputHtml = `<div id="edit-Gauges" class="edit-widget-form"> 
                            <div class="row">
                                <div class="col-6">
                                    <lable>Title</label>
                                    <input type="text" class="form-control" id="edit-title"/>
                                </div>
                                <div class="col-6">
                                    <lable>Unit</label>
                                    <input type="text" class="form-control" id="edit-unit"/>
                                </div>
                            </div>
                        </div>`;

        let bindElement = () => {
            this.submitEditClick(onSubmit);
        };

        let onSubmit = () => {
            let title = $("#edit-title").val();
            let unit = $("#edit-unit").val();
            let unitId = this.widget.itemId.replace("item-", "unit_");
            $(this.findTitleWidget()).html(title);
            $("#" + unitId).html(unit);
            this.widget.title_name = title;
            this.widget.unit = unit;
            this.closeModalEdit();
        };

        let setElement = () => {
            $("#edit-title").val(widget.title_name);
            $("#edit-unit").val(widget.unit);
        };

        this.initCreate = () => {
            this.createModalEdit(inputHtml, bindElement);
            bindElement();
            setElement();
        };
    }
}

class ModalEditWidgetMap extends ModalEditWidget {
    constructor(widget) {
        super(widget);
        let inputHtml = `<div class="row" id="div-title">
                            <div class="col-6">
                                <lable>Title</label>
                            <input type="text" class="form-control" id="edit-title"/>
                            </div>
                        </div>`;

        let bindElement = () => {
            this.submitEditClick(onSubmit);
        };

        let onSubmit = () => {
            let title = $("#edit-title").val();
            $(this.findTitleWidget()).html(title);
            this.widget.title_name = title;
            this.closeModalEdit();
        };

        let setElement = () => {
            $("#edit-title").val(widget.title_name);
        };

        this.initCreate = () => {
            this.createModalEdit(inputHtml, bindElement);
            bindElement();
            setElement();
        };
    }
}

class ModalEditTextValue extends ModalEditWidget {
    constructor(widget) {
        super(widget);
        let inputHtml = `<div class="row" id="div-title">
                            <div class="col-6">
                                <lable>Title</label>
                                <input type="text" class="form-control" id="edit-title"/>
                            </div>
                            <div class="col-6">
                                <lable>Unit</label>
                                <input type="text" class="form-control" id="edit-unit"/>
                            </div>
                        </div>`;

        let bindElement = () => {
            this.submitEditClick(onSubmit);
        };

        let onSubmit = () => {
            let title = $("#edit-title").val();
            let unit = $("#edit-unit").val();
            $(this.findTitleWidget()).html(title);
            $("#" + this.widget.widgetId).next('span').html(unit);
            this.widget.title_name = title;
            this.widget.unit = unit;
            this.closeModalEdit();
        };


        let setElement = () => {
            $("#edit-title").val(widget.title_name);
            $("#edit-unit").val(widget.unit);
        };

        this.initCreate = () => {
            this.createModalEdit(inputHtml, bindElement);
            bindElement();
            setElement();
        };
    }
}
class ModalEditTextLine extends ModalEditWidget {
    constructor(widget) {
        super(widget);
        let inputHtml = `<div class="row" id="div-title">
                            <div class="col-6">
                                <lable>Title</label>
                                <input type="text" class="form-control" id="edit-title"/>
                            </div>
                            <div class="col-6">
                                <lable>Unit</label>
                                <input type="text" class="form-control" id="edit-unit"/>
                            </div>
                        </div>`;

        let bindElement = () => {
            this.submitEditClick(onSubmit);
        };

        let onSubmit = () => {
            let title = $("#edit-title").val();
            let unit = $("#edit-unit").val();
            let unitId = this.widget.itemId.replace("item-", "unit_");
            $(this.findTitleWidget()).html(title);
            $("#" + unitId).html(unit);
            this.widget.title_name = title;
            this.widget.unit = unit;
            this.closeModalEdit();
        };


        let setElement = () => {
            $("#edit-title").val(widget.title_name);
            $("#edit-unit").val(widget.unit);
        };

        this.initCreate = () => {
            this.createModalEdit(inputHtml, bindElement);
            bindElement();
            setElement();
        };
    }
}
class ModalEditWidgetTextBox extends ModalEditWidget {
    constructor(widget) {
        super(widget);
        let inputHtml = `<div id = "edit-text-box" class="value_widget">
                            <div class="row">
                                <div class="col-6">
                                    <label>Text</label>
                                    <input type="text" id="edit-text-custom" class="form-control" />
                                </div>
                                <div class="col-6">
                                    <label>Font Size (px)</label>
                                    <input type="number" id="edit-font-size" class="form-control" />
                                </div>
                            </div>
                        </div> `;

        let bindElement = () => {
            this.submitEditClick(onSubmit);
        };

        let onSubmit = () => {
            $("#" + widget.widgetId).html($("#edit-text-custom").val());
            $("#" + widget.widgetId).css({ "font-size": $("#edit-font-size").val() + "px" });
            widget.textbox = $("#edit-text-custom").val();
            widget.fontsize = $("#edit-font-size").val();
            this.closeModalEdit();
        };

        let setElement = () => {
            $("#edit-text-custom").val(widget.textbox);
            $("#edit-font-size").val(widget.fontsize);
        };

        this.initCreate = () => {
            this.createModalEdit(inputHtml, bindElement);
            bindElement();
            setElement();
        };
    }
}

class Widget {
    constructor(widget) {

        this.itemId = widget.itemId;
        this.widgetId = widget.widgetId;
        this.datasource = widget.datasource;
        this.type = widget.type;
        this.lastUpdateId = widget.lastUpdateId;
        this.title_name = widget.title_name;
        this.lastUpdate = widget.lastUpdate;
        this.timeInterval = widget.timeInterval;
        this.wi = widget.wi;
        this.download = widget.download;

        this.updateLastUpdate = (time = null) => {
            if (time) {
                this.lastUpdate = new Date(time);
                $("#" + this.lastUpdateId).html(this.lastUpdate.toDateString() + " " + this.lastUpdate.toLocaleTimeString());
            }
            else {
                this.lastUpdate = new Date();
                $("#" + this.lastUpdateId).html(this.lastUpdate.toDateString() + " " + this.lastUpdate.toLocaleTimeString());
            }
        };

        let options = {
            cellHeight: 80,
            verticalMargin: 10,
            float: false
        };

        let items = [{
            x: 0,
            y: 0,
            width: 6,
            height: 7,
        }];

        let grid = null;

        let ModalDeleteWidget = null;

        let generateId = () => {
            let id = Math.floor(100000 + Math.random() * 900000);
            let type = this.type.toLowerCase();
            this.itemId = `item-${id}`;
            this.widgetId = `${type}-${id}`;
            this.lastUpdateId = `${type}-lastupdate-${id}`;
        };

        let onEditWidgetClick = (el) => {
            let _el = $(el);
            let itemId = _el.attr("item");
            let widget = Dashboard.getWidgetById(itemId);

            let modal = null;
            if (widget.type === WIDGET_TYPE.MUTILINE) {
                modal = new ModalEditWidgetMutiLine(widget);
            }
            else if (widget.type === WIDGET_TYPE.TEXTLINE) {
                modal = new ModalEditTextLine(widget);
            }
            else if (widget.type === WIDGET_TYPE.GAUGES) {
                modal = new ModalEditWidgetGauges(widget);
            }
            else if (widget.type === WIDGET_TYPE.MAP) {
                modal = new ModalEditWidgetMap(widget);
            }
            else if (widget.type === WIDGET_TYPE.TEXTVALUE) {
                modal = new ModalEditTextValue(widget);
            }
            else if (widget.type === WIDGET_TYPE.TEXTBOX) {
                modal = new ModalEditWidgetTextBox(widget);
            }
            modal.initCreate();
        };

        let bindWidgetElement = () => {
            $(".btn-delete-wi").unbind().click(function () {
                onDeleteWidgetClick($(this));
            });

            $(".btn-edit-wi").unbind().click(function () {
                onEditWidgetClick($(this));
            });

            $(".btn-full-screen").unbind().click(function () {
                onFullScreenClick($(this));
            });

            $(".btn-download").unbind().click(function () {
                let widget = Dashboard.getWidgetById($(this).attr('item'));
                let target = document.getElementById(widget.widgetId);

                html2canvas(target).then(canvas => {
                    saveAs(canvas.toDataURL(), 'file-name.png');
                });
            });
        };

        let onFullScreenClick = (el) => {
            let obj = Dashboard.getWidgetById(el.attr("item"));
            $("#modal-full-screen").modal('show');
            $("#content-widget").html(obj.selectWiContentFull());
            obj.createFullWidget();
        };

        let onDeleteWidgetClick = (el) => {
            if (ModalDeleteWidget === null) {
                ModalDeleteWidget = `
                <div class="modal fade" id="DeleteWidget">
                    <div class="modal-dialog modal-dialog-centered">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Delete Widget</h5>
                                <button type="button" class="close" data-dismiss="modal">&times;</button>
                            </div>
    
                            <div class="modal-body">
                                <h6>Are you sure to delete this widget?</h6>
                            </div>
    
                            <div class="modal-footer">
                                <button type="button" id="" class="btn btn-danger btn-block btn-submit-delete-widget">Delete</button>
                            </div>
                        </div>
                    </div>
                </div>`;

                $('body').append(ModalDeleteWidget);
            }

            $('#DeleteWidget').modal('show');

            $('.btn-submit-delete-widget').unbind().click(function () {
                submitDeleteWidget($(el));
                $('#DeleteWidget').modal('hide');
            });
        };

        let submitDeleteWidget = (el) => {
            let item = $(el).attr("item");
            grid.removeWidget($('#' + item).closest(".grid-stack-item"));
            let index = widgetList.findIndex(widget => widget.itemId == item);
            widgetList.splice(index, 1);
        };

        let formateDataSave = (data) => {
            let formateDate = {
                type: data.type,
                datasource: data.datasource,
                timeInterval: data.timeInterval,
            };

            if (data.type === WIDGET_TYPE.MUTILINE) {
                formateDate.title_name = data.title_name;
                formateDate.datasets = data.datasets;
            }
            else if (data.type === WIDGET_TYPE.TEXTLINE) {
                formateDate.title_name = data.title_name;
                formateDate.unit = data.unit;
                formateDate.rgb = data.rgb;
            }
            else if (data.type === WIDGET_TYPE.GAUGES) {
                formateDate.title_name = data.title_name;
                formateDate.opts = data.opts;
                formateDate.limitMin = data.limitMin;
                formateDate.limitMax = data.limitMax;
                formateDate.unit = data.unit;
            }
            else if (data.type === WIDGET_TYPE.MAP) {
                formateDate.title_name = data.title_name;
            }
            else if (data.type === WIDGET_TYPE.TEXTLINE) {
                formateDate.title_name = data.title_name;
                formateDate.unit = data.unit;
                formateDate.rgb = data.rgb;
            }
            else if (data.type === WIDGET_TYPE.TEXTBOX) {
                formateDate.textbox = data.textbox;
                formateDate.fontsize = data.fontsize;
            }
            return formateDate;

        };

        this.selectWiContent = () => {
            let valueId = "";
            let unitId = "";
            switch (this.type) {
                case WIDGET_TYPE.MUTILINE:
                    return `<canvas id="${this.widgetId}"></canvas>`;
                case WIDGET_TYPE.TEXTLINE:
                    valueId = this.itemId.replace("item-", "value_");
                    unitId = this.itemId.replace("item-", "unit_");
                    return ` <h2 class="text-left"><span id="${valueId}">0</span> <span  id="${unitId}">${this.unit}</span></h2>
                             <canvas id="${this.widgetId}"></canvas>
                            `;
                case WIDGET_TYPE.GAUGES:
                    valueId = this.itemId.replace("item-", "gauges-text-");
                    unitId = this.itemId.replace("item-", "unit_");
                    // <canvas id="${this.widgetId}"></canvas>
                    //<h2><span id="${valueId}">0</span> <span  id="${unitId}">${this.unit}</span></h2>
                    return `
                            <div id="${this.widgetId}"></div>
                            `;
                case WIDGET_TYPE.MAP:
                    return `
                            <div id="${this.widgetId}"></div>
                            `;
                case WIDGET_TYPE.TEXTVALUE:
                    return `
                            <h1 style="color:${this.rgb}"><span id="${this.widgetId}">0</span> <span>${this.unit}</span><h1>
                            `;
                case WIDGET_TYPE.TEXTBOX:
                    return `<span id="${this.widgetId}"></span>`;
                default:
                    break;
            }
        };

        this.selectWiContentFull = () => {
            let valueId = "";
            switch (this.type) {
                case 'MutiLine':
                    return `<canvas id="${this.fullScreenId}"></canvas>`;
                case 'text-line':
                    valueId = this.itemId.replace("item-", "value_full");
                    return ` <h2 class="text-left"><span id="${valueId}">0</span> ${this.unit}</h2>
                             <canvas id="${this.fullScreenId}"></canvas>
                            `;
                case 'Gauges':
                    valueId = this.itemId.replace("item-", "gauges-text-full");
                    return `
                            <h2><span id="${valueId}">0</span> <span>${this.unit}</span></h2>
                            <canvas id="${this.fullScreenId}"></canvas>
                            `;
                case 'Map':
                    return `
                            <div id="${this.fullScreenId}"></div>
                            `;
                default:
                    break;
            }
        };

        this.createWidget = (gridData = null) => {
            generateId();
            let node = items.pop() || {
                x: 3,
                y: 4,
                width: 6,
                height: 7,
            };

            $(".grid-stack").gridstack(options);
            grid = $(".grid-stack").data("gridstack");

            let layout_widget = "";
            if (this.type !== "TextBox") {
                layout_widget = $("#layout-widget").html();
                if (this.type === "TextValue") {
                    node.width = 4;
                    node.height = 4;
                    layout_widget = $("#layout-widget-text-value").html();
                }
                layout_widget = layout_widget.replace(/div_id/g, this.itemId);
                layout_widget = layout_widget.replace(/widget_id/g, this.widgetId);
                layout_widget = layout_widget.replace("((wi))", this.selectWiContent());
                layout_widget = layout_widget.replace("((title_name))", this.title_name);
                layout_widget = layout_widget.replace("{last_update}", this.lastUpdateId);
            }
            else {
                node.width = 6;
                node.height = 1;
                layout_widget = $("#layout-widget-text").html();
                layout_widget = layout_widget.replace(/div_id/g, this.itemId);
                layout_widget = layout_widget.replace("((wi))", this.selectWiContent());
            }

            node.id = this.itemId;
            let g = null;
            if (gridData) {
                g = grid.addWidget(
                    $(layout_widget),
                    gridData.x,
                    gridData.y,
                    gridData.width,
                    gridData.height,
                    true, null, null, null, null, node.id
                );
            } else {
                g = grid.addWidget(
                    $(layout_widget),
                    node.x,
                    node.y,
                    node.width,
                    node.height,
                    true, null, null, null, null, node.id
                );
            }

            if (!this.download) {
                g.find('.full-screen').find('.btn-download').remove();
            }
            // #set full-screen
            //(g).find('.full-screen').remove();
            g.data('_gridstack_data', JSON.stringify(formateDataSave(this)));

            bindWidgetElement();
        };
    }

    static formateDataSave(data) {
        let formateDate = {
            type: data.type,
            datasource: data.datasource,
            download: data.download ? data.download : false,
            timeInterval: data.timeInterval,
        };

        if (data.type === "MutiLine") {
            formateDate.title_name = data.title_name;
            formateDate.datasets = data.datasets;
        }
        else if (data.type === "text-line") {
            formateDate.title_name = data.title_name;
            formateDate.unit = data.unit;
            formateDate.rgb = data.rgb;
        }
        else if (data.type === "Gauges") {
            formateDate.title_name = data.title_name;
            formateDate.opts = data.opts;
            formateDate.limitMin = data.limitMin;
            formateDate.limitMax = data.limitMax;
            formateDate.unit = data.unit;
        }
        else if (data.type === "Map") {
            formateDate.title_name = data.title_name;
        }
        else if (data.type === "TextValue") {
            formateDate.title_name = data.title_name;
            formateDate.unit = data.unit;
            formateDate.rgb = data.rgb;
        }
        else if (data.type === "TextBox") {
            formateDate.textbox = data.textbox;
            formateDate.fontsize = data.fontsize;
        }

        return formateDate;

    }
}

class MutiLine extends Widget {
    constructor(widget) {
        super(widget);

        this.fullScreenId = widget.fullScreenId;
        this.chart = null;
        this.datasets = widget.datasets;

        let options = {
            maintainAspectRatio: false,
            scales: {
                yAxes: [{
                    gridLines: {
                        display: false
                    },
                    ticks: {
                        beginAtZero: true,
                        fontFamily: "'Poppins', 'Kanit', 'sans-serif'",
                        fontStyle: "bold",
                    }
                }],
                xAxes: [{
                    gridLines: {
                        display: false
                    },
                    ticks: {
                        fontFamily: "'Poppins', 'Kanit', 'sans-serif'",
                        fontStyle: "bold",
                    }
                }],

            },
            legend: {
                labels: {
                    fontFamily: "'Poppins', 'Kanit', 'sans-serif'",
                    fontColor: 'black'
                }
            }
        };

        this.createMutiLine = () => {
            let ctx = document.getElementById(this.widgetId);
            //console.log(this.datasets);
            let myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    datasets: deepCopy(this.datasets)
                },
                options: options
            });
            this.chart = myChart;
        };

        this.createFullWidget = () => {
            let ctx = document.getElementById(this.fullScreenId);
            let myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    datasets: deepCopy(this.datasets)
                },
                options: options
            });
        };

        this.updateData = () => {
            let myChart = this.chart;
            //let data = Math.random();
            let d = new Date();
            myChart.data.labels.push(d.toLocaleTimeString());
            let i = 0;
            myChart.data.datasets.forEach((dataset) => {
                if (dataset.data.length > 10) {
                    dataset.data.splice(0, 1);
                    //myChart.data.labels.splice(0, 1);
                }
                //var data2 = Math.random();
                dataset.data.push(Datasource.fatoryGetDatasourceValue(this.datasource[i], this.datasource[i][1]));
                i++;
            });



            if (myChart.data.labels.length > 10) myChart.data.labels.splice(0, 1);

            myChart.update();
            this.updateLastUpdate();
        };
    }
}

class ChartTextLine extends MutiLine {
    constructor(widget) {
        super(widget);
        this.fullScreenId = widget.fullScreenId;
        this.unit = widget.unit;
        this.rgb = widget.rgb;

        const optionChartLineNotLable = {
            maintainAspectRatio: false,
            responsive: true,
            scales: {
                yAxes: [{
                    display: false
                }],
                xAxes: [{
                    display: false
                }]
            },
            legend: {
                display: false
            },
            elements: {
                point: {
                    radius: 0
                },
                line: {
                    tension: 0
                }
            },
            layout: {
                padding: {
                    left: 0,
                    right: 0,
                    top: 0,
                    bottom: 30
                }
            },
            stepsize: 100
        };


        this.createTextLine = () => {
            let ctx = document.getElementById(this.widgetId);
            let myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [{
                        label: '',
                        data: [],
                        backgroundColor: [
                            'rgba(255, 255, 255, 0)',
                        ],
                        borderColor: [
                            this.rgb
                        ],
                        borderWidth: 2
                    }]
                },
                options: optionChartLineNotLable
            });
            this.chart = myChart;
            this.updateData();
            return myChart;
        };

        this.createFullWidget = () => {
            let ctx = document.getElementById(this.fullScreenId);
            let myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [{
                        label: '',
                        data: [],
                        backgroundColor: [
                            'rgba(255, 255, 255, 0)',
                        ],
                        borderColor: [
                            this.rgb
                        ],
                        borderWidth: 2
                    }]
                },
                options: optionChartLineNotLable
            });
        };

        this.updateData = () => {

            //test get api 
            // $.ajax({
            //     url: "https://data.tmd.go.th/nwpapi/v1/forecast/location/hourly/region?region=C&fields=tc,rh&date=2018-11-07",
            //     headers: { 'Content-Type': 'application/json', 'authorization': 'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6ImU3Njk5YzY5ZDY0YjVkNDUzNGFiOGUyM2QyMmY0MTdmMjA0NTQ2ZGU5N2Q2OGZjOGU3MTFjNWRjYjJlZTk0NDE0OWNmMjBiZDIzYmIwMmZlIn0.eyJhdWQiOiIyIiwianRpIjoiZTc2OTljNjlkNjRiNWQ0NTM0YWI4ZTIzZDIyZjQxN2YyMDQ1NDZkZTk3ZDY4ZmM4ZTcxMWM1ZGNiMmVlOTQ0MTQ5Y2YyMGJkMjNiYjAyZmUiLCJpYXQiOjE1MzY5MzA1OTQsIm5iZiI6MTUzNjkzMDU5NCwiZXhwIjoxNTY4NDY2NTk0LCJzdWIiOiIyNjUiLCJzY29wZXMiOltdfQ.YpNDR_qqohsKFikhEl1Ghc06yK7E6Aqeg8khUInXuNPKSw6X7_isXZgb3CYZFY9rYLt28VGrHmvqJMUM3Qz13vdI0G2BtEjtvAmoKVgaTWOGkT34igx68AyIDrzw2g-dD6aFlo50KCMMnAP8u7dwqBX9VU4yKc3dsMAIkGu9-lkmuJKL0_Tfx_DiNfIr5AOZAX_ME6R5zjVoiCFnGtX6frVoLc8WH6N5AK2yQrN-gjJwnLYFCS7lkmEtTSxavf-MigVijYRDtjAeO5vqd_uADCjyWsLMQ2BX27pnq09srvfgrhrUGq7w9Qm4IhYRUMHqKouQT9AyGC9nQm_EBHAovtXkjWMObw87ucewTK2BXDhaV3zOe9Ww_Nv2kVMvf5mIl4zMZKp-BjRY0RKBoDg1xfm11IdVzwaiHYSRnMhMDgXcAYRBgxdTNjWLlGlVrapA6GgYatG6-Mie1iuuuhJfah2EzYwTwEuXqwh3cctl5FSxC0JsDtAo8DOYCq_Esbth0nPc4cpFL9YFHaE-vO1Sj-qNBA4b6x8EOGh_rdkOnqEOAVqxKe9lio9jM1N8EOenOlTpmUDB95w8hfI1j_KdpqQqy1zgGRn_BgrHnZJxDeOXKNMfgBtMfD3aQreU75InECJ8_5uCmgtSeYF0bjgAmBYd37yJo9zprO0MNBeEGLk' },
            //     success: (res) => {
            //         console.log(res);
            //         let data = res.WeatherForecasts.find(t => {
            //             return t.location.province == "สมุทรปราการ";
            //         });
            //         let value = this.widgetId;
            //         value = value.replace("myChart_", "value_");
            //         let myChart = this.chart;
            //         let time = data.forecasts[0].time;
            //         data = data.forecasts[0].data.rh;
            //         let d = new Date();
            //         myChart.data.labels.push(d.toLocaleTimeString());
            //         myChart.data.datasets.forEach((dataset) => {
            //             if (dataset.data.length > 10) {
            //                 dataset.data.splice(0, 1);
            //                 //myChart.data.labels.splice(0, 1);
            //             }
            //             dataset.data.push(data);
            //             $("#" + value).html(data);
            //         });

            //         if (myChart.data.labels.length > 10) myChart.data.labels.splice(0, 1);

            //         myChart.update();
            //         this.updateLastUpdate(time);
            //     },
            //     error: (res) => {
            //         console.log(res);
            //     }
            // });

            let value = this.widgetId;
            value = value.replace("myChart_", "value_");
            let myChart = this.chart;
            let data = Math.floor(100 + Math.random() * 900);
            let d = new Date();
            myChart.data.labels.push(d.toLocaleTimeString());
            myChart.data.datasets.forEach((dataset) => {
                if (dataset.data.length > 10) {
                    dataset.data.splice(0, 1);
                    //myChart.data.labels.splice(0, 1);
                }
                dataset.data.push(data);
                $("#" + value).html(data);
            });

            if (myChart.data.labels.length > 10) myChart.data.labels.splice(0, 1);

            myChart.update();
            this.updateLastUpdate();
        };

        this.liveData = () => {
            let value = this.widgetId;
            value = value.replace("myChart_", "value_");
            let myChart = this.chart;
            let d = new Date();
            myChart.data.labels.push(d.toLocaleTimeString());
            myChart.data.datasets.forEach((dataset) => {
                if (dataset.data.length > 10) {
                    dataset.data.splice(0, 1);
                    //myChart.data.labels.splice(0, 1);
                }
                let data = dataset.data[dataset.data.length - 1];
                dataset.data.push(data);
            });

            if (myChart.data.labels.length > 10) myChart.data.labels.splice(0, 1);

            myChart.update();
            //this.updateLastUpdate();
        };
    }
}

class Rader extends Widget {
    constructor(widget) {
        super(widget);
        this.data = widget.data;
    }
}

class Gauges extends Widget {
    constructor(widget) {
        super(widget);
        this.fullScreenId = widget.fullScreenId;
        this.textId = widget.textId;
        this.gaugeWidget = null;
        this.opts = widget.opts;
        this.limitMax = widget.limitMax ? widget.limitMax : 100;
        this.limitMin = widget.limitMin ? widget.limitMin : 0;
        this.unit = widget.unit;

        this.createGages = () => {
            this.gaugeWidget = new JustGage({
                id: this.widgetId,
                value: 0,
                min: this.limitMin,
                max: this.limitMax,
                symbol: ' ' + this.unit,
                relativeGaugeSize: true,
                titlePosition: "below"
            });
            $("#" + this.widgetId).height($("#" + this.widgetId).height() - 5);
            $("#" + this.widgetId).addClass('container');

            //this.updateData();

            // let target = document.getElementById(this.widgetId); // your canvas element
            // let gauge = new Gauge(target).setOptions(this.opts); // create sexy gauge!
            // gauge.maxValue = this.limitMax; // set max gauge value
            // gauge.setMinValue(0);  // Prefer setter over gauge.minValue = 0
            // gauge.animationSpeed = 32; // set animation speed (32 is default value)
            // gauge.set(0); // set actual value
            // this.gaugeWidget = gauge;
            // this.updateData();
        };

        this.updateData = () => {
            //getRandomInt(Number(this.limitMin), Number(this.limitMax))
            this.gaugeWidget.refresh(Datasource.fatoryGetDatasourceValue(this.datasource[0], this.datasource[0][1]));
            this.updateLastUpdate();

            // let data = Math.floor(Math.random() * (100 - 1));
            // $("#" + this.textId).html(data);
            // this.gaugeWidget.set(data);
            // this.updateLastUpdate();


        };
    }
}

class Map extends Widget {
    constructor(widget) {
        super(widget);
        this.fullScreenId = widget.fullScreenId;
        this.myMap = null;

        this.createMap = () => {
            let mymap;
            let mapid = this.widgetId;
            let height = $("#" + this.itemId).height() - 100;
            $('#' + mapid).css('height', height);
            $('#' + mapid).css('width', 'auto');

            mymap = L.map(mapid, {
                dragging: true,
                zoomControl: true,
                scrollWheelZoom: false,
                zoomAnimation: false,
            });

            $.getJSON('https://raw.githubusercontent.com/apisit/thailand.json/master/thailand.json').then(function (geoJSON) {
                var osm = new L.TileLayer.BoundaryCanvas("https://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}", {
                    boundary: geoJSON,
                    minZoom: 5,
                    maxZoom: 9,
                    attribution: '&copy; Tiles &copy; Esri &mdash; Esri, DeLorme, NAVTEQ'
                });
                mymap.addLayer(osm);
                var ukLayer = L.geoJSON(geoJSON);
                mymap.fitBounds(ukLayer.getBounds());


            }).then(() => {
                setTimeout(() => {
                    mymap.invalidateSize(true);
                    $.ajax({
                        dataType: "json",
                        url: '/js/company/test-api.json',
                        async: false,
                        success: function (data) {
                            var heat = [];
                            var WeatherForecasts = data.WeatherForecasts;
                            for (let i in WeatherForecasts) {
                                L.marker([WeatherForecasts[i].location.lat, WeatherForecasts[i].location.lon]).addTo(mymap).bindPopup(WeatherForecasts[i].location.province + " " + "อ ุณหภูมิที่ระดับพื้นผิว : " + WeatherForecasts[i].forecasts[1].data.tc + " °C");
                                heat.push([WeatherForecasts[i].location.lat, WeatherForecasts[i].location.lon, WeatherForecasts[i].forecasts[1].data.tc / 100]);

                            }
                            L.heatLayer(heat, {
                                radius: 75
                            }).addTo(mymap);
                        }
                    });

                }, 1000);
            }
            );

            function disableGrid() {
                let grid = $('.grid-stack').data('gridstack');
                grid.enableMove(false);
            }

            function enableGrid() {
                let grid = $('.grid-stack').data('gridstack');
                grid.enableMove(true);
            }

            $('.grid-stack').on('change', function (e, items) {
                if (mymap != null) {
                    mymap.invalidateSize(true);
                }
            });

            // mymap.on('mousemove', disableGrid);
            // mymap.on('mouseout', enableGrid);

            this.myMap = mymap;
            console.log(this.myMap);
        };

        this.createFullWidget = () => {
            let mymap;
            let mapid = this.fullScreenId;
            let height = "450px";
            $('#' + mapid).css('height', height);
            $('#' + mapid).css('width', 'auto');

            mymap = L.map(mapid, {
                dragging: true,
                zoomControl: true,
                scrollWheelZoom: false,
                zoomAnimation: false,
            });

            $.getJSON('https://raw.githubusercontent.com/apisit/thailand.json/master/thailand.json').then(function (geoJSON) {
                var osm = new L.TileLayer.BoundaryCanvas("https://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}", {
                    boundary: geoJSON,
                    minZoom: 5,
                    maxZoom: 9,
                    attribution: '&copy; Tiles &copy; Esri &mdash; Esri, DeLorme, NAVTEQ'
                });
                mymap.addLayer(osm);
                var ukLayer = L.geoJSON(geoJSON);
                mymap.fitBounds(ukLayer.getBounds());


            }).then(() => {
                setTimeout(() => {
                    mymap.invalidateSize(true);
                    $.ajax({
                        dataType: "json",
                        url: '/js/company/test-api.json',
                        async: false,
                        success: function (data) {
                            var heat = [];
                            var WeatherForecasts = data.WeatherForecasts;
                            for (let i in WeatherForecasts) {
                                L.marker([WeatherForecasts[i].location.lat, WeatherForecasts[i].location.lon]).addTo(mymap).bindPopup(WeatherForecasts[i].location.province + " " + "อ ุณหภูมิที่ระดับพื้นผิว : " + WeatherForecasts[i].forecasts[1].data.tc + " °C");
                                heat.push([WeatherForecasts[i].location.lat, WeatherForecasts[i].location.lon, WeatherForecasts[i].forecasts[1].data.tc / 100]);

                            }
                            L.heatLayer(heat, {
                                radius: 75
                            }).addTo(mymap);
                        }
                    });

                }, 1000);
            }
            );
        };
    }
}

class TextValue extends Widget {
    constructor(widget) {
        super(widget);
        this.textValue = widget.textValue;
        this.unit = widget.unit;
        this.rgb = widget.rgb;

        this.createTextValue = () => {
            //this.updateData();
        };

        this.updateData = () => {
            //let data = Math.floor(Math.random() * (100 - 1));
            let data = Datasource.fatoryGetDatasourceValue(this.datasource[0], this.datasource[0][1]);
            $("#" + this.widgetId).html(data);
            this.updateLastUpdate();
        };
    }
}

class TextBox extends Widget {
    constructor(widget) {
        super(widget);
        this.textbox = widget.textbox;
        this.fontsize = widget.fontsize;
        this.createTextBox = () => {
            console.log($("#" + this.widgetId));
            $("#" + this.widgetId).html(this.textbox);
            $("#" + this.widgetId).css({ "font-size": this.fontsize + "px" });
        };
    }
}

var widgetList = [];

class Datasources {
    constructor() {
        let listDatasource = null;
        let datasources = [];
        let apiSelect = 'datasources';

        let keyInput = [];

        let dataAccess = [];

        let modalEdit = null;

        let getWebServices = () => {
            $.ajax({
                url: END_POINT + 'company/webservices',
                success: (res) => {
                    listDatasource = res.data;
                    listDatasource.map(data => {
                        $("#webservice_id").append(`<option value="${data.webservice_id}">${data.service_name}</option>`);
                    });
                },
                error: (res) => {
                    console.log(res);
                }
            });
        };

        let getDatasource = () => {
            $.ajax({
                url: END_POINT + "company/staticDatasource",
                method: 'GET',
                data: {
                    static_id: $("#static_id").html(),
                },
                success: (res) => {
                    listDatasource = res.data;
                    updateListDatasource();
                },
                error: (res) => {
                    console.log(res);
                }
            });
        };

        let addDatasource = () => {
            $.ajax({
                url: END_POINT + "company/static/datasource",
                method: 'POST',
                data: {
                    static_id: $("#static_id").html(),
                    name: $("#name_datasource").val(),
                    webservice_id: $("#webservice_id").val(),
                    timeInterval: $("#add-data-time-interval").val(),
                },
                success: (res) => {
                    getDatasource();
                    $("#addDatasource").modal('hide');
                },
                error: (res) => {
                    console.log(res);
                }
            });
        };

        let updateListDatasource = () => {
            $("#list-datasource").empty();
            $(".select-datasource").empty();
            let html = "<h5>Datasource</h5>";
            let opt = "<option value=''>--Select datasource--</option>";
            listDatasource.map((data, index) => {
                html += `<div class="row">
                            <div class="col-2 edit-datasource" title="Edit" index=${index} style="cursor:pointer"> 
                                ${data.name}
                            </div>
                            <div class="col-2 unActiveApi" id="datasource-isActive-${index}">
                                <b>Not active</b>
                            </div>
                            <div class="col-3" id="datasource-${index}">

                            </div>
                        </div>`;
                opt += `<option value='${data.id}'>${data.name}</option>`;
                getApiDatasource(index);
            });

            // $(".edit-datasource").unbind().click(function () {

            // });

            setInterval(() => {
                checkTimeToUpdate();
            }, 1000);

            $(".select-datasource").html(opt);
            $("#list-datasource").html(html);
        };

        // let onEditDatasourceClick = () => {
        //     if (modalEdit === null) {
        //         modalEdit = `    <div class="modal fade" id="addDatasource">
        //                             <div class="modal-dialog modal-lg">
        //                                 <div class="modal-content">

        //                                     <div class="modal-header">
        //                                         <h4 class="modal-title">Edit Datasource</h4>
        //                                         <button type="button" class="close" data-dismiss="modal">&times;</button>
        //                                     </div>

        //                                     <div class="modal-body">
        //                                         <div class="row">
        //                                             <div class="col-12">
        //                                                 <label for="">Name</label>
        //                                                 <input type="text" id="edit-name-datasource" class="form-control">
        //                                             </div>
        //                                         </div>
        //                                         <div class="row">
        //                                             <div class="col-6">
        //                                                 <label for="">Channel</label>
        //                                                 <select name="" id="edit-webservice_id" class="form-control">
        //                                                     <option value="">--Select Channel--</option>
        //                                                 </select>
        //                                             </div>
        //                                             <div class="col-6">
        //                                                 <label for="">Set time interval (s)</label>
        //                                                 <input type="number" id="add-data-time-interval" class="form-control">
        //                                             </div>
        //                                         </div>
        //                                     </div>

        //                                     <div class="modal-footer">
        //                                         <a class="btn btn-success btn-block" id="btn-add-new-datasource" href="#">Save</a>
        //                                     </div>
        //                                 </div>
        //                             </div>
        //                         </div>`;
        //     }
        // };

        let checkTimeToUpdate = () => {
            listDatasource.map((data, index) => {
                let diff = Dashboard.diffTime(data.lastUpdate, data.timeInterval);
                if (diff >= data.timeInterval) {
                    getApiDatasource(index);
                }
                return;
            });

        };

        let getApiDatasource = (index) => {
            //url: '/js/company/test-api2.json',
            let url = listDatasource[index].URL;
            let name = listDatasource[index].name;
            $.ajax({
                url: url,
                success: (res) => {
                    let lastUpdate = new Date();
                    listDatasource[index].lastUpdate = lastUpdate;
                    $("#datasource-" + index).html(lastUpdate.toDateString() + " " + lastUpdate.toLocaleTimeString());
                    $("#datasource-isActive-" + index).html('<b>Active</b>');
                    $("#datasource-isActive-" + index).removeClass('unActiveApi');
                    $("#datasource-isActive-" + index).addClass('activeApi');
                    datasources[name] = res;
                },
                error: (res) => {
                    console.log(res);
                }
            });
        };

        let findDatasource = (id) => {
            return listDatasource.find(data => {
                return data.id == id;
            });
        };

        let getKeyDatasource = (index, data) => {
            if (typeof (data) == 'object') {
                if (index == keyInput.length) {
                    return [Object.keys(data), data] ? [Object.keys(data), data] : [];
                }
                return getKeyDatasource(index + 1, data[keyInput[index]]);
            }
        };

        let createDataList = (api, el = null) => {
            $(el).parent().find("#data-list").empty();
            let js = apiSelect + "['" + api + "']";
            $(el).val(js);
            updateDataList(js, el);
        };

        let updateDataList = (value, el = null) => {
            try {
                keyInput = value.match(REG);
                let key = getKeyDatasource(2, datasources[keyInput[1]]);
                $(el).parent().find("#data-list").empty();
                console.log(key);
                key[0].map(_key => {
                    $(el).parent().find("#data-list").append(`<li class="value-data list-group-item" style="cursor:pointer" value="${_key}">${_key} : ${key[1][_key]}</li>`);
                });
            }
            catch (error) {

            }

            $(".value-data").unbind().click(function () {
                let el_val = $(this).parent().parent().find('.value-datasource');
                let a = $(el_val).val();
                a += `['${$(this).attr('value')}']`;
                $(el_val).val(a);
                updateDataList($(el_val).val(), el_val);
            });
        };

        this.setDataAccess = (data) => {
            dataAccess = data;
        };

        this.getDatasourceValue = (index, data) => {
            if (typeof (data[dataAccess[index]]) == 'object') {
                return this.getDatasourceValue(index + 1, data[dataAccess[index]]);
            }
            return data[dataAccess[index]];
        };

        this.fatoryGetDatasourceValue = (inputDataAccess, key) => {
            try {
                dataAccess = inputDataAccess;
                return this.getDatasourceValue(2, datasources[key]);
            }
            catch (error) {

            }
        };

        this.getDatasources = () => {
            return datasources;
        };

        let bindElement = () => {
            $("#btn-add-datasource").unbind().click(function () {
                $("#addDatasource").modal('show');
            });

            $("#btn-add-new-datasource").unbind().click(function () {
                addDatasource();
            });

            $('#addWidget').on('change', '.select-datasource', function () {
                $(this).parent().next().find(".value-datasource").val('');
                $(this).parent().next().find("#data-list").empty();
                if ($(this).val() != '') {
                    let datasource = findDatasource($(this).val());
                    $(this).parent().next().find(".value-datasource").focus();
                    createDataList(datasource.name, $(this).parent().next().find(".value-datasource"));
                }
            });

            // $('#addWidget').on('focus', '.value-datasource', function () {
            //     $(this).parent().find('#data-list').show();
            // });

            // $('#addWidget').on('focusout', '.value-datasource', function () {
            //     $(this).parent().find('#data-list').hide();
            // });

            // $(".select-datasource").change(function () {

            // });

            $('#addWidget').on('change', '.value-datasource', function () {
                updateDataList($(this).val(), $(this));
            });
        };

        this.initCreate = () => {
            bindElement();
            getWebServices();
            getDatasource();
        };
    }
}
class Dashboard {
    constructor() {

        let options = {
            cellHeight: 80,
            verticalMargin: 10,
            float: false
        };

        let grid = null;

        let time = null;

        let getWigetType = () => {
            return $("#widget_type").val();
        };

        let getTitleName = () => {
            return $("#title-name").val();
        };

        let getTimeInterval = () => {
            return $("#time-interval").val();
        };

        let getDateTimeNow = () => {
            let d = new Date();
            //return d.getDate() + "-" + d.getMonth() + "-" + d.getFullYear() + " " + d.getHours() + ":" + d.getMinutes() + ":" + d.getSeconds();
            return d.toUTCString();
        };

        let getValueMutiLine = (divId) => {
            let length_label = $("#Mutiline_value").find(".label-y-chart-line").length;
            let value_datasource = [];
            $("#Mutiline_value").find('.value-datasource:visible').each(function () {
                value_datasource.push($(this).val().match(REG));
            });
            let data_line = [];
            for (let i = 0; i < length_label; i++) {
                let label_y = $("#Mutiline_value").find(".label-y-chart-line");
                let rgb = $("#Mutiline_value").find(".rgb-chart-line");
                let rgba = 'rgba(255,255,255,0.0)';
                let data = null;
                data = {
                    label: $(label_y[i]).val(),
                    backgroundColor: rgba,
                    borderColor: $(rgb[i]).val(),
                    borderWidth: 2
                };
                data_line.push(data);
            }

            let data_widget = {
                datasource: value_datasource,
                fullScreenId: "myChartFull_" + divId,
                download: true,
                type: getWigetType(),
                title_name: getTitleName(),
                lastUpdate: getDateTimeNow(),
                timeInterval: getTimeInterval(),
                datasets: [...data_line],
            };
            return data_widget;
        };

        let getValueTextLine = (divId) => {
            let unit = $("#text-line").find("#unit").val();
            let rgb = $("#value-text-line").find("#rgb").val();
            let value_datasource = [$("#text-line").find(".value-datasource").val().match(REG)];
            let data_widget = {
                datasource: value_datasource,
                fullScreenId: "myChartFull_" + divId,
                download: true,
                type: getWigetType(),
                title_name: getTitleName(),
                lastUpdate: getDateTimeNow(),
                timeInterval: getTimeInterval(),
                rgb: rgb,
                unit: unit,
            };
            return data_widget;
        };

        let getValueGauges = (divId) => {
            let limitMin = $("#Gauges").find("#g_limitMin").val();
            let limitMax = $("#Gauges").find("#g_limitMax").val();
            let unit = $("#Gauges").find("#unit").val();
            let value_datasource = [$("#Gauges").find(".value-datasource").val().match(REG)];
            let data_widget = {
                textId: "gauges-text-" + divId,
                datasource: value_datasource,
                fullScreenId: "gaugesFull-" + divId,
                download: true,
                type: getWigetType(),
                title_name: getTitleName(),
                lastUpdate: getDateTimeNow(),
                timeInterval: getTimeInterval(),
                limitMax: limitMax,
                limitMin: limitMin,
                unit: unit,
                opts: {
                    angle: 0, // The span of the gauge arc
                    lineWidth: 0.23, // The line thickness
                    radiusScale: 1, // Relative radius
                    pointer: {
                        length: 0.6, // // Relative to gauge radius
                        strokeWidth: 0.035, // The thickness
                        color: '#000000' // Fill color
                    },
                    limitMax: false,     // If false, max value increases automatically if value > maxValue
                    limitMin: false,     // If true, the min value of the gauge will be fixed
                    colorStart: '#6FADCF',   // Colors
                    colorStop: '#8FC0DA',    // just experiment with them
                    strokeColor: '#E0E0E0',  // to see which ones work best for you
                    generateGradient: true,
                    highDpiSupport: true,     // High resolution support
                    staticLabels: {
                        font: "10px Poppins",  // Specifies font
                        labels: [0, Number(limitMax)],  // Print labels at these values
                        color: "#000000",  // Optional: Label text color
                        fractionDigits: 0  // Optional: Numerical precision. 0=round off.
                    },
                },
            };

            return data_widget;
        };

        let getValueMap = (divId) => {
            let data_widget = {
                fullScreenId: "mapFull-" + divId,
                download: false,
                type: getWigetType(),
                title_name: getTitleName(),
                lastUpdate: getDateTimeNow(),
                timeInterval: getTimeInterval(),
            };
            return data_widget;
        };

        let getTextValue = (divId) => {
            let unit = $("#TextValue").find("#unit").val();
            let rgb = $("#TextValue").find("#rgb").val();
            let value_datasource = [$("#TextValue").find(".value-datasource").val().match(REG)];
            let data_widget = {
                datasource: value_datasource,
                fullScreenId: "textValueFull-" + divId,
                download: false,
                type: getWigetType(),
                title_name: getTitleName(),
                lastUpdate: getDateTimeNow(),
                timeInterval: getTimeInterval(),
                unit: unit,
                rgb: rgb
            };

            return data_widget;
        };

        let getValueWigetText = (divId) => {
            let textbox = $("#text-box").find("#text-custom").val();
            let fontsize = $("#text-box").find("#font-size").val();
            let data_widget = {
                type: getWigetType(),
                download: false,
                title_name: null,
                lastUpdate: null,
                timeInterval: null,
                textbox: textbox,
                fontsize: fontsize
            };

            return data_widget;
        };

        let createFormBodyInputWidget = (type) => {
            $(".value_widget").hide();
            $("#default-value").show();
            if (type === "MutiLine") {
                $("#MutiLine").show();
            }
            else if (type === "text-line") {
                $("#text-line").show();
            }
            else if (type === "Gauges") {
                $("#Gauges").show();
            }
            else if (type === "TextValue") {
                $("#TextValue").show();
            }
            else if (type === "TextBox") {
                $("#text-box").show();
                $("#default-value").hide();
            }
            else {
                $("#form-input-widget").html("");
            }
        };

        let onAddValueMutiLineClick = () => {
            let formhtml = $("#line_value_layout").html();
            $("#Mutiline_value").append(formhtml);
        };

        let onAddWidgetClick = () => {
            let type = getWigetType();
            let divId = Math.floor(100000 + Math.random() * 900000);
            let obj_widget = null;
            let widget = null;

            if (type === WIDGET_TYPE.MUTILINE) {
                widget = getValueMutiLine(divId);
                obj_widget = new MutiLine(Object.assign({}, widget));
                obj_widget.createWidget();
                obj_widget.createMutiLine();
            }
            else if (type === WIDGET_TYPE.TEXTLINE) {
                widget = getValueTextLine(divId);
                obj_widget = new ChartTextLine(widget);
                obj_widget.createWidget();
                obj_widget.createTextLine();
            }
            else if (type === WIDGET_TYPE.GAUGES) {
                widget = getValueGauges(divId);
                obj_widget = new Gauges(widget);
                obj_widget.createWidget();
                obj_widget.createGages();
            }
            else if (type === WIDGET_TYPE.MAP) {
                widget = getValueMap(divId);
                obj_widget = new Map(widget);
                obj_widget.createWidget();
                obj_widget.createMap();
            }
            else if (type === WIDGET_TYPE.TEXTVALUE) {
                widget = getTextValue(divId);
                obj_widget = new TextValue(widget);
                obj_widget.createWidget();
                obj_widget.createTextValue();
            }
            else if (type === WIDGET_TYPE.TEXTBOX) {
                widget = getValueWigetText(divId);
                obj_widget = new TextBox(widget);
                obj_widget.createWidget();
                obj_widget.createTextBox();

            }
            widgetList.push(obj_widget);

        };

        let saveGrid = () => {
            let serializedData = _.map($('.grid-stack > .grid-stack-item:visible'), function (el) {
                el = $(el);
                let node = el.data('_gridstack_node');
                //var widget = el.data('_gridstack_data');
                let wi = Dashboard.getWidgetById(node.id);
                return {
                    x: node.x,
                    y: node.y,
                    width: node.width,
                    height: node.height,
                    widget: Widget.formateDataSave(wi)
                };
            });

            $.ajax({
                url: END_POINT + 'company/static/dashboard',
                method: "PUT",
                data: {
                    static_id: $("#static_id").html(),
                    dashboard: JSON.stringify(serializedData, null, ''),
                },
                success: (res) => {
                    console.log(res);
                },
                error: (res) => {
                    console.log(res);
                }
            });
            //console.log(JSON.stringify(serializedData, null, '        '))
            //setStorage("dashboard", serializedData);
            // $('#saved-data').val(JSON.stringify(serializedData, null, '        '));
        };

        let bindElement = () => {
            $("#settingW").click(function () {
                clearInterval(time);
                $(this).hide();
                $(".full-screen").hide();
                $(".edit-widget").show();
                $("#addW").show();
                $("#saveW").show();
                $("#cancelW").show();
                grid.enableMove(true);
                grid.enableResize(true);
            });

            $("#widget_type").change(function () {
                $(".value_widget").hide();
                createFormBodyInputWidget(getWigetType());
            });

            $("#addW").unbind().click(function () {
                $("input[type=text]").val("");
                $("#addWidget").modal('show');
            });

            $("#add-new-widget").unbind().click(function () {
                onAddWidgetClick();
            });

            $("#saveW").unbind().click(function () {
                $("#saveW").hide();
                $("#addW").hide();
                $("#cancelW").hide();
                $("#settingW").show();
                $(".full-screen").show();
                $(".edit-widget").hide();
                updateDatalast();
                saveGrid();
                grid.enableMove(false);
                grid.enableResize(false);
            });

            $("#cancelW").unbind().click(function () {
                $("#saveW").hide();
                $("#addW").hide();
                $(".edit-widget").hide();
                $(".full-screen").show();
                $("#cancelW").hide();
                $("#settingW").show();
                updateDatalast();
                grid.enableMove(false);
                grid.enableResize(false);
            });

            $("#btn-add-value-Mutiline").unbind().click(function () {
                onAddValueMutiLineClick();
            });

            $("#btn-detail-toggle ").unbind().click(function () {
                $("#top-header").slideToggle("fast");
                $(this).toggleClass('flip');
            });

            $('#addWidget').on('click', '.remove-value', function () {
                $(this).parent().parent().remove();
            });
        };

        let updateDatalast = () => {
            time = setInterval(() => {
                if (widgetList.length > 0) {
                    updateData([...widgetList]);
                }
            }, 1000);
        };

        let updateData = (widgets) => {
            for (var i = 0; i < widgets.length; i++) {
                let widget = widgets[i];
                if (widget.updateData) {
                    if (Dashboard.diffTime(widget.lastUpdate, widget.timeInterval) >= widget.timeInterval) {
                        widget.updateData();
                    }
                    else if (widget.liveData) {
                        widget.liveData();
                    }
                }
            }
        };

        let createDashboardInit = (dashboard) => {
            let obj_widget = null;
            let widgets = null;
            let gridData = null;
            let type = "";
            for (var key in dashboard) {

                //var divId = Math.floor(100000 + Math.random() * 900000);
                obj_widget = null;
                widgets = dashboard[key].widget;
                gridData = dashboard[key];
                type = widgets.type;
                // widgets.itemId = "item-" + divId;
                widgets.lastUpdate = getDateTimeNow();
                if (type === WIDGET_TYPE.MUTILINE) {
                    // widgets.fullScreenId = "myChartFull_" + divId;
                    obj_widget = new MutiLine(widgets);
                    obj_widget.createWidget(gridData);
                    obj_widget.createMutiLine();
                }
                else if (type === WIDGET_TYPE.GAUGES) {
                    // widgets.textId = "gauges-text-" + divId;
                    // widgets.fullScreenId = "gaugesFull-" + divId;
                    obj_widget = new Gauges(widgets);
                    obj_widget.createWidget(gridData);
                    obj_widget.createGages();
                }
                else if (type === WIDGET_TYPE.TEXTLINE) {
                    // widgets.fullScreenId = "myChartFull_" + divId;
                    obj_widget = new ChartTextLine(widgets);
                    obj_widget.createWidget(gridData);
                    obj_widget.createTextLine();
                }
                else if (type === WIDGET_TYPE.MAP) {
                    // widgets.fullScreenId = "mapFull-" + divId;
                    obj_widget = new Map(widgets);
                    obj_widget.createWidget(gridData);
                    obj_widget.createMap();
                }
                else if (type === WIDGET_TYPE.TEXTVALUE) {
                    // widgets.fullScreenId = "textValueFull-" + divId;
                    obj_widget = new TextValue(widgets);
                    obj_widget.createWidget(gridData);
                    obj_widget.createTextValue();
                }
                else if (type === WIDGET_TYPE.TEXTBOX) {
                    // widgets.widgetId = "text-" + divId;
                    obj_widget = new TextBox(widgets);
                    obj_widget.createWidget(gridData);
                    obj_widget.createTextBox();
                }
                widgetList.push(obj_widget);
            }

            $(".edit-widget").hide();
        };

        this.initDashboard = () => {
            Datasource = new Datasources();

            bindElement();
            let dashboard = "";
            // set widget $.ajax
            $.ajax({
                url: END_POINT + 'company/static/' + $("#static_id").html(),
                method: 'GET',
                success: (res) => {
                    if (res.data) {
                        dashboard = GridStackUI.Utils.sort(JSON.parse(res.data[0].dashboard));
                        createDashboardInit(dashboard);
                        $("#loading").remove();
                        updateDatalast();
                        $(".grid-stack").gridstack(options);
                        grid = $(".grid-stack").data("gridstack");
                        grid.enableMove(false);
                        grid.enableResize(false);
                        Datasource.initCreate();
                    }
                },
                error: (res) => {
                    console.log(res);
                }
            });
            // test use localstorage

            // if (getStorage("dashboard") != "") {
            //     dashboard = GridStackUI.Utils.sort(getStorage("dashboard"));
            //     createDashboardInit(dashboard);
            // }

            // updateDatalast();
            // getWebServices();

            // $(".grid-stack").gridstack(options);
            // grid = $(".grid-stack").data("gridstack");
            // grid.enableMove(false);
            // grid.enableResize(false);


        };
    }

    static diffTime(lastUpdate, timeInterval = 0) {
        //console.log(lastUpdate);
        let current = new Date();
        let _lastUpdate = new Date(lastUpdate);

        let diff = (current.getTime() - _lastUpdate.getTime()) / 1000;
        //หน่วยวินาที
        // diff /= 60;

        return Math.abs(Math.round(diff));
    }

    static updateGridData(id) {

    }

    static getWidgetById(itemId) {
        return widgetList.find(widget => {
            return widget.itemId == itemId;
        });
    }
}

$(document).ready(function () {
    $("#sidebarCollapse").click();
    let dashboard = new Dashboard();
    dashboard.initDashboard();

    $('.grid-stack').on('gsresizestop', function (event, elem) {
        let el = $(elem);
        let data_widget = JSON.parse(el.data('_gridstack_data'));
        let node = el.data('_gridstack_node');
        let type = data_widget.type;
        if (type === "Gauges") {
            // let element = event.target;
            // let width = el.find('.card-body').width();
            // let height = el.find('.card-body').height();
            // let panel = el.find('.card-body');
            // let id = $(panel).find('div');
            // $(id).height(height - 5);

            // var canvas = document.getElementById($(id).attr('id'));
            // canvas.toBlob(function (blob) {
            //     saveAs(blob, "pretty image.png");
            // });

            // $(id).attr("width", width - 30);
            // $(id).attr("height", height - 30);

            // document.getElementById($(id).attr(id)).getContext('2d').save();
            // document.getElementById($(id).attr(id)).getContext('2d').setTransform(1, 0, 0, 1, 0, 0);
            // document.getElementById($(id).attr(id)).getContext('2d').clearRect(0, 0, document.getElementById('gauge').getContext('2d').canvas.width, document.getElementById('gauge').getContext('2d').canvas.height);
            // document.getElementById($(id).attr(id)).getContext('2d').restore();
        }
        else if (type === "MutiLine") {
            let element = event.target;
            let width = el.find('.card-body').width();
            let height = el.find('.card-body').height();
            let panel = el.find('.card-body');
            let id = $(panel).find('canvas');

            // var canvas = document.getElementById($(id).attr('id'));
            // canvas.toBlob(function (blob) {
            //     saveAs(blob, "pretty image.png");
            // });
        }
        else if (type === "Map") {
            let map = Dashboard.getWidgetById(node.id);
            map.myMap.invalidateSize();
        }
    });
});