import {
    deepCopy,
    convertHex,
    randomHexColor,
    aproximateHour,
    filter_hour,
    diff_hours,
    getRndInteger
} from '../../utility.js';

import {
    json2excel
} from 'js2excel'

import FileSaver from 'file-saver';

import TableEx from '../../lib/TableEx.min.js';
import objectPath from 'object-path';



import {
    elements
} from './viewBase.min.js'


//import ChartRealtime from 'chartjs-plugin-streaming';
Chart.defaults.global.defaultFontFamily = "'Poppins', 'Kanit', 'sans-serif'";


const END_POINT = 'http://localhost:8000/api/';

const API = {
    getStatic: "dashboards/",
    getWebServices: "company/webservices",
    getDatasource: "staticDatasource",
    addDatasource: "static/datasource",
    deleteDatasource: "static/datasource",
    saveGrid: "static/dashboard",
}

let Datasource = null;

const REG = /([a-zA-Z0-9_]+)/g;



const WIDGET_TYPE = {
    BAR: 'Bar',
    MUTILINE: 'MutiLine',
    MUTILINE_STATIC: 'MutiLine_static',
    TEXTLINE: 'TextLine',
    RADAR: 'Radar',
    RADAR_STATIC: 'Radar_static',
    GAUGES: 'Gauges',
    MAP: 'Map',
    MAP_STATIC: 'Map_static',
    TEXTVALUE: 'TextValue',
    TABLE: 'Table',
    TABLE_STATIC: 'Table_static',
    TEXTBOX: 'TextBox',
};


let radarEx = null;

let state = {
    loadingApi: false,
    firstTime: true,
    firstLoadData: true,
}

class ModalEditWidget {
    constructor(widget) {
        this.widget = widget;

        let ModalEditWidget = null;

        this.createModalEdit = (inputHtml, bindElement) => {
            if (ModalEditWidget === null) {
                ModalEditWidget = `<div class="modal fade" id="EditWidget">
                                        <div class="modal-dialog modal-lg">
                                            <div class="modal-content">
                                                <div class="modal-header">
                                                    <h5 class="modal-title">Edit Widget</h5>
                                                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                                                </div>

                                                <div class="modal-body" id="form-edit-widget">     
                                                </div>

                                                <div class="modal-footer">
                                                    <button type="button" id="btn-submit-edit-widget" class="btn btn-success btn-block">Save</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>`;

                $('body').append(ModalEditWidget);
            }
            $("#form-edit-widget").html(inputHtml);
            $("#EditWidget").modal('show');
        };

        this.submitEditClick = (func) => {
            $("#btn-submit-edit-widget").unbind().click(function () {
                func();
            });
        };

        this.closeModalEdit = () => {
            $("#EditWidget").modal('hide');
        };

        this.findTitleWidget = () => {
            let el = $("#" + this.widget.itemId).find('.title-widget');
            return el;
        };
    }
}

class ModalEditWidgetMutiLine extends ModalEditWidget {
    constructor(widget) {
        super(widget);
        let inputHtml = `<div class="row" id="div-title">
                            <div class="col-6">
                                <lable>Title</label>
                                <input type="text" class="form-control" id="edit_title"/>
                            </div>
                            <div class="col-6">
                                <lable>Time interval</label>
                                <input type="number" class="form-control" id="edit_time_interval"/>
                            </div>
                        </div>`;

        let bindElement = () => {
            this.submitEditClick(onSubmit);
        };

        let onSubmit = () => {
            let title = $("#edit_title").val();
            let timeInterval = $("#edit_time_interval").val()
            $(this.findTitleWidget()).html(title);
            this.widget.title_name = title;
            this.widget.timeInterval = timeInterval;
            this.closeModalEdit();
        };

        let setElement = () => {
            $("#edit_title").val(widget.title_name);
            $("#edit_time_interval").val(widget.timeInterval);
        };

        this.initCreate = () => {
            this.createModalEdit(inputHtml, bindElement);
            bindElement();
            setElement();
        };
    }
}

class ModalEditWidgetGauges extends ModalEditWidget {
    constructor(widget) {
        super(widget);
        let inputHtml = `<div id="edit-Gauges" class="edit-widget-form"> 
                            <div class="row">
                                <div class="col-6">
                                    <lable>Title</label>
                                    <input type="text" class="form-control" id="edit_title"/>
                                </div>
                                <div class="col-6">
                                    <lable>Time interval</label>
                                    <input type="number" class="form-control" id="edit_time_interval"/>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-6">
                                    <lable>Unit</label>
                                    <input type="text" class="form-control" id="edit_unit"/>
                                </div>
                            </div>
                        </div>`;

        let bindElement = () => {
            this.submitEditClick(onSubmit);
        };

        let onSubmit = () => {
            let title = $("#edit_title").val();
            let unit = $("#edit_unit").val();
            let timeInterval = $("#edit_time_interval").val();
            let unitId = this.widget.itemId.replace("item-", "unit_");
            $(this.findTitleWidget()).html(title);
            $("#" + this.widget.widgetId).empty();
            this.widget.gaugeWidget = {};
            this.widget.gaugeWidget = new JustGage({
                id: this.widget.widgetId,
                value: 0,
                min: this.widget.limitMin,
                max: this.widget.limitMax,
                symbol: ' ' + unit,
                relativeGaugeSize: true,
                titlePosition: "below"
            });
            $("#" + this.widget.widgetId).height($("#" + this.widgetId).height() - 5);
            this.widget.title_name = title;
            this.widget.unit = unit;
            this.widget.timeInterval = timeInterval;
            this.closeModalEdit();
        };

        let setElement = () => {
            $("#edit_title").val(widget.title_name);
            $("#edit_time_interval").val(widget.timeInterval);
            $("#edit_unit").val(widget.unit);
        };

        this.initCreate = () => {
            this.createModalEdit(inputHtml, bindElement);
            bindElement();
            setElement();
        };
    }
}

class ModalEditWidgetMap extends ModalEditWidget {
    constructor(widget) {
        super(widget);
        let inputHtml = `<div class="row" id="div-title">
                            <div class="col-6">
                                <lable>Title</label>
                                <input type="text" class="form-control" id="edit_title"/>
                            </div>
                            <div class="col-6">
                                <lable>Time interval</label>
                                <input type="number" class="form-control" id="edit_time_interval"/>
                            </div>
                        </div>`;

        let bindElement = () => {
            this.submitEditClick(onSubmit);
        };

        let onSubmit = () => {
            let title = $("#edit_title").val();
            let timeInterval = $("#edit_time_interval").val();
            $(this.findTitleWidget()).html(title);
            this.widget.title_name = title;
            this.widget.timeInterval = timeInterval;
            this.closeModalEdit();
        };

        let setElement = () => {
            $("#edit_title").val(widget.title_name);
            $("#edit_time_interval").val(widget.timeInterval);
        };

        this.initCreate = () => {
            this.createModalEdit(inputHtml, bindElement);
            bindElement();
            setElement();
        };
    }
}

class ModalEditTextValue extends ModalEditWidget {
    constructor(widget) {
        super(widget);
        let inputHtml = `<div class="row" id="div-title">
                            <div class="col-6">
                                <lable>Title</label>
                                <input type="text" class="form-control" id="edit-title"/>
                            </div>
                            <div class="col-6">
                                <lable>Unit</label>
                                <input type="text" class="form-control" id="edit-unit"/>
                            </div>
                        </div>`;

        let bindElement = () => {
            this.submitEditClick(onSubmit);
        };

        let onSubmit = () => {
            let title = $("#edit-title").val();
            let unit = $("#edit-unit").val();
            $(this.findTitleWidget()).html(title);
            $("#" + this.widget.widgetId).next('span').html(unit);
            this.widget.title_name = title;
            this.widget.unit = unit;
            this.closeModalEdit();
        };


        let setElement = () => {
            $("#edit-title").val(widget.title_name);
            $("#edit-unit").val(widget.unit);
        };

        this.initCreate = () => {
            this.createModalEdit(inputHtml, bindElement);
            bindElement();
            setElement();
        };
    }
}
class ModalEditTextLine extends ModalEditWidget {
    constructor(widget) {
        super(widget);
        let inputHtml = `<div class="row" id="div-title">
                            <div class="col-6">
                                <lable>Title</label>
                                <input type="text" class="form-control" id="edit_title"/>
                            </div>
                            <div class="col-6">
                                <lable>Unit</label>
                                <input type="text" class="form-control" id="edit_unit"/>
                            </div>
                        </div>`;

        let bindElement = () => {
            this.submitEditClick(onSubmit);
        };

        let onSubmit = () => {
            let title = $("#edit_title").val();
            let unit = $("#edit_unit").val();
            let unitId = this.widget.itemId.replace("item-", "unit_");
            $(this.findTitleWidget()).html(title);
            $("#" + unitId).html(unit);
            this.widget.title_name = title;
            this.widget.unit = unit;
            this.closeModalEdit();
        };


        let setElement = () => {
            $("#edit_title").val(widget.title_name);
            $("#edit_unit").val(widget.unit);
        };

        this.initCreate = () => {
            this.createModalEdit(inputHtml, bindElement);
            bindElement();
            setElement();
        };
    }
}

class ModalEditTable extends ModalEditWidget {
    constructor(widget) {
        super(widget);
        let inputHtml = `<div id = "edit-text-box" class="value-widget">
                            <div class="row">
                                <div class="col-6">
                                    <label>Title</label>
                                    <input type="text" id="edit_title" class="form-control" />
                                </div>
                                <div class="col-6">
                                    <label>Time interval</label>
                                    <input type="number" id="edit_time_interval" class="form-control" />
                                </div>
                            </div>
                        </div> `;

        let bindElement = () => {
            this.submitEditClick(onSubmit);
        };

        let onSubmit = () => {
            let title = $("#edit_title").val();
            let unit = $("#edit_time_interval").val();
            $(this.findTitleWidget()).html(title);
            $("#" + unitId).html(unit);
            this.widget.title_name = title;
            this.widget.timeInterval = timeInterval;
            this.closeModalEdit();
        };

        let setElement = () => {
            $("#edit_title").val(widget.title_name);
            $("#edit_time_interval").val(widget.timeInterval);
        };

        this.initCreate = () => {
            this.createModalEdit(inputHtml, bindElement);
            bindElement();
            setElement();
        };
    }
}

class ModalEditWidgetTextBox extends ModalEditWidget {
    constructor(widget) {
        super(widget);
        let inputHtml = `<div id = "edit-text-box" class="value-widget">
                            <div class="row">
                                <div class="col-6">
                                    <label>Text</label>
                                    <input type="text" id="edit-text-custom" class="form-control" />
                                </div>
                                <div class="col-6">
                                    <label>Font Size (px)</label>
                                    <input type="number" id="edit-font-size" class="form-control" />
                                </div>
                            </div>
                        </div> `;

        let bindElement = () => {
            this.submitEditClick(onSubmit);
        };

        let onSubmit = () => {
            $("#" + widget.widgetId).html($("#edit-text-custom").val());
            $("#" + widget.widgetId).css({
                "font-size": $("#edit-font-size").val() + "px"
            });
            widget.textbox = $("#edit-text-custom").val();
            widget.fontsize = $("#edit-font-size").val();
            this.closeModalEdit();
        };

        let setElement = () => {
            $("#edit-text-custom").val(widget.textbox);
            $("#edit-font-size").val(widget.fontsize);
        };

        this.initCreate = () => {
            this.createModalEdit(inputHtml, bindElement);
            bindElement();
            setElement();
        };
    }
}

class Widget {
    constructor(widget) {

        this.itemId = widget.itemId;
        this.widgetId = widget.widgetId;
        this.apiName = widget.apiName;
        this.datasource = widget.datasource;
        this.type = widget.type;
        this.lastUpdateId = widget.lastUpdateId;
        this.title_name = widget.title_name;
        this.lastUpdate = widget.lastUpdate;
        this.timeInterval = widget.timeInterval;
        this.wi = widget.wi;
        this.download = widget.download;

        this.updateLastUpdate = (time = null) => {
            if (time) {
                this.lastUpdate = new Date(time);
                $("#" + this.lastUpdateId).html(this.lastUpdate.toDateString() + " " + this.lastUpdate.toLocaleTimeString());
            } else {
                this.lastUpdate = new Date();
                $("#" + this.lastUpdateId).html(this.lastUpdate.toDateString() + " " + this.lastUpdate.toLocaleTimeString());
            }
        };

        let options = {
            cellHeight: 80,
            verticalMargin: 10,
            float: false
        };

        let items = [{
            x: 0,
            y: 0,
            width: 6,
            height: 7,
        }];

        let grid = null;

        let ModalDeleteWidget = null;

        let generateId = () => {
            let id = Math.floor(100000 + Math.random() * 900000);
            let type = this.type.toLowerCase();
            this.itemId = `item-${id}`;
            this.widgetId = `${type}-${id}`;
            this.lastUpdateId = `${type}-lastupdate-${id}`;
        };

        let onEditWidgetClick = (el) => {
            let _el = $(el);
            let itemId = _el.attr("item");
            let widget = Dashboard.getWidgetById(itemId);

            let modal = null;
            if (widget.type === WIDGET_TYPE.MUTILINE) {
                modal = new ModalEditWidgetMutiLine(widget);
            } else if (widget.type === WIDGET_TYPE.TEXTLINE) {
                modal = new ModalEditTextLine(widget);
            } else if (widget.type === WIDGET_TYPE.GAUGES) {
                modal = new ModalEditWidgetGauges(widget);
            } else if (widget.type === WIDGET_TYPE.MAP) {
                modal = new ModalEditWidgetMap(widget);
            } else if (widget.type === WIDGET_TYPE.TEXTVALUE) {
                modal = new ModalEditTextValue(widget);
            } else if (widget.type === WIDGET_TYPE.TEXTBOX) {
                modal = new ModalEditWidgetTextBox(widget);
            } else if (widget.type === WIDGET_TYPE.TABLE) {
                modal = new ModalEditTable(widget);
            }
            modal.initCreate();
        };

        let bindWidgetElement = () => {

            $("#type_report").change(function () {
                let footer = $(this).parent().parent();
                let val = $(this).val();
                footer.find(".daily").hide();
                footer.find(".monthly").hide();
                footer.find(".yearly").hide();
                if (val === "daily") {
                    footer.find(".daily").show();
                } else if (val === "monthly") {
                    footer.find(".monthly").show();
                } else if (val === "yearly") {
                    footer.find(".yearly").show();
                }
            });

            $(".btn-delete-wi").unbind().click(function () {
                onDeleteWidgetClick($(this));
            });

            $(".btn-edit-wi").unbind().click(function () {
                onEditWidgetClick($(this));
            });

            $(".btn-full-screen").unbind().click(function () {
                onFullScreenClick($(this));
            });

            $(".btn-download").unbind().click(function () {
                let widget = Dashboard.getWidgetById($(this).attr('item'));
                let target = state.selectItemId ? document.getElementById(widget.timeSeries) : document.getElementById(widget.widgetId);

                html2canvas(target).then(canvas => {
                    FileSaver.saveAs(canvas.toDataURL(), 'file-name.png');
                });
            });

            $(".btn-download-excel").unbind().click(function () {
                let widget = Dashboard.getWidgetById($(this).attr('item'));
                widget.exportToExcel();
            });

            $(".btn-time-series").unbind().click(function () {
                $(this).next().toggle();
                let item = $(this).attr("item");
                let obj = Dashboard.getWidgetById(item);
                let footer = $(this).parent().parent().parent();
                let download = $("#" + item).find(".download");

                if (footer.hasClass('active-time')) {
                    download.hide();
                    state.selectItemId = null;
                    $(`#${obj.widgetId}`).show();
                    $(`#${obj.timeSeries}`).hide();
                    footer.removeClass('active-time')
                } else {
                    download.show();
                    state.selectItemId = item;
                    $(`#${obj.widgetId}`).hide();
                    $(`#${obj.timeSeries}`).show();
                    footer.addClass('active-time');
                }

                footer.find('.time-series-static').slideToggle('fast', function () {
                    if ($(this).is(':visible'))
                        obj.fullChart.resize();
                });

            });

            if (this.sliderTime) {
                this.sliderTime.noUiSlider.on('update', function (values, handle) {
                    getValueTimeSeries();
                });

                $(".static_date").change(function () {
                    let obj = Dashboard.getWidgetById(state.selectItemId);
                    let time = obj.sliderTime.noUiSlider.get();
                    if (time) {
                        getValueTimeSeries();
                    }
                    return;
                });
            }
        };

        let getValueTimeSeries = () => {
            try {
                let obj = Dashboard.getWidgetById(state.selectItemId);
                obj.updateTimeSeries();
            } catch (error) {

            }
        }

        let onFullScreenClick = (el) => {
            let obj = Dashboard.getWidgetById(el.attr("item"));
            $("#modal_full_screen").modal('show');
            $("#content-widget").html(obj.selectWiContentFull());
            obj.createFullWidget();
        };

        let onDeleteWidgetClick = (el) => {
            swal({
                title: "Are you sure?",
                text: "Delete this widget",
                icon: "warning",
                buttons: true,
                dangerMode: true,
            }).then((willDelete) => {
                if (willDelete) {
                    submitDeleteWidget($(el));
                } else {
                    return;
                }
            });
        };

        let submitDeleteWidget = (el) => {
            let item = $(el).attr("item");
            grid.removeWidget($('#' + item).closest(".grid-stack-item"));
            let index = widgetList.findIndex(widget => widget.itemId == item);
            widgetList.splice(index, 1);
        };

        this.selectWiContent = () => {
            let valueId = "";
            let unitId = "";
            switch (this.type) {
                case WIDGET_TYPE.MUTILINE:
                    this.timeSeries = `time-${this.widgetId}`;
                    return `<canvas id="${this.widgetId}"></canvas><canvas id="${this.timeSeries}" style="display:none"></canvas>`;
                case WIDGET_TYPE.MUTILINE_STATIC:
                    return `<canvas id="${this.widgetId}"></canvas>`;
                case WIDGET_TYPE.TEXTLINE:
                    valueId = this.itemId.replace("item-", "value-");
                    unitId = this.itemId.replace("item-", "unit-");
                    return ` <h2 class="text-left"><span id="${valueId}">0</span> <span  id="${unitId}">${this.unit}</span></h2>
                             <canvas id="${this.widgetId}"></canvas>
                            `;
                case WIDGET_TYPE.RADAR:
                    return `<canvas id="${this.widgetId}"></canvas>`;
                case WIDGET_TYPE.GAUGES:
                    valueId = this.itemId.replace("item-", "gauges-text-");
                    unitId = this.itemId.replace("item-", "unit_");
                    // <canvas id="${this.widgetId}"></canvas>
                    //<h2><span id="${valueId}">0</span> <span  id="${unitId}">${this.unit}</span></h2>
                    return `
                            <div id="${this.widgetId}"></div>
                            `;
                case WIDGET_TYPE.MAP:
                    return `<div id="${this.widgetId}"></div>`;
                case WIDGET_TYPE.TABLE:

                    return `<div>
                            <table class="table table-bordered" id="${this.widgetId}" >
                                <thead></thead><tbody></tbody>
                            </table>
                            </div>`;
                case WIDGET_TYPE.TEXTVALUE:
                    return `
                            <h1 style="color:${this.rgb}"><span id="${this.widgetId}">0</span> <span>${this.unit}</span><h1>
                            `;
                case WIDGET_TYPE.TEXTBOX:
                    return `<span id="${this.widgetId}"></span>`;
                default:
                    break;
            }
        };

        this.selectWiContentFull = () => {
            let valueId = "";
            this.fullScreenId = `full-${this.widgetId}`;
            switch (this.type) {
                case WIDGET_TYPE.MUTILINE:
                    return `<canvas id="${this.fullScreenId}"></canvas>`;
                case WIDGET_TYPE.TEXTLINE:
                    valueId = this.itemId.replace("item-", "value_full");
                    return ` <h2 class="text-left"><span id="${valueId}">0</span> ${this.unit}</h2>
                             <canvas id="${this.fullScreenId}"></canvas>
                            `;
                case WIDGET_TYPE.GAUGES:
                    valueId = this.itemId.replace("item-", "gauges-text-full");
                    return `
                            <h2><span id="${valueId}">0</span> <span>${this.unit}</span></h2>
                            <canvas id="${this.fullScreenId}"></canvas>
                            `;
                case WIDGET_TYPE.MAP:
                    return `
                            <div id="${fullScreenId}"></div>
                            `;
                default:
                    break;
            }
        };

        this.createWidget = (gridData = null) => {
            generateId();
            let node = items.pop() || {
                x: 3,
                y: 4,
                width: 6,
                height: 7,
            };

            $(".grid-stack").gridstack(options);
            grid = $(".grid-stack").data("gridstack");

            let layout_widget = "";
            if (this.type !== "TextBox") {
                layout_widget = $("#layout-widget").html();
                if (this.type === WIDGET_TYPE.TEXTVALUE) {
                    node.width = 4;
                    node.height = 4;
                    layout_widget = $("#layout-widget-text-value").html();
                } else if (this.type === WIDGET_TYPE.MUTILINE) {
                    layout_widget = layout_widget.replace(/<<sliderTime>>/g, `slider-${this.itemId}`);
                } else if (this.type.search('static') !== -1) {
                    layout_widget = $("#layout_widget_static").html();
                }
                layout_widget = layout_widget.replace(/div_id/g, this.itemId);
                layout_widget = layout_widget.replace(/widget_id/g, this.widgetId);
                layout_widget = layout_widget.replace("((wi))", this.selectWiContent());
                layout_widget = layout_widget.replace("((title_name))", this.title_name);
                layout_widget = layout_widget.replace("{last_update}", this.lastUpdateId);
                // layout_widget = layout_widget.replace(/<<switch>>/g, `switch-${this.itemId}`);
            } else {
                node.width = 6;
                node.height = 1;
                layout_widget = $("#layout-widget-text").html();
                layout_widget = layout_widget.replace(/div_id/g, this.itemId);
                layout_widget = layout_widget.replace("((wi))", this.selectWiContent());
            }

            node.id = this.itemId;
            let g = null;
            if (gridData) {
                g = grid.addWidget(
                    $(layout_widget),
                    gridData.x,
                    gridData.y,
                    gridData.width,
                    gridData.height,
                    true, null, null, null, null, node.id
                );
            } else {
                g = grid.addWidget(
                    $(layout_widget),
                    node.x,
                    node.y,
                    node.width,
                    node.height,
                    true, null, null, null, null, node.id
                );
            }

            if (!this.download) {
                g.find('.download').remove();
            }

            // if(this.type === WIDGET_TYPE.TABLE){;
            //     //g.find('.download').show(); 
            // }

            // #set full-screen
            if (this.type !== WIDGET_TYPE.MUTILINE) {
                // g.find('.full-screen > .btn-full-screen').remove();
                g.find('.btn-time-series').remove();
                g.find('.time-series-static').remove();
                g.find('.card-footer').css({
                    height: 'auto'
                });
            } else {
                this.sliderTime = document.getElementById(`slider-${this.itemId}`);
                noUiSlider.create(this.sliderTime, {
                    start: [0, 1440],
                    connect: true,
                    // direction: 'rtl',
                    behaviour: 'tap-drag',
                    step: 10,
                    tooltips: [true, true],
                    range: {
                        'min': 0,
                        'max': 1440
                    },
                    format: wNumb({
                        decimals: 2,
                        mark: ":",
                        encoder: function (a) {
                            return aproximateHour(a);
                        }
                    }),
                });
            }
            //g.data('_gridstack_data', JSON.stringify(formateDataSave(this)));

            bindWidgetElement();
        };
    }

    static formateDataSave(data) {
        let formateDate = {
            type: data.type,
            apiName: data.apiName,
            datasource: data.datasource,
            download: data.download ? data.download : false,
            timeInterval: data.timeInterval,
        };

        if (data.type === WIDGET_TYPE.MUTILINE) {
            formateDate.isGroupData = data.isGroupData;
            formateDate.title_name = data.title_name;
            formateDate.datasets = data.datasets;
        } else if (data.type === WIDGET_TYPE.TEXTLINE) {
            formateDate.title_name = data.title_name;
            formateDate.unit = data.unit;
            formateDate.rgb = data.rgb;
        } else if (data.type === WIDGET_TYPE.RADAR) {
            formateDate.datasets = data.datasets;
            formateDate.title_name = data.title_name;
            formateDate.labels = data.labels;
            formateDate.label = data.label;
            formateDate.color = data.color;
        } else if (data.type === WIDGET_TYPE.GAUGES) {
            formateDate.title_name = data.title_name;
            formateDate.opts = data.opts;
            formateDate.limitMin = data.limitMin;
            formateDate.limitMax = data.limitMax;
            formateDate.unit = data.unit;
        } else if (data.type === WIDGET_TYPE.MAP) {
            formateDate.isGroupData = data.isGroupData;
            formateDate.title_name = data.title_name;
        } else if (data.type === WIDGET_TYPE.TABLE) {
            formateDate.title_name = data.title_name;
            formateDate.table = data.table;
        } else if (data.type === WIDGET_TYPE.TEXTVALUE) {
            formateDate.title_name = data.title_name;
            formateDate.unit = data.unit;
            formateDate.rgb = data.rgb;
        } else if (data.type === WIDGET_TYPE.TEXTBOX) {
            formateDate.textbox = data.textbox;
            formateDate.fontsize = data.fontsize;
        }

        return formateDate;

    }
}

class MutiLine extends Widget {
    constructor(widget) {
        super(widget);
        this.isGroupData = widget.isGroupData;
        this.fullScreenId = widget.fullScreenId;
        this.chart = null;
        this.datasets = widget.datasets;
        this.dateTimeSeries = null;
        this.firstLoadData = true;

        let time_array = [];

        let options = {
            maintainAspectRatio: false,
            scales: {
                yAxes: [{
                    gridLines: {
                        display: false
                    },
                    ticks: {
                        beginAtZero: true,
                        fontFamily: "'Poppins', 'Kanit', 'sans-serif'",
                        fontStyle: "bold",
                    }
                }],
                xAxes: [{
                    // type: 'realtime',
                    type: 'time',
                    // time: {
                    //     displayFormats: {
                          
                    //        'minute': 'h:mm a',
                    //        'hour': 'hA',
                    //     }
                    // },
                    distribution: 'series',
                    // time: {
                    //     unit: "hour",
                    //     stepSize: 1,
                    // },
                    // time: {
                    //     parser: 'YYYY-MM-DD HH:mm:ss',
                    //     unit: 'day',
                    //     displayFormats: {
                    //        day: 'ddd'
                    //     },
                    //     min: '2017-10-02 18:43:53',
                    //     max: '2017-10-09 18:43:53'
                    // },
                    gridLines: {
                        display: false
                    },
                    // realtime: { // per-axis options
                    //     duration: 20000, // data in the past 20000 ms will be displayed
                    //     delay: 3000, // delay of 1000 ms, so upcoming values are known before plotting a line
                    //     pause: false, // chart is not paused
                    //     ttl: undefined // data will be automatically deleted as it disappears off the chart
                    // },
                    ticks: {
                        fontFamily: "'Poppins', 'Kanit', 'sans-serif'",
                        fontStyle: "bold",
                        autoSkip: true,
                        // autoSkipPadding: 30,
                        maxRotation: 0,
                        // padding: 20,
                        //maxTicksLimit:3,
                        // source: 'auto'
                        //autoSkip : true,
       
                        callback: function(tick, index, array) {
                              return (index % 3) ? "" : tick;
                        }
                    },

                }],

            },
            // plugins: {
            //     streaming: { // per-chart option
            //         frameRate: 30 // chart is drawn 30 times every second
            //     }
            // },
            legend: {
                labels: {
                    fontFamily: "'Poppins', 'Kanit', 'sans-serif'",
                    fontColor: 'black'
                }
            },
            tooltips: {
                mode: 'nearest',
                intersect: false
            },
            hover: {
                mode: 'nearest',
                intersect: false
            },
        };

        let optionsTimeSeries = {
            maintainAspectRatio: false,
            scales: {
                yAxes: [{
                    gridLines: {
                        display: false
                    },
                    ticks: {
                        beginAtZero: true,
                        fontFamily: "'Poppins', 'Kanit', 'sans-serif'",
                        fontStyle: "bold",
                    }
                }],
                xAxes: [{
                    type: 'time',
                    distribution: 'series',
                    gridLines: {
                        display: false
                    },
                    ticks: {
                        fontFamily: "'Poppins', 'Kanit', 'sans-serif'",
                        fontStyle: "bold",
                        // callback: function(tickValue, index, ticks) {
                        //     console.log(ticks);
                        // }
                    },

                }],

            },
            legend: {
                labels: {
                    fontFamily: "'Poppins', 'Kanit', 'sans-serif'",
                    fontColor: 'black'
                }
            },
            tooltips: {
                mode: 'nearest',
                intersect: false
            },
            hover: {
                mode: 'nearest',
                intersect: false
            },
        };


        this.createMutiLine = () => {
            let ctx = document.getElementById(this.widgetId);
            //console.log(this.datasets);
            let myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    datasets: deepCopy(this.datasets)
                },
                options: options,
                // plugins: [{
                //     beforeInit: function(chart) {
                //        var time = chart.options.scales.xAxes[0].time, // 'time' object reference
                //           timeDiff = moment(time.max).diff(moment(time.min), 'd'); // difference (in days) between min and max date
                //        // populate 'labels' array
                //        // (create a date string for each date between min and max, inclusive)
                //        for (var i = 0; i <= timeDiff; i++) {
                //           var _label = moment(time.min).add(i, 'd').format('YYYY-MM-DD HH:mm:ss');
                //           console.log(_label);
                //           chart.data.labels.push(_label);
                //        }
                //     }
                //  }]
            });
            //myChart.config.options.scales.xAxes[0].realtime.onRefresh = this.updateData(myChart);
            this.chart = myChart;
            this.createFullWidget();
        };

        this.updateFirstData = () => {
            let myChart = this.chart;
            let i = 0;

            try {
                if (!this.isGroupData) {
                    let datasource_daily = objectPath.get(Datasource.getDatasources(), `${this.apiName}.daily`);
                    myChart.data.datasets.map(dataset => {

                        let path = this.datasource[i].replace(`${this.apiName}.`, '');
                        datasource_daily.map(_data => {
                            dataset.data.push(objectPath.get(_data, path));

                            // dataset.data.push({
                            //     x: new Date(objectPath.get(_data, 'date')),
                            //     y: objectPath.get(_data, path),
                            // })
                            if (i === 0) {
                                //time_array.push(new Date(objectPath.get(_data, 'date')));
                                let date = new Date(objectPath.get(_data,'date'));
                                myChart.data.labels.push(date);
                            }
                        });
                        i++;
                    });
                    this.firstLoadData = false;
                } else {
                    dataset.data.push(objectPath.get(Datasource.getDatasources(), this.datasource.replace('[]', i)));
                }
                myChart.update();
            } catch (e) {}

        }

        this.updateData = () => {
            let myChart = this.chart;
            let d = new Date();
            time_array.push(d);
            //myChart.data.labels.push(d.toLocaleTimeString());
            //let date = Date.now();
            let i = 0;
            myChart.data.labels.push(d);
            myChart.data.datasets.forEach((dataset) => {
                if (dataset.data.length > 10) {
                    dataset.data.splice(0, 1);
                }
                if (!this.isGroupData) {
                    dataset.data.push(objectPath.get(Datasource.getDatasources(), this.datasource[i])+ getRndInteger(0,6));
                   
                    // dataset.data.push({
                    //     x: d,
                    //     y: objectPath.get(Datasource.getDatasources(), this.datasource[i]) + getRndInteger(0,6),
                    // });
                    //dataset.data.splice(0, 1);
                } else {
                    dataset.data.push(objectPath.get(Datasource.getDatasources(), this.datasource.replace('[]', i)));
                }
                i++;
            });

            // time_array.splice(0, 1);
            // if (time_array.length > 0) {
            //     let min = time_array.reduce(function (a, b) {
            //         return a < b ? a : b;
            //     });
            //     let max = time_array.reduce(function (a, b) {
            //         return a > b ? a : b;
            //     });
            //     let hours = diff_hours(max, min);
            //     if (hours >= 1) {
            //         myChart.options.scales.xAxes[0].time.unit = "hour";
            //         if(hours >= 6){
            //             myChart.options.scales.xAxes[0].time.stepSize = 2;
            //         }
            //         else{
            //             myChart.options.scales.xAxes[0].time.stepSize = 1;
            //         }
                   
            //     } else {
            //         myChart.options.scales.xAxes[0].time.unit = "second";
            //     }
            // }
            if (myChart.data.labels.length > 10) myChart.data.labels.splice(0, 1);
            myChart.update();
            this.updateLastUpdate();
        };

        this.createFullWidget = () => {
            let ctx = document.getElementById(this.timeSeries);
            // state.selectItemId = this.itemId;
            this.fullChart = new Chart(ctx, {
                type: 'line',
                data: {
                    datasets: deepCopy(this.datasets)
                },
                options: optionsTimeSeries
            });
        };

        let getDataTimeSeries = async () => {
            await $.ajax({
                url: '/js/company/test-api-static.json',
                data: {},
                success: (res) => {
                    this.dateTimeSeries = res;
                },
                error: (res) => {

                }
            })
        }

        this.updateTimeSeries = async () => {

            await getDataTimeSeries();
            let myChart = this.fullChart;
            let i = 0;

            myChart.data.labels = [];
            myChart.data.datasets.forEach((dataset) => {
                dataset.data = [];
            });

            let time_array = [];

            this.dateTimeSeries.map(data => {
                myChart.data.labels.push(new Date(objectPath.get(data, 'date')));
                time_array.push(new Date(objectPath.get(data, 'date')));
                myChart.data.datasets.forEach((dataset) => {
                    if (!this.isGroupData) {
                        let valueIn = this.datasource[i].split('.');
                        valueIn.splice(0, 1)
                        valueIn = valueIn.join('.');
                        dataset.data.push(objectPath.get(data, valueIn));
                    } else {
                        let valueIn = this.datasource.split('.');
                        valueIn.splice(0, 1);
                        valueIn = valueIn.join('.');
                        valueIn = valueIn.replace('[]', i);
                        dataset.data.push(objectPath.get(data, valueIn));
                    }
                    i++;
                });
                i = 0;

            })

            if (time_array.length > 0) {
                let min = time_array.reduce(function (a, b) {
                    return a < b ? a : b;
                });
                let max = time_array.reduce(function (a, b) {
                    return a > b ? a : b;
                });
                let hours = diff_hours(max, min);

                if (hours >= 1) {
                    myChart.options.scales.xAxes[0].time.unit = "hour";
                    if(hours >= 6){
                        myChart.options.scales.xAxes[0].time.stepSize = 2;
                    }
                    else{
                        myChart.options.scales.xAxes[0].time.stepSize = 1;
                    }
                   
                } else {
                    myChart.options.scales.xAxes[0].time.unit = "second";
                }
            }

            myChart.update();

        };

        this.exportToExcel = () => {
            let data = [];
            this.fullChart.data.labels.map((time, index) => {
                let indexTime = index;
                let dataValue = {};

                dataValue['time'] = time;
                this.fullChart.data.datasets.map(_data => {
                    dataValue[_data.label] = _data.data[indexTime];
                });
                data.push(dataValue);
            })
            const Json2csvParser = require('json2csv').Parser;
            const fields = Object.keys(data[0]);
            const opts = {
                fields
            };

            // try {
            //     const parser = new Json2csvParser(opts);
            //     const csv = parser.parse(data);
            //     let blob = new Blob([csv], {type: "text/plain;charset=utf-8"});
            //     FileSaver.saveAs(blob, `report.csv`);
            // } catch (err) {
            //     console.error(err);
            // }

            try {

                json2excel({
                    data,
                    name: 'report',
                    formateDate: 'yyyy/mm/dd HH:MM:ss'
                });

            } catch (e) {
                console.error('export error');
            }
        }
    }
}

class ChartTextLine extends MutiLine {
    constructor(widget) {
        super(widget);
        this.fullScreenId = widget.fullScreenId;
        this.unit = widget.unit;
        this.rgb = widget.rgb;

        const optionChartLineNotLable = {
            maintainAspectRatio: false,
            responsive: true,
            scales: {
                yAxes: [{
                    display: false
                }],
                xAxes: [{
                    display: false
                }]
            },
            legend: {
                display: false
            },
            elements: {
                point: {
                    radius: 0
                },
                line: {
                    tension: 0
                }
            },
            layout: {
                padding: {
                    left: 0,
                    right: 0,
                    top: 0,
                    bottom: 30
                }
            },
            stepsize: 100
        };


        this.createTextLine = () => {
            let ctx = document.getElementById(this.widgetId);
            let myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [{
                        label: '',
                        data: [],
                        backgroundColor: [
                            'rgba(255, 255, 255, 0)',
                        ],
                        borderColor: [
                            this.rgb
                        ],
                        borderWidth: 2
                    }]
                },
                options: optionChartLineNotLable
            });
            this.chart = myChart;
            this.updateData();
            return myChart;
        };

        this.createFullWidget = () => {
            let ctx = document.getElementById(this.fullScreenId);
            let myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [{
                        label: '',
                        data: [],
                        backgroundColor: [
                            'rgba(255, 255, 255, 0)',
                        ],
                        borderColor: [
                            this.rgb
                        ],
                        borderWidth: 2
                    }]
                },
                options: optionChartLineNotLable
            });
        };

        this.updateData = () => {
            let value = this.widgetId;
            value = value.replace(this.type.toLowerCase(), "value");
            let myChart = this.chart;
            //let data = Math.floor(100 + Math.random() * 900);
            let d = new Date();
            myChart.data.labels.push(d.toLocaleTimeString());
            myChart.data.datasets.forEach((dataset) => {
                if (dataset.data.length > 10) {
                    dataset.data.splice(0, 1);
                    //myChart.data.labels.splice(0, 1);
                }
                let data = objectPath.get(Datasource.getDatasources(), this.datasource);
                dataset.data.push(data);
                $("#" + value).html(data);
            });

            if (myChart.data.labels.length > 10) myChart.data.labels.splice(0, 1);

            myChart.update();
            this.updateLastUpdate();
        };

        this.liveData = () => {
            let value = this.widgetId;
            value = value.replace(this.type, "value_");
            let myChart = this.chart;
            let d = new Date();
            myChart.data.labels.push(d.toLocaleTimeString());
            myChart.data.datasets.forEach((dataset) => {
                if (dataset.data.length > 10) {
                    dataset.data.splice(0, 1);
                    //myChart.data.labels.splice(0, 1);
                }
                let data = dataset.data[dataset.data.length - 1];
                dataset.data.push(data);
            });

            if (myChart.data.labels.length > 10) myChart.data.labels.splice(0, 1);

            myChart.update();
            //this.updateLastUpdate();
        };
    }
}

class Radar extends Widget {
    constructor(widget) {
        super(widget);

        this.datasets = widget.datasets;
        this.labels = widget.labels;
        this.label = widget.label;
        this.color = widget.color;
        this.radar = null;

        let config = {
            type: 'radar',
            data: {
                labels: [],
                datasets: []
            },
            options: {
                maintainAspectRatio: false,
                legend: {
                    position: 'top',
                },
                title: {
                    display: true,
                },
                scale: {
                    ticks: {
                        beginAtZero: true
                    }
                }
            }
        };

        this.createRadar = () => {
            let ctx = document.getElementById(this.widgetId);
            let myRadarChart = new Chart(ctx, config);
            let i = 0;
            myRadarChart.data.labels = this.labels;
            myRadarChart.data.datasets = deepCopy(this.datasets);
            myRadarChart.data.datasets.forEach((dataset) => {
                dataset.label = this.label[i];
                dataset.backgroundColor = convertHex(this.color[i], 20);
                dataset.borderColor = this.color[i];
                dataset.pointBackgroundColor = this.color[i];
                dataset.data = [];
                i++;
            });
            myRadarChart.update();
            this.radar = myRadarChart;
        };

        this.updateData = () => {
            let i = 0;

            this.radar.data.datasets.forEach((dataset) => {
                dataset.data = [];
                this.radar.data.labels.map(k => {
                    let data = objectPath.get(Datasource.getDatasources(), this.datasource[i]);
                    dataset.data.push(data);
                    i++;
                });
            });
            this.radar.update();
            this.updateLastUpdate();
        };
    }
}

class RadarEx {
    constructor() {

        let colorEx = {
            0: 'rgb(255, 99, 132)',
            1: 'rgb(255, 159, 64)',
            2: 'rgb(255, 205, 86)',
            3: 'rgb(75, 192, 192)',
            4: 'rgb(54, 162, 235)',
            5: 'rgb(153, 102, 255)',
        };

        let config = {
            type: 'radar',
            data: {
                labels: [],
                datasets: []
            },
            options: {
                legend: {
                    position: 'top',
                },
                title: {
                    display: true,
                },
                scale: {
                    ticks: {
                        beginAtZero: true
                    }
                }
            }
        };

        this.createRadarExample = () => {
            if (radarEx === null) {
                let ctx = document.getElementById("example_radar");
                let myRadarChart = new Chart(ctx, config);
                radarEx = myRadarChart;
                this.updateRadarExample();
            }
        };

        let removeRaderExample = () => {
            radarEx.data.labels = [];
            radarEx.data.datasets = [];
        };

        this.updateRadarExample = () => {
            let lables = [];
            let lable = [];
            let data = [];
            let colorInput = [];
            let color = Chart.helpers.color;


            $(".radar-labels:visible").each(function () {
                lables.push($(this).val());
                data.push(getRandomInt(0, 50));
            });


            removeRaderExample();

            $(".label-radar:visible").each(function () {
                lable.push($(this).val());
                radarEx.data.datasets.push({});
            });

            $(".radar-color").each(function () {
                colorInput.push($(this).val());
            });

            // dataset.backgroundColor = color(colorEx[colorIndex]).alpha(0.2).rgbString();
            // dataset.borderColor = colorEx[colorIndex];
            // dataset.pointBackgroundColor = colorEx[colorIndex];

            let i = 0;
            radarEx.data.labels = lables;
            radarEx.data.datasets.forEach((dataset) => {
                dataset.label = lable[i];
                dataset.backgroundColor = convertHex(colorInput[i], 20);
                dataset.borderColor = colorInput[i];
                dataset.pointBackgroundColor = colorInput[i];
                dataset.data = data;
                data = data.map(n => {
                    return n + getRandomInt(0, 10);
                });
                i++;
            });
            radarEx.update();
        };
    }
}

class Gauges extends Widget {
    constructor(widget) {
        super(widget);
        this.fullScreenId = widget.fullScreenId;
        this.textId = widget.textId;
        this.gaugeWidget = null;
        this.opts = widget.opts;
        this.limitMax = widget.limitMax ? widget.limitMax : 100;
        this.limitMin = widget.limitMin ? widget.limitMin : 0;
        this.unit = widget.unit;

        this.createGages = () => {
            this.gaugeWidget = new JustGage({
                id: this.widgetId,
                value: 0,
                min: this.limitMin,
                max: this.limitMax,
                symbol: ' ' + this.unit,
                relativeGaugeSize: true,
                titlePosition: "below"
            });
            $("#" + this.widgetId).height($("#" + this.widgetId).height() - 5);
            $("#" + this.widgetId).addClass('container');

            //this.updateData();

            // let target = document.getElementById(this.widgetId); // your canvas element
            // let gauge = new Gauge(target).setOptions(this.opts); // create sexy gauge!
            // gauge.maxValue = this.limitMax; // set max gauge value
            // gauge.setMinValue(0);  // Prefer setter over gauge.minValue = 0
            // gauge.animationSpeed = 32; // set animation speed (32 is default value)
            // gauge.set(0); // set actual value
            // this.gaugeWidget = gauge;
            // this.updateData();
        };

        this.updateData = () => {
            //getRandomInt(Number(this.limitMin), Number(this.limitMax))
            let data = objectPath.get(Datasource.getDatasources(), this.datasource[0]);
            this.gaugeWidget.refresh(data ? data : 0);
            this.updateLastUpdate();

            // let data = Math.floor(Math.random() * (100 - 1));
            // $("#" + this.textId).html(data);
            // this.gaugeWidget.set(data);
            // this.updateLastUpdate();


        };
    }
}

class Map extends Widget {
    constructor(widget) {
        super(widget);
        this.isGroupData = widget.isGroupData;
        this.datasource = widget.datasource;
        this.start = widget.start;
        this.end = widget.end;
        this.fullScreenId = widget.fullScreenId;
        this.myMap = null;

        this.createMap = () => {
            let mymap;
            let mapid = this.widgetId;
            let height = $("#" + this.itemId).height() - 100;
            $('#' + mapid).css('height', height);
            $('#' + mapid).css('width', 'auto');

            mymap = L.map(mapid, {
                dragging: true,
                zoomControl: true,
                scrollWheelZoom: false,
                zoomAnimation: false,
            });
            

            $.getJSON('https://raw.githubusercontent.com/apisit/thailand.json/master/thailand.json').then(function (geoJSON) {
                var osm = new L.TileLayer.BoundaryCanvas("https://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}", {
                    boundary: geoJSON,
                    minZoom: 5,
                    maxZoom: 9,
                    attribution: '&copy; Tiles &copy; Esri &mdash; Esri, DeLorme, NAVTEQ'
                });
                mymap.addLayer(osm);
                var ukLayer = L.geoJSON(geoJSON);
                mymap.fitBounds(ukLayer.getBounds());
            }).then(() => {

            });

            function disableGrid() {
                let grid = $('.grid-stack').data('gridstack');
                grid.enableMove(false);
            }

            function enableGrid() {
                let grid = $('.grid-stack').data('gridstack');
                grid.enableMove(true);
            }

            $('.grid-stack').on('change', function (e, items) {
                if (mymap != null) {
                    mymap.invalidateSize(true);
                }
            });

            // mymap.on('mousemove', disableGrid);
            // mymap.on('mouseout', enableGrid);

            this.myMap = mymap;
        };

        this.updateData = () => {
            this.myMap.invalidateSize(true);
            //console.log(this.myMap.removeLayer());
            let heat = [];
            if (!this.isGroupData) {
                this.datasource.map(data => {
                    let lat = objectPath.get(Datasource.getDatasources(), data.latitude);
                    let lon = objectPath.get(Datasource.getDatasources(), data.longitude);
                    let label = data.label;
                    let value = objectPath.get(Datasource.getDatasources(), data.value);
                    L.marker([lat, lon]).addTo(this.myMap).bindPopup(`${label} : ${value}`);
                    // heat.push([lat, lon, value / 100]);


                    // L.heatLayer(heat, {
                    //     radius: 75
                    // }).addTo(this.myMap);
                });

            } else {
                let datasource = objectPath.get(Datasource.getDatasources(), this.datasource.groupData);
                for (let i in datasource) {
                    let lat = objectPath.get(Datasource.getDatasources(), this.datasource.latitude.replace('[]', i));
                    let lon = objectPath.get(Datasource.getDatasources(), this.datasource.longitude.replace('[]', i));
                    let label = objectPath.get(Datasource.getDatasources(), this.datasource.label.replace('[]', i));
                    let value = objectPath.get(Datasource.getDatasources(), this.datasource.value.replace('[]', i));
                    L.marker([lat, lon]).addTo(this.myMap).bindPopup(`${label} : ${value}`);
                    heat.push([lat, lon, value / 100]);

                }
                // L.heatLayer(heat, {
                //     radius: 75
                // }).addTo(this.myMap);
            }

            // $.ajax({
            //     dataType: "json",
            //     url: '/js/company/test-api.json',
            //     async: false,
            //     success: function (data) {
            //         var heat = [];
            //         var WeatherForecasts = data.WeatherForecasts;
            //         for (let i in WeatherForecasts) {
            //             L.marker([WeatherForecasts[i].location.lat, WeatherForecasts[i].location.lon]).addTo(mymap).bindPopup(WeatherForecasts[i].location.province + " " + "อ ุณหภูมิที่ระดับพื้นผิว : " + WeatherForecasts[i].forecasts[1].data.tc + " °C");
            //             heat.push([WeatherForecasts[i].location.lat, WeatherForecasts[i].location.lon, WeatherForecasts[i].forecasts[1].data.tc / 100]);

            //         }
            //         L.heatLayer(heat, {
            //             radius: 75
            //         }).addTo(mymap);
            //     }
            // });
            this.updateLastUpdate();
        }

        this.createFullWidget = () => {
            let mymap;
            let mapid = this.fullScreenId;
            let height = "450px";
            $('#' + mapid).css('height', height);
            $('#' + mapid).css('width', 'auto');

            mymap = L.map(mapid, {
                dragging: true,
                zoomControl: true,
                scrollWheelZoom: false,
                zoomAnimation: false,
            });

            $.getJSON('https://raw.githubusercontent.com/apisit/thailand.json/master/thailand.json').then(function (geoJSON) {
                var osm = new L.TileLayer.BoundaryCanvas("https://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}", {
                    boundary: geoJSON,
                    minZoom: 5,
                    maxZoom: 9,
                    attribution: '&copy; Tiles &copy; Esri &mdash; Esri, DeLorme, NAVTEQ'
                });
                mymap.addLayer(osm);
                var ukLayer = L.geoJSON(geoJSON);
                mymap.fitBounds(ukLayer.getBounds());


            }).then(() => {
                setTimeout(() => {
                    mymap.invalidateSize(true);
                    $.ajax({
                        dataType: "json",
                        url: '/js/company/test-api.json',
                        async: false,
                        success: function (data) {
                            var heat = [];
                            var WeatherForecasts = data.WeatherForecasts;
                            for (let i in WeatherForecasts) {
                                L.marker([WeatherForecasts[i].location.lat, WeatherForecasts[i].location.lon]).addTo(mymap).bindPopup(WeatherForecasts[i].location.province + " " + "อ ุณหภูมิที่ระดับพื้นผิว : " + WeatherForecasts[i].forecasts[1].data.tc + " °C");
                                heat.push([WeatherForecasts[i].location.lat, WeatherForecasts[i].location.lon, WeatherForecasts[i].forecasts[1].data.tc / 100]);

                            }
                            L.heatLayer(heat, {
                                radius: 75
                            }).addTo(mymap);
                        }
                    });

                }, 1000);
            });
        };
    }
}

class Table extends Widget {
    constructor(widget) {
        super(widget);
        this.table = widget.table;

        this.createTable = () => {
            this.el = $('#' + this.widgetId);
            this.el.find('thead').append('<tr></tr>');
            for (let i = 0; i < this.table.col_labels.length; i++) {
                this.el.find('thead tr').append(`<th>${this.table.col_labels[i]}</th>`);
            };

            for (let i = 0; i < this.table.rows.length; i++) {
                let rows = '';
                for (let j = 0; j < this.table.col_labels.length; j++) {
                    if (j === 0) {
                        rows += `<td>${this.table.rows[i].label}</td>`;
                    } else {
                        rows += `<td></td>`;
                    }
                }
                this.el.find('tbody').append(`<tr>${rows}</tr>`);
            };

            $('#' + this.widgetId).parent().addClass('table-responsive');
            $('#' + this.widgetId).css({"width":"100%"});

        }

        this.updateData = () => {
            try {
                let i = 0;
                let rows = this.table.rows;
                this.el.find('tbody tr').each(function () {
                    let j = 0;
                    $(this).find('td').not(':first').each(function () {
                        let data = objectPath.get(Datasource.getDatasources(), rows[i].data[j]);
                        $(this).html(data);
                        j++;
                    });
                    i++;
                });
                this.updateLastUpdate();
            } catch (error) {

            }
        }
    }
}

class TextValue extends Widget {
    constructor(widget) {
        super(widget);
        this.textValue = widget.textValue;
        this.unit = widget.unit;
        this.rgb = widget.rgb;

        this.createTextValue = () => {
            //this.updateData();
        };

        this.updateData = () => {
            //let data = Math.floor(Math.random() * (100 - 1));
            let data = objectPath.get(Datasource.getDatasources(), this.datasource[0]);
            $("#" + this.widgetId).html(data);
            this.updateLastUpdate();
        };
    }
}

class TextBox extends Widget {
    constructor(widget) {
        super(widget);
        this.textbox = widget.textbox;
        this.fontsize = widget.fontsize;
        this.createTextBox = () => {
            // console.log($("#" + this.widgetId));
            $("#" + this.widgetId).html(this.textbox);
            $("#" + this.widgetId).css({
                "font-size": this.fontsize + "px"
            });
        };
    }
}

var widgetList = [];

class Datasources {
    constructor() {
        let listDatasource = null;
        let datasources = [];
        let apiSelect = 'datasources';

        let keyInput = [];

        let dataAccess = [];

        let modalEdit = null;

        let apiCount = 0;

        let getWebServices = async () => {
            await $.ajax({
                url: END_POINT + API.getWebServices,
                success: (res) => {
                    listDatasource = res.data;
                    listDatasource.map(data => {
                        $("#webservice_id").append(`<option value="${data.webservice_id}">${data.service_name}</option>`);
                    });
                },
                error: (res) => {
                    console.log(res);
                }
            });
        };

        let getDatasource = async () => {
            await $.ajax({
                url: END_POINT + API.getDatasource,
                method: 'GET',
                data: {
                    static_id: $("#static_id").html(),
                },
                success: async (res) => {
                    
                    listDatasource = res.data;
                    await updateListDatasource();
                },
                error: (res) => {
                    console.log(res);
                }
            });
        };

        let addDatasource = () => {
            $.ajax({
                url: END_POINT + API.addDatasource,
                method: 'POST',
                data: {
                    static_id: $("#static_id").html(),
                    name: $("#name_datasource").val(),
                    webservice_id: $("#webservice_id").val(),
                    timeInterval: 4500,
                },
                success: (res) => {
                    getDatasource();
                    $("#addDatasource").modal('hide');
                },
                error: (res) => {
                    console.log(res);
                }
            });
        };

        let updateListDatasource = async () => {
            $("#list_datasource").empty();
            $(".select-datasource").empty();
            let html = "<h5>Datasource</h5>";
            let opt = "<option value=''>--Select datasource--</option>";
            await listDatasource.map(async (data, index) => {
                html += `<div class="row">
                            <div class="col-2 edit-datasource" title="Edit" index=${index} style="cursor:pointer"> 
                                ${data.name}
                            </div>
                            <div class="col-2 unActiveApi" id="datasource-isActive-${index}">
                                <b>Not active</b>
                            </div>
                            <div class="col-2" id="datasource-${index}">

                            </div>
                            <div class="col-1">
                                <i class="fas fa-trash-alt remove-datasource" id="${data.id}"></i>
                            </div>
                        </div>`;
                opt += `<option value='${data.id}'>${data.name}</option>`;
                apiCount++;
                await getApiDatasource(index);
            });

            // $(".edit-datasource").unbind().click(function () {

            // });

            
            // socket.on('broadcast', function (data) {
            //     console.log(data);
            //     let api = listDatasource.filter(_data => {
            //         return _data.webservice_id === data.webservice_id
            //     })
                
            //     datasources[api[0].name] = data.data;

            //     widgetList.map(widget => {
                  
            //         if(widget.apiName && widget.apiName === api[0].name){
            //             if(widget.type != "Map")
            //             widget.updateData();
            //         }
            //     })
            // });

            // setInterval(() => {
            //     checkTimeToUpdate();
            // }, 1000);

            $(".select-datasource").html(opt);
            let list_datasource = $("#list_datasource").html(html);

            list_datasource.find('.remove-datasource').unbind().click(function () {
                let id = $(this).attr('id');
                let datasource = findDatasource(id);
                let check = false;
                widgetList.map(widget => {
                    if (widget.apiName === datasource.name) {
                        check = true;
                    }
                })
                if (!check) {
                    swal({
                        title: "Are you sure?",
                        text: `to delete datasource name : ${datasource.name}`,
                        icon: "warning",
                        buttons: true,
                        dangerMode: true,
                    }).then((willDelete) => {
                        if (willDelete) {
                            deleteDatasource(id, datasource.name);

                        } else {
                            return;
                        }
                    });
                } else {
                    swal({
                        title: "Warning !",
                        text: `Can't delete datasource name : ${datasource.name} because have widget used this datasource`,
                        icon: "warning",
                        dangerMode: true,
                    });
                }
            });
        };

        let deleteDatasource = (id, name) => {
            $.ajax({
                url: END_POINT + API.deleteDatasource,
                method: 'DELETE',
                data: {
                    static_id: $("#static_id").html(),
                    id: id,
                },
                success: (res) => {
                    // let index = datasources.findIndex(datasource => datasource.name == name);
                    // datasources.splice(index, 1);
                    $(`.remove-datasource[id='${id}']`).parent().parent().remove();
                },
                error: (res) => {
                    console.log(res);
                }
            });
        };

        // let onEditDatasourceClick = () => {
        //     if (modalEdit === null) {
        //         modalEdit = `    <div class="modal fade" id="addDatasource">
        //                             <div class="modal-dialog modal-lg">
        //                                 <div class="modal-content">

        //                                     <div class="modal-header">
        //                                         <h4 class="modal-title">Edit Datasource</h4>
        //                                         <button type="button" class="close" data-dismiss="modal">&times;</button>
        //                                     </div>

        //                                     <div class="modal-body">
        //                                         <div class="row">
        //                                             <div class="col-12">
        //                                                 <label for="">Name</label>
        //                                                 <input type="text" id="edit-name-datasource" class="form-control">
        //                                             </div>
        //                                         </div>
        //                                         <div class="row">
        //                                             <div class="col-6">
        //                                                 <label for="">Channel</label>
        //                                                 <select name="" id="edit-webservice_id" class="form-control">
        //                                                     <option value="">--Select Channel--</option>
        //                                                 </select>
        //                                             </div>
        //                                             <div class="col-6">
        //                                                 <label for="">Set time interval (s)</label>
        //                                                 <input type="number" id="add-data-time-interval" class="form-control">
        //                                             </div>
        //                                         </div>
        //                                     </div>

        //                                     <div class="modal-footer">
        //                                         <a class="btn btn-success btn-block" id="btn-add-new-datasource" href="#">Save</a>
        //                                     </div>
        //                                 </div>
        //                             </div>
        //                         </div>`;
        //     }
        // };

        let checkTimeToUpdate = () => {
            listDatasource.map(async (data, index) => {
                let diff = Dashboard.diffTime(data.lastUpdate, data.timeInterval);
                if (diff >= data.timeInterval) {
                    await getApiDatasource(index);
                }
                return;
            });

        };

        let getApiDatasource = async (index) => {
            //url: '/js/company/test-api2.json',
            let url = listDatasource[index].URL;
            let name = listDatasource[index].name;
            await $.ajax({
                url: '/js/company/test-api2.json',
                success: async (res) => {
                    // let lastUpdate = new Date();
                    // listDatasource[index].lastUpdate = lastUpdate;
                    // $("#datasource-" + index).html(lastUpdate.toDateString() + " " + lastUpdate.toLocaleTimeString());
                    // $("#datasource-isActive-" + index).html('<b>Active</b>');
                    // $("#datasource-isActive-" + index).removeClass('unActiveApi');
                    // $("#datasource-isActive-" + index).addClass('activeApi');
                    datasources[name] = res;
                    // if (apiCount === listDatasource.length) {
                    //     state.loadingApi = true;
                    // }
                },
                error: (res) => {
                    console.log(res);
                }
            });

            await $.ajax({
                url: '/js/company/test-api-static.json',
                success: async (res) => {
                    let lastUpdate = new Date();
                    listDatasource[index].lastUpdate = lastUpdate;
                    $("#datasource-" + index).html(lastUpdate.toDateString() + " " + lastUpdate.toLocaleTimeString());
                    $("#datasource-isActive-" + index).html('<b>Active</b>');
                    $("#datasource-isActive-" + index).removeClass('unActiveApi');
                    $("#datasource-isActive-" + index).addClass('activeApi');
                    datasources[name]['daily'] = res;
                    if (apiCount === listDatasource.length) {
                        state.loadingApi = true;
                    }
                },
                error: (res) => {
                    console.log(res);
                }
            });
        };

        let findDatasource = (id) => {
            return listDatasource.find(data => {
                return data.id == id;
            });
        };

        let getKeyDatasource = (index, data) => {
            if (typeof (data) == 'object') {
                if (index == keyInput.length) {
                    return [Object.keys(data), data] ? [Object.keys(data), data] : [];
                }
                return getKeyDatasource(index + 1, data[keyInput[index]]);
            }
        };

        let getKeyObject = (data) => {
            if (typeof (data) == 'object') {
                return Object.keys(data);
            }
        };

        let createDataList = (api, el = null) => {
            $(el).parent().find(".data-list").empty();
            //let js = apiSelect + "['" + api + "']";
            let js = api;
            $(el).val(js);
            updateDataList(js, el);
        };

        let updateDataList = (value, el = null) => {

            try {
                keyInput = value.match(REG);
                //let key = getKeyDatasource(2, datasources[keyInput[1]]);
                let key = getKeyObject(objectPath.get(datasources, value));
                el.parent().find(".data-list").empty();

                let html = "";
                if (keyInput.length > 1)
                    html += `<li class="back-value-data list-group-item" back="${keyInput.slice(0, keyInput.length - 1).join('.')}" style="cursor:pointer">Back</li>`;

                key.map(_key => {
                    let data = objectPath.get(datasources, `${value}.${_key}`);
                    html += `<li class="value-data list-group-item" style="cursor:pointer" value="${_key}">${_key} : ${data}</li>`;
                });
                let data_list = el.parent().find(".data-list").append(html);

                data_list.parent().find('.data-list').hover(function () {
                    $(this).closest('.value-datasource').focus();
                }, function () {
                    $(this).prev().blur();
                    $(this).hide();
                });

                data_list.find('.value-data').unbind().click(function () {
                    let el_val = $(this).parent().parent().find('.value-datasource,.value-group-data');
                    let a = $(el_val).val();
                    a += `.${$(this).attr('value')}`;
                    $(el_val).val(a);
                    updateDataList($(el_val).val(), el_val);
                    $(el_val).focus();

                    $(".value-group-data").change();
                });

                data_list.find('.back-value-data').unbind().click(function () {
                    let back = $(this).attr('back');
                    // let value = "datasource";
                    // for (let i = 1; i < back.length; i++) {
                    //     value += `['${back[i]}']`;
                    // }
                    $(this).parent().parent().find('.value-datasource,.value-group-data').val(back);
                    updateDataList(back, $(this).parent().parent().find('.value-datasource,.value-group-data'));
                });
                $(".data-list").scrollTop(0);


            } catch (error) {

            }

            // $("#Mutiline_value  .data-list,#Radar  .data-list,#Table  .data-list").hover(function () {
            //     $(this).closest('.value-datasource').focus();
            // }, function () {
            //     $(this).prev().blur();
            //     $(this).hide();
            // });

            // $(".value-data").unbind().click(function () {
            //     let el_val = $(this).parent().parent().find('.value-datasource,.value-group-data');
            //     let a = $(el_val).val();
            //     a += `['${$(this).attr('value')}']`;
            //     $(el_val).val(a);
            //     updateDataList($(el_val).val(), el_val);
            //     $(el_val).focus();

            //     $(".value-group-data").change();
            // });

            // $(".back-value-data").unbind().click(function () {
            //     let back = $(this).attr('back').split(',');
            //     let value = "datasource";
            //     for (let i = 1; i < back.length; i++) {
            //         value += `['${back[i]}']`;
            //     }
            //     $(this).parent().parent().find('.value-datasource,.value-group-data').val(value);
            //     updateDataList(value, $(this).parent().parent().find('.value-datasource,.value-group-data'));
            // });
        };


        let groupData = {
            createGroupData: (api, el = null) => {
                el.find(".data-list").empty();
                el.find('.value-group-data').val(api);
                groupData.updateDataGroup(api, el);
            },

            updateDataGroup: (api, el) => {
                try {
                    let key = getKeyObject(objectPath.get(datasources, api));
                    el.find(".data-list").empty();
                    let html = "";
                    key.map(_key => {
                        html += `<li class="value-data list-group-item" style="cursor:pointer" value="${_key}">${_key}</li>`;
                    });


                    let data_list = el.find(".data-list-group").append(html);

                    data_list.find('.value-data').unbind().click(function () {
                        let el_val = el.parent().parent().find('.value-group-data');
                        let a = $(el_val).val();
                        a += `.${$(this).attr('value')}`;
                        $(el_val).val(a);
                        groupData.updateDataGroup($(el_val).val(), el);
                        $(el_val).focus();

                        $(".value-group-data").change();
                    });

                    data_list.parent().find(".data-list").hover(function () {
                        $(this).closest('.value-datasource').focus();
                    }, function () {
                        $(this).prev().blur();
                        $(this).hide();
                    });

                    $(".data-list").scrollTop(0);
                    // if (keyInput.length > 2)
                    //     el.parent().find(".data-list").prepend(`<li class="back-value-data list-group-item" back="${keyInput.slice(0, keyInput.length - 1).join(',')}" style="cursor:pointer">Back</li>`);

                } catch (error) {
                    console.log(error);
                }

                $("#Mutiline_group_data .group-data .back-value-data,#map_group_data .group-data .back-value-data").unbind().click(function () {
                    let back = $(this).attr('back').split(',');
                    let value = "datasource";
                    for (let i = 1; i < back.length; i++) {
                        value += `['${back[i]}']`;
                    }
                    $(this).parent().parent().find('.value-datasource,.value-group-data').val(value);
                    updateDataList(value, $(this).parent().parent().find('.value-datasource,.value-group-data'));
                });
            },


            createDataValue: (api, el) => {
                try {
                    let key = getKeyObject(objectPath.get(datasources, api));
                    el.find(".data-list-value").empty();
                    let html = "";
                    key.map(_key => {
                        let data = objectPath.get(datasources, `${$(".value-group-data").val()}.0.${_key}`);
                        html += `<li class="value-data list-group-item" style="cursor:pointer" value="${_key}">${_key} : ${data}</li>`;
                    });

                    let data_list = el.find(".data-list-value").append(html);

                    data_list.find('.value-data').unbind().click(function () {
                        let el_val = $(this).parent().parent().find('.value-datasource');
                        let a = $(el_val).val();
                        a += `.${$(this).attr('value')}`;
                        $(el_val).val(a);
                        $(el_val).focus();
                        groupData.updateDataValue(a, el_val)
                    });;

                    data_list.parent().find(".data-list").hover(function () {
                        $(this).closest('.value-datasource').focus();
                    }, function () {
                        $(this).prev().blur();
                        $(this).hide();
                    });

                    $(".data-list-value").scrollTop(0);
                    // if (keyInput.length > 2)
                    //     el.parent().find(".data-list").prepend(`<li class="back-value-data list-group-item" back="${keyInput.slice(0, keyInput.length - 1).join(',')}" style="cursor:pointer">Back</li>`);

                } catch (error) {
                    console.log(error);
                }


                // $(".back-value-data").unbind().click(function () {
                //     let back = $(this).attr('back').split(',');
                //     let value = "datasource";
                //     for (let i = 1; i < back.length; i++) {
                //         value += `['${back[i]}']`;
                //     }
                //     $(this).parent().parent().find('.value-datasource,.value-group-data').val(value);
                //     updateDataList(value, $(this).parent().parent().find('.value-datasource,.value-group-data'));
                // });
            },

            updateDataValue: (api, el) => {
                try {

                    let key = getKeyObject(objectPath.get(datasources, $(".value-group-data").val() + '.0' + el.val()));
                    console.log($(".value-group-data").val() + '.0' + el.val());

                    let keyInput = [];
                    if (api != "") {
                        keyInput = api.match(REG);
                    }

                    el.parent().find(".data-list-value").empty();
                    let html = "";

                    if (keyInput.length == 1)
                        html += `<li class="back-value-data list-group-item" back="" style="cursor:pointer">Back</li>`;
                    else {
                        html += `<li class="back-value-data list-group-item" back="${keyInput.slice(0, keyInput.length - 1).join('.')}" style="cursor:pointer">Back</li>`;
                    }

                    key.map(_key => {
                        let data = objectPath.get(datasources, `${datasources}${$(".value-group-data").val()}.0${el.val()}.${_key}`);
                        //console.log(`${datasources}${$(".value-group-data").val()}.0${api}.${_key}`, api, data);
                        html += `<li class="value-data list-group-item" style="cursor:pointer" value="${_key}">${_key} : ${data} </li>`;
                    });

                    $(".data-list-value").scrollTop(0);

                    let data_list = el.parent().find(".data-list-value").append(html);

                    data_list.find(".value-data").unbind().click(function () {
                        let el_val = $(this).parent().parent().find('.value-datasource');
                        let a = $(el_val).val();
                        a += `.${$(this).attr('value')}`;
                        $(el_val).val(a);
                        $(el_val).focus();
                        groupData.updateDataValue(a, el_val)
                    });

                    data_list.find(".back-value-data").unbind().click(function () {
                        let value_datasource = $(this).parent().parent().find('.value-datasource')
                        let back = $(this).attr('back');
                        if (back == '') {
                            value_datasource.val('');
                        } else {
                            value_datasource.val('.' + back);

                        };
                        groupData.updateDataValue(back, value_datasource)

                    });

                    data_list.parent().find(".data-list").hover(function () {
                        $(this).closest('.value-datasource').focus();
                    }, function () {
                        $(this).prev().blur();
                        $(this).hide();
                    });


                } catch (error) {
                    console.log(error);
                }
            }
        }

        this.setDataAccess = (data) => {
            dataAccess = data;
        };

        this.getDatasourceValue = (index, data) => {
            if (typeof (data[dataAccess[index]]) == 'object') {
                return this.getDatasourceValue(index + 1, data[dataAccess[index]]);
            }
            return data[dataAccess[index]];
        };

        this.fatoryGetDatasourceValue = (inputDataAccess, key) => {
            try {
                dataAccess = inputDataAccess;
                return this.getDatasourceValue(2, datasources[key]);
            } catch (error) {

            }
        };

        this.getDatasources = () => {
            return datasources;
        };

        let bindElement = async () => {
            $("#btn_add_param").unbind().click(function () {
                let html = $("#layout_param_add").html();

                let form_add_param = $("#form_add_param").append(html);
                form_add_param.find(".remove-param").unbind().click(function () {
                    $(this).parent().parent().remove();
                });
            });

            $("#btn-add-datasource").unbind().click(function () {
                $("#addDatasource").modal('show');
            });

            $("#btn-add-new-datasource").unbind().click(function () {
                addDatasource();
            });

            $('#Gauges,#TextValue,#text-line').on('change', '.select-datasource', function () {
                $(this).parent().next().find(".value-datasource").val('');
                $(this).parent().next().find(".data-list").hide();
                if ($(this).val() != '') {
                    let datasource = findDatasource($(this).val());
                    state.apiName = datasource.name;
                    $(this).parent().next().find(".value-datasource").focus();
                    createDataList(datasource.name, $(this).parent().next().find(".value-datasource"));
                } else {
                    $(this).parent().next().find(".data-list").empty();
                }
            });

            // $('#Gauges,#TextValue,#text-line,#map').on('focus', '.value-datasource', function () {
            //     $('#Gauges,#TextValue,#text-line,#map').find('.data-list.active-data').each(function () {
            //         $(this).hide();
            //         $(this).removeClass('active-data');
            //     });
            //     $(this).next().addClass('active-data');
            //     $(this).next().show();
            // });

            $("#Mutiline_value").on('change', '.select-datasource', function () {
                $("#Mutiline_value").find(".value-datasource").val('');
                $("#Mutiline_value").find(".data-list").hide();
                if ($(this).val() != '') {
                    let datasource = findDatasource($(this).val());
                    state.apiName = datasource.name;
                    //$(this).parent().parent().next().find(".value-datasource").focus();
                    createDataList(datasource.name, $("#Mutiline_value").find(".value-datasource"));
                } else {
                    $("#Mutiline_value").find(".data-list").empty();
                }
            });

            $("#map_value").on('change', '.select-datasource', function () {
                $("#map_value").find(".value-datasource").val('');
                $("#map_value").find(".data-list").hide();
                if ($(this).val() != '') {
                    let datasource = findDatasource($(this).val());
                    state.apiName = datasource.name;
                    //$(this).parent().parent().next().find(".value-datasource").focus();
                    createDataList(datasource.name, $("#map_value").find(".value-datasource"));
                } else {
                    $(this).parent().parent().next().find(".data-list").empty();
                }
            });

            $("#Mutiline_group_data,#map_group_data").on('change', '.select-datasource', function () {
                $("#Mutiline_group_data,#map_group_data").find(".value-datasource").val('');
                $("#Mutiline_group_data,#map_group_data").find(".data-list").hide();
                if ($(this).val() != '') {
                    let datasource = findDatasource($(this).val());
                    state.apiName = datasource.name;
                    groupData.createGroupData(datasource.name, $("#Mutiline_group_data,#map_group_data"));
                } else {
                    $(".data-list").empty();
                    $(".value-group-data").val('');
                }
            });


            $("#Mutiline_group_data,#map_group_data").on('change', '.value-group-data', function () {
                let el = $("#Mutiline_group_data,#map_group_data");
                let data = objectPath.get(datasources, $(this).val());
                if (validate.isArray(data)) {
                    el.find("input[name='end']").val(data.length - 1);
                    groupData.createDataValue($(this).val() + ".0", el);
                } else {
                    $(".data-list-value,data-list-label").empty();
                }

            });

            $("#Mutiline_group_data").on('change', '.data-list-value', function () {

            });

            $("#Table").on('change', '.select-datasource', function () {
                $("#Table").find(".value-datasource").val('');
                $("#Table").find(".data-list").hide();
                $("#Table").find(".data-list").empty();
                if ($(this).val() != '') {
                    let datasource = findDatasource($(this).val());
                    state.apiName = datasource.name;
                    createDataList(datasource.name, $("#Table").find(".value-datasource"));
                }
            });

            $('#Radar').on('change', '.select-datasource', function () {
                let el_value = $(this).parent().parent().next().next();
                $(el_value).find(".value-datasource").val('');
                $(el_value).find(".data-list").hide();
                $(el_value).find(".data-list").empty();
                if ($(this).val() != '') {
                    let datasource = findDatasource($(this).val());
                    state.apiName = datasource.name;
                    createDataList(datasource.name, $(el_value).find(".value-datasource"));
                }
            });

            $("#addWidget .modal-body").on('focus', '.value-datasource,.value-group-data', function () {
                $("#addWidget").find('.data-list.active-data').hide().removeClass('active-data');
                $(this).next().addClass('active-data');
                $(this).next().show();
            });

            // $('#addWidget .modal-body').on('hover', '.data-list > .value-data', function () {
            //     console.log('hi');
            //     $(this).closest('.value-datasource').focus();
            // }, function () {
            //     $(this).prev().blur();
            //     $(this).hide();
            // });

            // $("#Table").on('focus', '.value-datasource', function () {
            //     $("#Table").find('.data-list.active-data').hide().removeClass('active-data');
            //     $(this).next().addClass('active-data');
            //     $(this).next().show();
            // });

            // $('#Radar').on('focus', '.value-datasource', function () {
            //     console.log($(this));
            //     $(this).parent().parent().find('.data-list.active-data').each(function () {
            //         $(this).hide();
            //         $(this).removeClass('active-data');
            //     });
            //     $(this).next().addClass('active-data');
            //     $(this).next().show();
            // });

            // $('#Mutiline_value').on('focus', '.value-datasource', function () {
            //     $(this).parent().parent().parent().find('.data-list.active-data').each(function () {
            //         $(this).hide();
            //         $(this).removeClass('active-data');
            //     });
            //     $(this).next().addClass('active-data');
            //     $(this).next().show();
            // });

            // $('#Mutiline_group_data,#map_group_data').on('focus', '.value-group-data', function () {
            //     $('#Mutiline_group_data,#map_group_data').find('.data-list.active-data').each(function () {
            //         $(this).hide();
            //         $(this).removeClass('active-data');
            //     });
            //     $(this).next().addClass('active-data');
            //     $(this).next().show();
            // });

            // $('#Radar').on('hover', '.data-list', function () {
            //     $(this).closest('.value-datasource').focus();
            // }, function () {
            //     $(this).prev().blur();
            //     $(this).hide();
            // });

            $('#Mutiline_value,#Gauges,#TextValue,#Radar').on('keyup', '.value-datasource', function () {
                updateDataList($(this).val(), $(this));
            });

            $("#btn-add-value-Mutiline").unbind().click(function () {
                let formhtml = $("#line_value_layout").first().html();
                let html = elements.mutiLineValue.append(formhtml);
                let apiId = elements.mutiLineValue.find(elements.DOMString.class.selectDatasource).val();
                if (apiId != '') {
                    let datasource = findDatasource(apiId);
                    html.find(elements.DOMString.class.dataList).hide();
                    html.find(elements.DOMString.class.dataList).removeClass('active-data');
                    createDataList(datasource.name, html.find(elements.DOMString.class.valueDatasource).last());
                } else {
                    $(this).parent().parent().next().find(elements.DOMString.class.dataList).empty();
                }

            });

            $(".btn-add-point-map").unbind().click(function () {
                let formhtml = $("#map_value_layout").first().html();
                let html = elements.mapValue.append(formhtml);
                let apiId = elements.mapValue.find(elements.DOMString.class.selectDatasource).val();
                if (apiId != '') {
                    let datasource = findDatasource(apiId);
                    html.find(elements.DOMString.class.dataList).hide();
                    html.find(elements.DOMString.class.dataList).removeClass('active-data');
                    createDataList(datasource.name, html.find('.value-of-map:last ' + elements.DOMString.class.valueDatasource));
                } else {
                    $(this).parent().parent().next().find(elements.DOMString.class.dataList).empty();
                }

            });
        };

        this.initCreate = async () => {
            await bindElement();
            await getWebServices();
            await getDatasource();
        };
    }
}


class Dashboard {
    constructor() {

        let options = {
            cellHeight: 80,
            verticalMargin: 10,
            float: false
        };

        let grid = null;

        let time = null;

        let radarEx = null;
        let tableEx = null;

        let isGroupDataMutiLine = false;
        let isGroupDataMap = false;

        let sliderTime = null;

        let isRealTime = true;


        let getWigetType = () => {
            return elements.selectWidgetType.val();
        };

        let getTitleName = () => {
            return elements.inputTitleName.val();
        };

        let getTimeInterval = () => {
            return elements.inputTimeInterVal.val();
        };

        let getDateTimeNow = () => {
            let d = new Date();
            //return d.getDate() + "-" + d.getMonth() + "-" + d.getFullYear() + " " + d.getHours() + ":" + d.getMinutes() + ":" + d.getSeconds();
            return d.toUTCString();
        };

        let getValueMutiLine = (divId) => {
            let data_line = [];
            let data_widget = null;
            if (!isGroupDataMutiLine) {
                let length_label = elements.mutiLine.find(elements.DOMString.class.labelChartLine).length;
                let value_datasource = [];
                elements.mutiLineValue.find(elements.DOMString.class.valueDatasource).each(function () {
                    value_datasource.push($(this).val());
                });
                for (let i = 0; i < length_label; i++) {
                    let label_y = elements.mutiLineValue.find(elements.DOMString.class.labelChartLine);
                    let rgb = elements.mutiLineValue.find(elements.DOMString.class.colorChartLine);
                    let rgba = 'rgba(255,255,255,0.0)';
                    let data = null;
                    data = {
                        label: $(label_y[i]).val(),
                        backgroundColor: rgba,
                        borderColor: $(rgb[i]).val(),
                        lineTension: 0,
                        pointRadius: 0,
                        borderWidth: 2
                    };
                    data_line.push(data);
                }

                data_widget = {
                    isGroupData: false,
                    apiName: state.apiName,
                    datasource: value_datasource,
                    fullScreenId: "myChartFull_" + divId,
                    download: true,
                    type: getWigetType(),
                    title_name: getTitleName(),
                    lastUpdate: getDateTimeNow(),
                    timeInterval: getTimeInterval(),
                    datasets: [...data_line],
                };

            } else {
                let groupData = $(elements.DOMString.class.valueGroupData).val();
                let start = $(elements.DOMString.id.start).val();
                let end = $(elements.DOMString.id.end).val();
                let value = $("input[name='value-data']:visible").val();
                let label = $("input[name='label-data']:visible").val();
                for (let i = start; i <= end; i++) {
                    let data = null;
                    let hex = randomHexColor();
                    data = {
                        label: objectPath.get(Datasource.getDatasources(), `${groupData}.${i}${label}`),
                        backgroundColor: 'rgba(255,255,255,0.0)',
                        borderColor: hex,
                        borderWidth: 2
                    };
                    data_line.push(data);
                }

                data_widget = {
                    isGroupData: true,
                    apiName: state.apiName,
                    datasource: `${groupData}.[]${value}`,
                    fullScreenId: "myChartFull_" + divId,
                    download: true,
                    type: getWigetType(),
                    title_name: getTitleName(),
                    lastUpdate: getDateTimeNow(),
                    timeInterval: getTimeInterval(),
                    datasets: [...data_line],
                };
            }

            return data_widget;
        };

        let getValueTextLine = () => {
            let unit = elements.textLine.find(elements.DOMString.id.unit).val();
            let rgb = elements.valueTextLine.find(elements.DOMString.id.rgb).val();
            let value_datasource = elements.textLine.find(elements.DOMString.class.valueDatasource).val();
            let data_widget = {
                apiName: state.apiName,
                datasource: value_datasource,
                //fullScreenId: "myChartFull_" + divId,
                download: true,
                type: getWigetType(),
                title_name: getTitleName(),
                lastUpdate: getDateTimeNow(),
                timeInterval: getTimeInterval(),
                rgb: rgb,
                unit: unit,
            };
            return data_widget;
        };

        let getValueRader = () => {
            let datasets = [];
            let labels = [];
            let label = [];
            let value_datasource = [];
            let color = [];

            elements.radarLabel.find(elements.DOMString.class.radarLabel).each(function () {
                labels.push($(this).val());
            });

            elements.radarValue.find(elements.DOMString.class.formRadarValue).each(function () {
                datasets.push({});
                label.push($(this).find(elements.DOMString.class.labelRadar).val());

                $(this).find(elements.DOMString.class.valueDatasource).each(function () {
                    value_datasource.push($(this).val());
                });

                $(this).find(elements.DOMString.class.radarColor).each(function () {
                    color.push($(this).val());
                });

            });

            let data_widget = {
                datasets: datasets,
                labels: labels,
                label: label,
                color: color,
                apiName: state.apiName,
                datasource: value_datasource,
                type: getWigetType(),
                title_name: getTitleName(),
                lastUpdate: getDateTimeNow(),
                timeInterval: getTimeInterval(),
                download: true,
            };

            return data_widget;
        };

        let getValueGauges = (divId) => {
            let limitMin = elements.gauges.find(elements.DOMString.id.g_limitMin).val();
            let limitMax = elements.gauges.find(elements.DOMString.id.g_limitMax).val();
            let unit = elements.gauges.find(elements.DOMString.id.unit).val();
            let value_datasource = [elements.gauges.find(elements.DOMString.class.valueDatasource).val()];
            let data_widget = {
                textId: "gauges-text-" + divId,
                apiName: state.apiName,
                datasource: value_datasource,
                fullScreenId: "gaugesFull-" + divId,
                download: true,
                type: getWigetType(),
                title_name: getTitleName(),
                lastUpdate: getDateTimeNow(),
                timeInterval: getTimeInterval(),
                limitMax: limitMax,
                limitMin: limitMin,
                unit: unit,
                opts: {
                    angle: 0, // The span of the gauge arc
                    lineWidth: 0.23, // The line thickness
                    radiusScale: 1, // Relative radius
                    pointer: {
                        length: 0.6, // // Relative to gauge radius
                        strokeWidth: 0.035, // The thickness
                        color: '#000000' // Fill color
                    },
                    limitMax: false, // If false, max value increases automatically if value > maxValue
                    limitMin: false, // If true, the min value of the gauge will be fixed
                    colorStart: '#6FADCF', // Colors
                    colorStop: '#8FC0DA', // just experiment with them
                    strokeColor: '#E0E0E0', // to see which ones work best for you
                    generateGradient: true,
                    highDpiSupport: true, // High resolution support
                    staticLabels: {
                        font: "10px Poppins", // Specifies font
                        labels: [0, Number(limitMax)], // Print labels at these values
                        color: "#000000", // Optional: Label text color
                        fractionDigits: 0 // Optional: Numerical precision. 0=round off.
                    },
                },
            };

            return data_widget;
        };

        let getValueMap = (divId) => {
            let map = null;
            let data_widget = null;
            if (!isGroupDataMap) {
                let datasource = [];
                elements.mapValue.find(elements.DOMString.class.valueOfMap).each(function () {
                    let lat = $(this).find(".latitude").val();
                    let long = $(this).find(".longitude").val();
                    let value = $(this).find(".value-map").val();
                    let label = $(this).find(".label-map").val();

                    datasource.push({
                        latitude: lat,
                        longitude: long,
                        value: value,
                        label: label
                    });
                })

                data_widget = {
                    isGroupData: false,
                    apiName: state.apiName,
                    datasource: datasource,
                    fullScreenId: "mapFull-" + divId,
                    download: false,
                    type: getWigetType(),
                    title_name: getTitleName(),
                    lastUpdate: getDateTimeNow(),
                    timeInterval: getTimeInterval(),
                };
            } else {
                map = $("#map_group_data");
                let groupData = $(".value-group-data:visible").val();
                let start = $("input[name='start']:visible").val();
                let end = $("input[name='end']:visible").val();
                let latitude = $("input[name='latitude']:visible").val();
                let longitude = $("input[name='longitude']:visible").val();
                let value = $("input[name='value_data']:visible").val();
                let label = $("input[name='label_data']:visible").val();
                data_widget = {
                    isGroupData: true,
                    apiName: state.apiName,
                    datasource: {
                        groupData: groupData,
                        latitude: `${groupData}.[]${latitude}`,
                        longitude: `${groupData}.[]${longitude}`,
                        value: `${groupData}.[]${value}`,
                        label: `${groupData}.[]${label}`,
                    },
                    start: start,
                    end: end,
                    fullScreenId: "mapFull-" + divId,
                    download: false,
                    type: getWigetType(),
                    title_name: getTitleName(),
                    lastUpdate: getDateTimeNow(),
                    timeInterval: getTimeInterval(),
                };
            }
            return data_widget;
        };

        let getValueTable = () => {
            let data_widget = {
                apiName: state.apiName,
                download: false,
                type: getWigetType(),
                title_name: getTitleName(),
                lastUpdate: getDateTimeNow(),
                timeInterval: getTimeInterval(),
                table: tableEx.getValue(),
            };
            return data_widget;
        }

        let getTextValue = (divId) => {
            let unit = elements.textValue.find(elements.DOMString.id.unit).val();
            let rgb = elements.textValue.find(elements.DOMString.id.rgb).val();
            let value_datasource = [elements.textValue.find(elements.DOMString.class.valueDatasource).val()];
            let data_widget = {
                apiName: state.apiName,
                datasource: value_datasource,
                fullScreenId: "textValueFull-" + divId,
                download: false,
                type: getWigetType(),
                title_name: getTitleName(),
                lastUpdate: getDateTimeNow(),
                timeInterval: getTimeInterval(),
                unit: unit,
                rgb: rgb
            };

            return data_widget;
        };

        let getValueWigetText = () => {
            let textbox = elements.textBox.find(elements.DOMString.id.inputTextCustom).val();
            let fontsize = elements.textBox.find(elements.DOMString.id.inputFontSize).val();
            let data_widget = {
                type: getWigetType(),
                download: false,
                title_name: null,
                lastUpdate: null,
                timeInterval: null,
                textbox: textbox,
                fontsize: fontsize
            };

            return data_widget;
        };

        let createFormBodyInputWidget = (type) => {

            if (type.search('static') !== -1) {
                isRealTime = false;
            }

            elements.divValueWidget.hide();
            elements.divDefaultValue.show();
            elements.btnAddWidget.show();

            if (type === WIDGET_TYPE.MUTILINE || type === WIDGET_TYPE.MUTILINE_STATIC) {
                elements.mutiLine.show();
            } else if (type === WIDGET_TYPE.TEXTLINE) {
                elements.textLine.show();
            } else if (type === WIDGET_TYPE.RADAR) {
                elements.radar.show();
                radarEx = new RadarEx();
                radarEx.createRadarExample();

                $("#addWidget").on("change", ".radar-labels,.label-radar", function () {
                    radarEx.updateRadarExample();
                });

                $("#btn-add-datasource-radar").unbind().click(function () {
                    $(".remove-radar-labels").prop('disabled', true);
                    $("#btn-add-label-radar").hide();
                    $("#btn-edit-label-radar").show();
                    $(".radar-labels").prop('disabled', true);
                    createFormDatasourceRadar();
                    radarEx.updateRadarExample();

                    $(".remove-datasource-radar").unbind().click(function () {
                        $(this).parent().remove();
                        radarEx.updateRadarExample();
                    });
                });

                $("#btn-edit-label-radar").unbind().click(function () {
                    swal({
                        title: "Are you sure?",
                        text: "When you edit lables datasource will reset",
                        icon: "warning",
                        buttons: true,
                        dangerMode: true,
                    }).then((willDelete) => {
                        if (willDelete) {
                            $("#btn-add-label-radar").show();
                            $("#btn-edit-label-radar").hide();
                            $("#Radar_value").empty();
                            $(".radar-labels").prop('disabled', false);
                            $(".remove-radar-labels").prop('disabled', false);
                            radarEx.updateRadarExample();
                        } else {
                            return;
                        }
                    });
                });
            } else if (type === WIDGET_TYPE.TABLE) {
                elements.table.show();
                tableEx = new TableEx($("#example_table"), {
                    col: {
                        amount: 3,
                    },
                    row: {
                        amount: 3
                    }
                })

                tableEx.createTableEx();

                $("#btn_add_col").unbind().click(function () {
                    tableEx.addCol();
                    $(".select-datasource").change();
                });

                $("#btn_remove_col").unbind().click(function () {
                    tableEx.removeCol();
                });

                $("#btn_add_row").unbind().click(function () {
                    tableEx.addRow();
                    $(".select-datasource").change();
                });


                $("#btn_remove_row").unbind().click(function () {
                    tableEx.removeRow();
                });

            } else if (type === WIDGET_TYPE.GAUGES) {
                elements.gauges.show();
            } else if (type === WIDGET_TYPE.TEXTVALUE) {
                elements.textValue.show();
            } else if (type === WIDGET_TYPE.TEXTBOX) {
                elements.textBox.show();
                elements.divDefaultValue.hide();

            } else if (type === WIDGET_TYPE.MAP) {
                $("#map").show();
            } else {
                $("#add-new-widget").hide();
                $("#default_value").hide();
                $("#form-input-widget").html("");
            }
        };

        let createFormDatasourceRadar = () => {
            if ($(".form-radar-value:visible").length == 0) {
                let layout_radar_value = $("#layout-radar-value").html();
                let layout_add_value_radar = $("#layout-add-value-radar").html();
                $("#Radar_value").append(layout_radar_value);
                $(".radar-labels:visible").each(function () {
                    let html = layout_add_value_radar.replace('((value-radar))', $(this).val());
                    $(".add-value-radar:visible").append(html);
                });
            } else {
                let form_rader_value = $("#Radar_value .form-radar-value").html();
                $("#Radar_value").append(`<div class="form-radar-value">${form_rader_value}</div>`);
            }
        };


        let onAddWidgetClick = () => {
            let type = getWigetType();
            let obj_widget = null;
            let widget = null;
            if (type === WIDGET_TYPE.MUTILINE || type === WIDGET_TYPE.MUTILINE_STATIC) {
                widget = getValueMutiLine();
                obj_widget = new MutiLine(Object.assign({}, widget));
                obj_widget.createWidget();
                obj_widget.createMutiLine();
            } else if (type === WIDGET_TYPE.TEXTLINE) {
                widget = getValueTextLine();
                obj_widget = new ChartTextLine(widget);
                obj_widget.createWidget();
                obj_widget.createTextLine();
            } else if (type === WIDGET_TYPE.RADAR) {
                widget = getValueRader();
                obj_widget = new Radar(widget);
                obj_widget.createWidget();
                obj_widget.createRadar();
            } else if (type === WIDGET_TYPE.GAUGES) {
                widget = getValueGauges();
                obj_widget = new Gauges(widget);
                obj_widget.createWidget();
                obj_widget.createGages();
            } else if (type === WIDGET_TYPE.MAP) {
                widget = getValueMap();
                obj_widget = new Map(widget);
                obj_widget.createWidget();
                obj_widget.createMap();
            } else if (type === WIDGET_TYPE.TABLE) {
                widget = getValueTable();
                obj_widget = new Table(widget);
                obj_widget.createWidget();
                obj_widget.createTable();
            } else if (type === WIDGET_TYPE.TEXTVALUE) {
                widget = getTextValue();
                obj_widget = new TextValue(widget);
                obj_widget.createWidget();
                obj_widget.createTextValue();
            } else if (type === WIDGET_TYPE.TEXTBOX) {
                widget = getValueWigetText();
                obj_widget = new TextBox(widget);
                obj_widget.createWidget();
                obj_widget.createTextBox();

            }
            widgetList.push(obj_widget);

        };

        let saveGrid = () => {
            let serializedData = _.map($('.grid-stack > .grid-stack-item:visible'), function (el) {
                el = $(el);
                let node = el.data('_gridstack_node');
                //var widget = el.data('_gridstack_data');
                let wi = Dashboard.getWidgetById(node.id);
                return {
                    x: node.x,
                    y: node.y,
                    width: node.width,
                    height: node.height,
                    widget: Widget.formateDataSave(wi)
                };
            });

            $.ajax({
                url: END_POINT + API.saveGrid,
                method: "PUT",
                data: {
                    static_id: $("#static_id").html(),
                    dashboard: JSON.stringify(serializedData, null, ''),
                },
                success: (res) => {
                    console.log(res);
                },
                error: (res) => {
                    console.log(res);
                }
            });
            //console.log(JSON.stringify(serializedData, null, '        '))
            //setStorage("dashboard", serializedData);
            // $('#saved-data').val(JSON.stringify(serializedData, null, '        '));
        };

        let bindElement = () => {

            sliderTime = document.getElementById('sliderTime');

            noUiSlider.create(sliderTime, {
                start: [0, 1440],
                connect: true,
                // direction: 'rtl',
                behaviour: 'tap-drag',
                step: 10,
                tooltips: [true, true],
                range: {
                    'min': 0,
                    'max': 1440
                },
                format: wNumb({
                    decimals: 2,
                    mark: ":",
                    encoder: function (a) {
                        return aproximateHour(a);
                    }
                }),
                // pips: {
                //     mode: 'steps',
                //     format: wNumb({
                //         mark: ":",
                //         decimals: 2,
                //         encoder: function (a) {
                //             return aproximateHour(a);
                //         }
                //     }),
                //     filter: filter_hour,
                //     stepped: true,
                //     density: 1
                // }
            });

            //alert(sliderTime.noUiSlider.get());

            // sliderTime.noUiSlider.on('update', function (values, handle) {
            //     getValueTimeSeries();
            // });

            // elements.staticDate.change(function () {
            //     let time = sliderTime.noUiSlider.get();
            //     if (time) {
            //         getValueTimeSeries();
            //     }
            //     return;
            // });

            elements.btnSettingWidget.unbind().click(function () {
                clearInterval(time);
                $(this).hide();
                $(".btn-time-series").hide();
                $(".edit-widget").show();
                elements.btnAdd.show();
                elements.btnSaveWidget.show();
                elements.btnCancelWidget.show();
                grid.enableMove(true);
                grid.enableResize(true);
            });

            elements.selectWidgetType.change(function () {
                createFormBodyInputWidget(getWigetType());
            });

            elements.btnAdd.unbind().click(function () {
                //$("input[type=text]").val("");
                $("select").val('');
                $("#addWidget").modal('show');
                $(".value-widget").hide();
                $("#add-new-widget").hide();
                elements.divDefaultValue.hide();
            });

            elements.btnAddWidget.unbind().click(function () {
                onAddWidgetClick();
            });

            elements.btnSaveWidget.unbind().click(function () {
                elements.btnSaveWidget.hide();
                elements.btnAdd.hide();
                elements.btnCancelWidget.hide();
                elements.btnSettingWidget.show();
                $(".edit-widget").hide();
                $(".btn-time-series").show();
                updateDatalast();
                saveGrid();
                grid.enableMove(false);
                grid.enableResize(false);
            });

            elements.btnCancelWidget.unbind().click(function () {
                elements.btnSaveWidget.hide();
                elements.btnAdd.hide();

                $(".edit-widget").hide();
                $("#cancelW").hide();
                $("#settingW").show();
                $(".btn-time-series").show();
                updateDatalast();
                grid.enableMove(false);
                grid.enableResize(false);
            });

            $("#btn-detail-toggle").unbind().click(function () {
                $("#top-header").slideToggle("fast");
                $(this).toggleClass('flip');
            });

            $('#addWidget .modal-body').on('click', '.remove-value', function () {
                $(this).parent().parent().remove();
            });

            $('#addWidget').unbind().on('click', '#btn-add-label-radar', function () {
                $("#Radar_label").append(`  <div class="input-group">
                                                <input type="text" class="form-control radar-labels mt-2" value="">
                                                <div class="input-group-append">
                                                    <button class="btn btn-danger mt-2  remove-radar-labels" type="button"><i class="fas fa-times"></i></button>
                                                </div>
                                            </div>`);
                radarEx.updateRadarExample();
            });

            $("#Radar_value").on('change', '.radar-color', function () {
                radarEx.updateRadarExample();
            });

            $('#Radar_label').unbind().on('click', '.remove-radar-labels', function () {
                $(this).parent().parent().remove();
                radarEx.updateRadarExample();
            });

            $("input[name='isGroupDataMutiLine']").change(function () {
                isGroupDataMutiLine = $(this).val();
                if (isGroupDataMutiLine == 1) {
                    isGroupDataMutiLine = true;
                    $("#Mutiline_value").hide();
                    $("#Mutiline_group_data").show();
                    return;
                }
                isGroupDataMutiLine = false;
                $("#Mutiline_value").show();
                $("#Mutiline_group_data").hide();
            })

            $("input[name='isGroupDataMap']").change(function () {
                isGroupDataMap = $(this).val();
                if (isGroupDataMap == 1) {
                    isGroupDataMap = true;
                    $("#map_value").hide();
                    $("#map_group_data").show();
                    return;
                }
                isGroupDataMap = false;
                $("#map_value").show();
                $("#map_group_data").hide();
            })

        };

        let updateDatalast = async () => {
            time = setInterval(() => {
                // && state.loadingApi
                if (widgetList.length > 0 && state.loadingApi) {
                    updateData([...widgetList]);
                }
            }, 1000);
        };

        let updateData = (widgets) => {
            for (var i = 0; i < widgets.length; i++) {
                let widget = widgets[i];
                if (widget.updateData) {
                    if (Dashboard.diffTime(widget.lastUpdate, widget.timeInterval) >= widget.timeInterval || state.firstTime) {
                        if (!widget.firstLoadData) {
                            widget.updateData();
                        } else {
                            widget.updateFirstData();
                        }

                    } else if (widget.liveData) {
                        widget.liveData();
                    }
                }
            }
            state.firstTime = false;
            clearInterval(time);
        };

        let createDashboardInit = async (dashboard) => {
            let obj_widget = null;
            let widgets = null;
            let gridData = null;
            let type = "";
            dashboard.map((data, key) => {
                obj_widget = null;
                widgets = data.widget;
                gridData = data;
                type = widgets.type;
                widgets.lastUpdate = getDateTimeNow();
                if (type === WIDGET_TYPE.MUTILINE || type === WIDGET_TYPE.MUTILINE_STATIC) {
                    obj_widget = new MutiLine(widgets);
                    obj_widget.createWidget(gridData);
                    obj_widget.createMutiLine();
                } else if (type === WIDGET_TYPE.GAUGES) {
                    obj_widget = new Gauges(widgets);
                    obj_widget.createWidget(gridData);
                    obj_widget.createGages();
                } else if (type === WIDGET_TYPE.RADAR) {
                    obj_widget = new Radar(widgets);
                    obj_widget.createWidget(gridData);
                    obj_widget.createRadar();
                } else if (type === WIDGET_TYPE.TEXTLINE) {
                    obj_widget = new ChartTextLine(widgets);
                    obj_widget.createWidget(gridData);
                    obj_widget.createTextLine();
                } else if (type === WIDGET_TYPE.MAP) {
                    obj_widget = new Map(widgets);
                    obj_widget.createWidget(gridData);
                    obj_widget.createMap();
                } else if (type === WIDGET_TYPE.TABLE) {
                    obj_widget = new Table(widgets);
                    obj_widget.createWidget(gridData);
                    obj_widget.createTable();
                } else if (type === WIDGET_TYPE.TEXTVALUE) {
                    obj_widget = new TextValue(widgets);
                    obj_widget.createWidget(gridData);
                    obj_widget.createTextValue();
                } else if (type === WIDGET_TYPE.TEXTBOX) {
                    obj_widget = new TextBox(widgets);
                    obj_widget.createWidget(gridData);
                    obj_widget.createTextBox();
                }
                widgetList.push(obj_widget);
            })

            $(".edit-widget").hide();
        };

        this.initDashboard = async () => {
            Datasource = new Datasources();

            let dashboard = "";
            // set widget $.ajax
            await Datasource.initCreate();

            await $.ajax({
                url: END_POINT + API.getStatic + $("#static_id").html(),
                method: 'GET',
                success: (res) => {
                    if (res.data) {
                        dashboard = GridStackUI.Utils.sort(JSON.parse(res.data[0].dashboard));
                    }
                },
                error: (res) => {
                    console.log(res);
                }
            });

            await createDashboardInit(dashboard);

            $(".grid-stack").gridstack(options);
            grid = $(".grid-stack").data("gridstack");
            grid.enableMove(false);
            grid.enableResize(false);

            await updateDatalast();

            $("#loading").remove();

            bindElement();
        };
    }

    static diffTime(lastUpdate, timeInterval = 0) {
        //console.log(lastUpdate);
        let current = new Date();
        let _lastUpdate = new Date(lastUpdate);

        let diff = (current.getTime() - _lastUpdate.getTime()) / 1000;
        //หน่วยวินาที
        // diff /= 60;

        return Math.abs(Math.round(diff));
    }

    static updateGridData(id) {

    }

    static getWidgetById(itemId) {
        return widgetList.find(widget => {
            return widget.itemId == itemId;
        });
    }
}

$(document).ready(function () {
    $("#sidebarCollapse").click();
    let dashboard = new Dashboard();
    dashboard.initDashboard();

    $('.grid-stack').on('gsresizestop', function (event, elem) {
        let el = $(elem);
        let data_widget = JSON.parse(el.data('_gridstack_data'));
        let node = el.data('_gridstack_node');
        let type = data_widget.type;
        if (type === "Gauges") {} else if (type === "MutiLine") {
            let element = event.target;
            let width = el.find('.card-body').width();
            let height = el.find('.card-body').height();
            let panel = el.find('.card-body');
            let id = $(panel).find('canvas');

            // var canvas = document.getElementById($(id).attr('id'));
            // canvas.toBlob(function (blob) {
            //     saveAs(blob, "pretty image.png");
            // });
        } else if (type === "Map") {
            let map = Dashboard.getWidgetById(node.id);
            map.myMap.invalidateSize();
        }
    });
});
