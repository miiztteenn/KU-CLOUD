import {
    LOADING,
    getFlatObject,
    checkAuthRes,
    addEventValidate,
    resetInputValidate,
    checkError,
} from '../../utility';
import {
    Object
} from 'core-js';


const API = {
    getDatasource: 'datasources',
    getDataById: 'analysis/data/',
    getAll: 'analysis/data',
    create: 'analysis/data',
    delete: 'analysis/data',
    uploadData: "analysis/data/upload",
}

let state = {
    lengthDataKey: 0,
    typeTime: "Day",
}

validate.validators.presence.message = "is required";

const validateInput = {
    create: {
        parent: "#addDataAnalysis",
        validate: {
            name: {
                presence: {
                    allowEmpty: false,
                },
            },
            datasource: {
                presence: {
                    allowEmpty: false,
                },
            },

        }
    },
    day:{
        parent: "#typeDay",
        validate: {
            date: {
                presence: {
                    allowEmpty: false,
                },
            }
        }
    },
    month: {
        parent: "#typeMonth",
        validate: {
            start_month: {
                presence: {
                    allowEmpty: false,
                },
            },
            end_month: {
                presence: {
                    allowEmpty: false,
                },
            }
        }
    },
    year:{
        parent: "#typeYear",
        validate: {
            year: {
                presence: {
                    allowEmpty: false,
                },
            },
        }
    }
}

class DataAnalysis {
    constructor() {
        let elDataTable = null;
        let dataList = null;
        let modalLookup = null;
        let modalEdit = null;
        let modalDelete = null;

        let listDatasource = null;

        let listValue = null;
        let data = null;
        let dataTable = null;

        let self = this;


        let bindElement = () => {
            addEventValidate(validateInput.create);
            addEventValidate(validateInput.day);
            addEventValidate(validateInput.month);
            addEventValidate(validateInput.year);

            $("input[name='typeTime']").change(function () {
                $(".typeTime").hide();
                state.typeTime = $(this).val().replace('type', '');
                $(`#${$(this).val()}`).show();
            });

            $("#btn_add").unbind().click(function () {
                $("#addDataAnalysis").modal('show');
            });

            $("#btn_upload_file").unbind().click(function () {
                $("#uploadFile").modal('show');
            });

            $("#btn_save").unbind().click(function () {
                resetInputValidate();
                addDataAnalysis();
            });

            $("#btn_show_values").unbind().click(function () {
                showValues();
            });

            $("#refreshData").unbind().click(function () {
                self.showLastestDatatable();
            });

            $("#btn_submit_upload").unbind().click(function () {
                $("#form_upload").submit();
            });

            $("#form_upload").on('submit', (function (e) {
                e.preventDefault();
                LOADING.set($("#btn_submit_upload"));
                $.ajax({
                    url: END_POINT + API.uploadData,
                    method: "POST",
                    data: new FormData(this),
                    contentType: false,
                    cache: false,
                    processData: false,
                    success: function (data, textStatus, xhr) {
                        checkAuthRes(xhr)
                        LOADING.reset($("#btn_submit_upload"));
                        $("#uploadFile").modal('hide');
                        self.showLastestDatatable();
                    },
                    error: function (e) {
                        console.log(e);
                    }
                });
            }));
        };

        let updateListDatasource = () => {
            $("#datasource").empty();
            let html = "";
            let opt = "<option value=''>--Select datasource--</option>";
            opt += `<optgroup label="Web services">`

            listDatasource.webservices.map(async (data, index) => {

                opt += `<option value='${data.webservice_id}'>${data.service_name}</option>`;
            });

            opt += `</optgroup>`
            opt += `<optgroup label="IoT services">`

            listDatasource.iot.map(async (data, index) => {
                opt += `<option value='${data.iotservice_id}'>${data.iot_name}</option>`;
            });
            opt += `</optgroup>`

            $("#datasource").html(opt);
        }

        let getDwname = (type, service_id) => {
            let data = null;
            if (type == "web_services") {
                data = listDatasource.webservices.filter(_data => {
                    return _data.webservice_id == service_id
                });
            } else {
                data = listDatasource.iot.filter(_data => {
                    return _data.iotservice_id == service_id
                });
            }

            if (data) {
                return data[0];
            }
            return null;
        }

        let getDatasource = () => {
            $.ajax({
                url: END_POINT + API.getDatasource,
                method: 'GET',
                headers: {
                    authorization: 'bearer ' + getCookie('token'),
                },
                data: {
                    dashboard_id: $("#static_id").html(),
                },
                success: async (res, textStatus, xhr) => {
                    checkAuthRes(xhr)
                    listDatasource = res.data;
                    console.log(listDatasource);
                    updateListDatasource();
                },
                error: (res) => {
                    console.log(res);
                }
            });
        };

        let createListValue = () => {
            let pathObject = getFlatObject(listValue[0]);
            let key = Object.keys(pathObject);
            let html = "";

            state.lengthDataKey = key.length;

            key.map(_key => {

                html += `   
                        <tr>
                            <td class="checkbox">
                                <div class="custom-control custom-checkbox mb-3">
                                    <input type="checkbox" class="custom-control-input" value="${_key}" id="id${_key}" name="value_key" checked>
                                    <label class="custom-control-label" for="id${_key}"></label>
                                </div>
                            </td>
                            <td>${_key}</td>
                            <td>${pathObject[_key]}</td>
                        </tr>
                        `;
            })

            $("#tbody_values").html(html);

            $("#list_value").show();

            $("#checkAll").unbind().click(function () {
                let checked = $(this).prop('checked');
                $('input[name="value_key"]').each(function () {
                    if (checked) {
                        $(this).prop('checked', true);
                    } else {
                        $(this).prop('checked', false);
                    }
                });
            });

            $('input[name="value_key"]').unbind().click(function () {
                let checkedCount = 0;
                $('input[name="value_key"]').each(function () {
                    if ($(this).prop('checked')) {
                        checkedCount++;
                    }
                });

                if (checkedCount === state.lengthDataKey) {
                    $("#checkAll").prop('checked', true);
                } else {
                    $("#checkAll").prop('checked', false);
                }

            });
        }

        let showValues = () => {
            getLabelSelectGroup();
            let datasource = getDwname(state.selectedTypeDatasource, $("#datasource").val());
            let url = "";
            let param = {};
            if (state.selectedTypeDatasource === "web_services") {
                url = `/js/company/testConvert.json`;
            } else {
                url = `${API_DW}iotService/getInputIoTData`;
                param['tableDW_name'] = datasource.iot_name_DW
            }
            $("#list_value").hide();
            $("#addDataAnalysis .lds-roller ").show();
            $.ajax({
                url: url,
                data: param,
                method: 'POST',
                success: (res, textStatus, xhr) => {
                    checkAuthRes(xhr);
                    listValue = res;
                    createListValue();
                    $("#addDataAnalysis .lds-roller ").hide();
                },
                error: (res) => {
                    $("#addDataAnalysis .lds-roller ").hide();
                    console.log(res);
                }

            })
        };

        let getLabelSelectGroup = () => {
            let selected = $("#datasource").find(":selected");
            state.selectedTypeDatasource = selected.closest('optgroup').attr('label').toLowerCase().replace(' ', '_');
        }

        let addDataAnalysis = () => {
            if(checkError(validateInput.create)){
                if(state.typeTime === "Day"){
                    checkError(validateInput.day)
                }
                else if(state.typeTime === "Month"){
                    checkError(validateInput.month)
                }
                else if(state.typeTime === "Year"){
                    checkError(validateInput.year)
                }
                return;
            }
               
            getLabelSelectGroup();
            LOADING.set($("#btn_save"));
            let data_name = $("#data_name").val();
            let service_id = $("#datasource").val();
            let datasource = getDwname(state.selectedTypeDatasource, service_id);

            let pathObject = [];
            $.each($("input[name='value_key']:checked"), function () {
                pathObject.push($(this).val());
            });
            let param = {
                service_id: service_id,
                pathArray: pathObject,
                name: data_name,
                type: state.selectedTypeDatasource,
                period : {},
            };

            if (state.selectedTypeDatasource == "web_services") {
                param['tableDW_name'] = '';
            } else {
                param['tableDW_name'] = datasource.iot_name_DW;
            }
            
            param.period['type'] = state.typeTime.toLowerCase();
            if(state.typeTime === "Day"){
                param.period['start_date'] = moment(new Date($("#date").val())).startOf('day').format('YYYY-MM-DD HH:mm:ss');
                param.period['end_date'] = moment(new Date($("#date").val())).endOf('day').format('YYYY-MM-DD HH:mm:ss');
            }
            else if(state.typeTime === "Month"){
                param.period['start_date'] = moment(new Date($("#start_month").val())).startOf('months').format('YYYY-MM-DD HH:mm:ss');
                param.period['end_date'] = moment(new Date($("#end_month").val())).endOf('months').format('YYYY-MM-DD HH:mm:ss');
            }
            else if(state.typeTime === "Year"){
                param.period['start_date'] = moment(new Date($("#year").val())).startOf('year').format('YYYY-MM-DD HH:mm:ss');
                param.period['end_date'] = moment(new Date($("#year").val())).endOf('year').format('YYYY-MM-DD HH:mm:ss');
            }

            $.ajax({
                url: END_POINT + API.create,
                method: 'POST',
                data: param,
                success: (res, textStatus, xhr) => {
                    checkAuthRes(xhr)
                    $("#addDataAnalysis").modal('hide');
                    LOADING.reset($("#btn_save"));
                    this.showLastestDatatable();
                },
                error: (res) => {
                    console.log(res);
                    LOADING.reset($("#btn_save"));
                }
            });
        };

        let updateDatatableData = () => {
            let Datatable = [];
            elDataTable.fnClearTable();

            dataList.map((item, index) => {
                // <button type="button" class="btn btn-success btn-sm btn-edit" index=${index}  data-toggle="tooltip"
                //     data-placement="top" title="Edit">
                //     <i class="fas fa-edit"></i>
                // </button>
                let ret = [];
                ret[0] = item.name;
                ret[1] = item.fname + ' ' + item.lname;
                ret[2] = item.is_success ? `<div style="color:#00ce68"><i class="fas fa-check-circle"></i> Finished </div>` : `<div style="color:#ffaf00"><i class="fas fa-cog fa-spin"></i> Processing </div>`;
                ret[3] = `<center>
                            <button type="button" class="btn btn-primary btn-sm btn-lookup" index=${index} data-toggle="tooltip"
                                data-placement="top" title="Look">
                                <i class="far fa-eye"></i>
                            </button>
                            <a href="${END_POINT}analysis/download/${item.path_file_csv}"><button type="button" class="btn btn-success btn-sm btn-download-csv" index=${index} data-toggle="tooltip"
                                data-placement="top" title="Download CSV">
                                <i class="fas fa-table"></i>
                            </button></a>
                            <a href="${END_POINT}analysis/download/${item.path_file}"><button type="button" class="btn btn-info btn-sm btn-download-arff" index=${index} data-toggle="tooltip"
                            data-placement="top" title="Download arff">
                            <i class="fas fa-crow"></i>
                            </button></a>
                            <button type="button" class="btn btn-danger btn-sm btn-delete" index=${index}  data-toggle="tooltip"
                                data-placement="top" title="Delete">
                                <i class="fas fa-trash-alt"></i>
                            </button>
                          </center>`;
                Datatable.push(ret);
            });

            if (Datatable.length > 0)
                elDataTable.fnAddData(Datatable);

            $(".btn-lookup").unbind().click(function () {
                onBtnLookupClick($(this).attr('index'));
            });


            $(".btn-delete").unbind().click(function () {
                onBtnDeleteClick($(this).attr('index'));
            });

            $('[data-toggle="tooltip"]').tooltip();
        };

        let onBtnLookupClick = (key) => {
            if (modalLookup === null) {
                modalLookup = `
            <div class="modal fade" id="modal_lookup">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h4 class="modal-title" id="title_data"></h4>
                            <button type="button" class="close" data-dismiss="modal">&times;</button>
                        </div>

                        <div class="modal-body" >
                            <div class="lds-roller text-center" style="display:none">
                                <div></div>
                                <div></div>
                                <div></div>
                                <div></div>
                                <div></div>
                                <div></div>
                                <div></div>
                                <div></div>
                           </div>
                           <div class="table-responsive bg-white" style="padding:10px">
                            <table id="dataTable" class="table table-bordered table-striped">
                                    <thead></thead>
                                    <tbody></tbody>
                            </table>
                           </div>
                        </div>

                        <div class="modal-footer">
                           
                        </div>
                    </div>
                </div>
            </div>`;

                $('body').append(modalLookup);
            }
            $("#title_data").html(`Data : ${dataList[key].name}`);
            $("#modal_lookup").modal('show');
            getDataById(dataList[key].data_id);
        };

        let getDataById = (data_id) => {
            $("#modal_lookup").find('.lds-roller').show();
            if (dataTable != null) {
                $('#dataTable').dataTable().fnDestroy();
            }
            dataTable = $("#dataTable");
            dataTable.parent().hide();
            let thead = dataTable.find('thead');
            thead.empty();
            let tbody = dataTable.find('tbody');
            tbody.empty();
            $.ajax({
                url: END_POINT + `${API.getDataById}${data_id}`,
                method: "GET",
                success: (res, textStatus, xhr) => {
                    checkAuthRes(xhr)
                    dataTable.parent().show();
                    $("#modal_lookup").find('.lds-roller').hide();
                    data = res.data;
                    if (data.data.data.length < 2000) {
                        createTableData();
                    } else {
                        alert('download');
                    }
                },
                error: (res) => {
                    console.log(res);
                }
            })
        }

        let createTableData = () => {
            dataTable = $("#dataTable");
            let thead = dataTable.find('thead');
            thead.empty();
            let tbody = dataTable.find('tbody');
            tbody.empty();
            thead.append('<tr></tr>');
            let tr = thead.find('tr:last');
            tr.append(`<th>#</th>`);
            data.data.header.attributes.map(_data => {
                tr.append(`<th>${_data.name}</th>`);
            });

            data.data.data.map((_data, index) => {
                tbody.append('<tr></tr>');
                let tr = tbody.find('tr:last');
                tr.append(`<td>${index+1}</td>`);
                _data.values.map(_value => {
                    tr.append(`<td>${_value}</td>`);
                })
            });

            dataTable = $('#dataTable').dataTable({});
        }

        let onBtnEditClick = (key) => {
            if (modalEdit === null) {
                modalEdit = `
                <div class="modal fade" id="editStatic">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h4 class="modal-title">Edit Static</h4>
                                <button type="button" class="close" data-dismiss="modal">&times;</button>
                            </div>

                            <div class="modal-body">
                                <div class="row">
                                    <div class="col-12">
                                        <label>Name</label>
                                        <input type="text" class="form-control" id="edit_static_name">
                                    </div>
                                </div>
                            </div>

                            <div class="modal-footer">
                                <button type="button" id="btn-edit-submit" class="btn btn-success btn-block" data-loading-text="<i class='fas fa-circle-notch fa-spin'></i> Saving . . .">Save</button>
                            </div>
                        </div>
                    </div>
                </div>`;

                $('body').append(modalEdit);
            }

            $("#btn-edit-submit").unbind().click(function () {
                onBtnSubmitEditClick(key);
            });



            $("#edit_static_name").val(dataList[key].name);
            $("#editStatic").modal('show');
        };

        let onBtnSubmitEditClick = (key) => {
            LOADING.set($("#btn-edit-submit"));
            $.ajax({
                url: END_POINT + 'company/static',
                method: 'PUT',
                data: {
                    static_id: dataList[key].static_id,
                    name: $("#edit_static_name").val(),
                },
                success: (res) => {
                    $("#editStatic").modal('hide');
                    LOADING.reset($("#btn-edit-submit"));
                    this.showLastestDatatable();
                },
                error: (res) => {
                    LOADING.reset($("#btn-edit-submit"));
                    console.log(res);
                }
            });
        };

        let onBtnDeleteClick = (key) => {
            if (modalDelete === null) {
                modalDelete = `
                <div class="modal fade" id="deleteStatic">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h4 class="modal-title">Delete Static</h4>
                                <button type="button" class="close" data-dismiss="modal">&times;</button>
                            </div>

                            <div class="modal-body">
                                <div class="row">
                                    <div class="col-12">
                                        Are you sure to delete data name : <span id="delete-data-name"></span> ?
                                    </div>
                                </div>
                            </div>

                            <div class="modal-footer">
                                <button type="button" id="btn_submit_delete" class="btn btn-danger btn-block" data-loading-text="<i class='fas fa-circle-notch fa-spin'></i> Saving . . .">Delete</button>
                            </div>
                        </div>
                    </div>
                </div>`;

                $('body').append(modalDelete);
            }

            $("#btn_submit_delete").unbind().click(function () {
                onBtnSubmitDeleteClick(key);
            });

            $("#delete-data-name").html(dataList[key].name);

            $("#deleteStatic").modal('show');
        };

        let onBtnSubmitDeleteClick = (key) => {
            LOADING.set($("#btn_submit_delete"));
            $.ajax({
                url: END_POINT + API.delete,
                method: "DELETE",
                data: {
                    data_id: dataList[key].data_id,
                },
                success: (res, textStatus, xhr) => {
                    checkAuthRes(xhr);
                    LOADING.reset($("#btn_submit_delete"));
                    $("#deleteStatic").modal('hide');
                    this.showLastestDatatable();
                },
                error: (res) => {
                    LOADING.reset($("#btn_submit_delete"));
                    console.log(res);
                }

            });
        };

        let initialDatatable = () => {
            if (elDataTable !== null) {
                return false;
            }
            elDataTable = $('#example').dataTable({});
        };

        let showDatatableLoadingStatus = (showOrHide) => {
            if (showOrHide) {
                $(".dataTables_wrapper").hide();
                $('#example').hide();
                $('.lds-roller').show();
            } else {
                $(".dataTables_wrapper").show();
                $('.lds-roller').hide();
                $('.text-loading').hide();
                $('#example').show();
                $('.text-static').show();
            }
        };

        this.initialAndRun = () => {
            bindElement();
            initialDatatable();
            getDatasource();
            this.showLastestDatatable();
        };

        this.showLastestDatatable = () => {
            showDatatableLoadingStatus(true);
            $.ajax({
                url: END_POINT + API.getAll,
                success: (res, textStatus, xhr) => {
                    checkAuthRes(xhr)
                    console.log(res);
                    showDatatableLoadingStatus(false);
                    dataList = res.data;
                    updateDatatableData();
                },
                error: (res) => {
                    showDatatableLoadingStatus(false);
                }
            });
        };
    }
}

$(document).ready(function () {
    let et = new DataAnalysis();
    et.initialAndRun();
    $('[data-toggle="tooltip"]').tooltip();
});
