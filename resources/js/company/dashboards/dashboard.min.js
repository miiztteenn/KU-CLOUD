import {
    deepCopy,
    convertHex,
    randomHexColor,
    aproximateHour,
    filter_hour,
    diff_hours,
    getRndInteger,
    checkAuthRes,
    getFlatObject,
    getFlatObjectV2,
    addEventValidate,
    resetInputValidate,
    checkError,
} from '../../utility.js';


//import Calculation from '../../lib/Calculation.min';

validate.validators.presence.message = "is required";

import axios from 'axios';

import {
    json2excel
} from 'js2excel'

import FileSaver from 'file-saver';

// import {} from 'leaflet-easyprint';

import TableEx from '../../lib/TableEx.min.js';
import objectPath from 'object-path';

import {
    validateInput
} from './validateFormDashboards.min';

import {
    elements
} from './viewBase.min.js'
import {
    isBuffer
} from 'util';

let USER_ID = getStorage("socket_token");
let socket_dashboards = null;

import chart from 'chartjs-plugin-zoom';
//import ChartRealtime from 'chartjs-plugin-streaming';
Chart.defaults.global.defaultFontFamily = "'Poppins', 'Kanit', 'sans-serif'";


const API = {
    getStatic: "dashboards/",
    getWebServices: "company/webservices",
    getDatasource: "datasources",
    getDatasourcesCustomer : "datasources/customer",
    addDatasource: "datasources",
    deleteDatasource: "datasources",
    saveGrid: "static/dashboard",
}

let Datasource = null;

const REG = /([a-zA-Z0-9_]+)/g;



const WIDGET_TYPE = {
    BAR: 'Bar',
    MUTILINE: 'MutiLine',
    MUTILINE_STATIC: 'MutiLine_static',
    TEXTLINE: 'TextLine',
    RADAR: 'Radar',
    RADAR_STATIC: 'Radar_static',
    GAUGES: 'Gauges',
    MAP: 'Map',
    MAP_STATIC: 'Map_static',
    TEXTVALUE: 'TextValue',
    TABLE: 'Table',
    TABLE_STATIC: 'Table_static',
    TEXTBOX: 'TextBox',
};

let PERIOD = {
    TODAY: 'Today',
    YESTERDAY: 'Yesterday',
    CURRENT_WEEK: 'Current Week',
    WEEK_1: '1 Week',
    WEEK_2: '2 Week',
    WEEK_4: '4 Week',
    CURRENT_MONTH: 'Current Month',
    LAST_MONTH: 'Last Month',
    MONTH_3: '3 Month',
    MONTH_6: '6 Month',
    MONTH_12: '12 Month',
    CUSTOM: 'Custom'
}


let radarEx = null;

let state = {
    loadingApi: false,
    firstTime: true,
    firstLoadData: true,
    value_datasource_input: 0,
    allDatasource: {
        web_services: [],
        iot_services: [],
    },
    editModalIdSelect: null,
    dashboard: null,
    radarLabelCount: 4,
    radarLabelEditCount: 0,
    Calculation: null,
}

//state.Calculation = new Calculation();

class ModalEditWidget {
    constructor(widget) {
        this.widget = widget;

        let self = this;

        let ModalEditWidget = null;



        this.createModalEdit = (inputHtml, bindElement) => {
            state.editModalIdSelect = $(`#${this.widget.editModalId}`);
            if (!state.editModalIdSelect.length) {

                ModalEditWidget = `<div class="modal" id="${this.widget.editModalId}" class="editWidget">
                                        <div class="modal-dialog modal-lg">
                                            <div class="modal-content">
                                                <div class="modal-header">
                                                    <h5 class="modal-title">Edit Widget</h5>
                                                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                                                </div>

                                                <div class="modal-body" id="form-edit-widget">     
                                                </div>

                                                <div class="modal-footer">
                                                    <button type="button" id="btn-submit-edit-widget" class="btn btn-success btn-block">Save</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>`;

                $('body').append(ModalEditWidget);

                state.editModalIdSelect.unbind().on('click', 'button.close', function () {
                    state.editModalIdSelect.find('#form-edit-widget').empty();
                })
            }

            state.editModalIdSelect = $(`#${this.widget.editModalId}`);

            state.editModalIdSelect.find("#form-edit-widget").html(inputHtml);

            let i = 0;

            state.editModalIdSelect.find(".select-datasource").each(function () {
                if (self.widget.datasources[i].type == "web_services") {
                    $(this).find(`optgroup[label='Web services'] option[value='${self.widget.datasources[i].id}']`).prop('selected', true);
                } else if (self.widget.datasources[i].type == "iot_services") {
                    $(this).find(`optgroup[label='IoT services'] option[value='${self.widget.datasources[i].id}']`).prop('selected', true);
                }

                Datasource.setEventEl($(this), self.widget);
                i++;
            });



            state.editModalIdSelect.modal({
                backdrop: 'static',
                keyboard: false
            });
            state.editModalIdSelect.modal('show');
        };

        this.submitEditClick = (func) => {
            state.editModalIdSelect.find("#btn-submit-edit-widget").unbind().click(function () {
                func();
            });
        };

        this.closeModalEdit = () => {
            state.editModalIdSelect.find('#form-edit-widget').empty();
            state.editModalIdSelect.modal('hide');
        };

        this.findTitleWidget = () => {
            let el = $("#" + this.widget.itemId).find('.title-widget');
            return el;
        };
    }
}

class ModalEditWidgetMutiLine extends ModalEditWidget {
    constructor(widget) {
        super(widget);
        let datasourceInput = ` 
                                <div class="row">
                                    <div class="col-3">
                                        <label for="">Datasource <span class="text-danger">*</span></label>
                                        ${$("#layout_datasource").html()}
                                    </div>
                                    <div class="col-3">
                                        <label for="">Value <span class="text-danger">*</span></label>
                                        <input class="form-control value-datasource" value="{{value-datasource}}">
                                        <ul class="list-group data-list">
                                    </div>
                                    <div class="col-3">
                                        <label for="">Label <span class="text-danger">*</span></label>
                                        <input type="text" class="form-control label-y-chart-line" value="{{label-y-chart-line}}">
                                    </div>
                                    <div class="col-2">
                                        <label for="">Color <span class="text-danger">*</span></label>
                                        <input type="color" id="rgb" class="form-control rgb-chart-line" value="{{rgb-chart-line}}">
                                    </div>
                                    {{delete}}
                                </div>`;

        let deleteEl = `<div class="col-1 d-flex justify-content-center align-items-center" style="margin-top:30px">
                            <i class="fas fa-trash-alt remove-value"></i>
                         </div>`

        let inputHtml = `
                        
                        <div class="row mb-3" id="div-title">
                            <div class="col-12">
                                <lable>Title</label>
                                <input type="text" class="form-control" id="edit_title"/>
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="">Lable Axis x </label>
                                <input type="text" class="form-control axis_x">
                            </div>
                            <div class="col-md-6">
                                <label for="">Lable Axis y</label>
                                <input type="text" class="form-control axis_y">
                            </div>
                        </div>

                        <button class="btn btn-primary btn-sm btn-radius mt-2 mb-2 btn_edit_value_mutiline" >
                            <i class="fa fa-plus"></i>
                            Add Line Value Of Y
                        </button>
                            {{datasources}}
               
                        `;

        let bindElement = () => {
            this.submitEditClick(onSubmit);

            state.editModalIdSelect.find(".btn_edit_value_mutiline").unbind().click(function () {
                let htmlData = datasourceInput;
                htmlData = htmlData.replace('{{value-datasource}}', "")
                htmlData = htmlData.replace('{{value-datasource}}', "")
                htmlData = htmlData.replace('{{label-y-chart-line}}', "");
                htmlData = htmlData.replace('{{rgb-chart-line}}', "#f6b73c");
                htmlData = htmlData.replace('{{delete}}', deleteEl);
                let d = $(this).parent().append(htmlData);
                Datasource.setEventEl(d.find(".select-datasource").last(), widget, true);
            });

        };

        let onSubmit = () => {
            let title = state.editModalIdSelect.find("#edit_title").val();
            let timeInterval = state.editModalIdSelect.find("#edit_time_interval").val()
            $(this.findTitleWidget()).html(title);
            this.widget.title_name = title;
            //this.widget.timeInterval = timeInterval;
            this.widget.updatePropWidget();
            this.closeModalEdit();
        };

        let createDatasourceInput = () => {
            let i = 0;
            let html = "";
            this.widget.datasources.map(_data => {
                let htmlData = datasourceInput;
                htmlData = htmlData.replace('{{value-datasource}}', _data.val)
                htmlData = htmlData.replace('{{value-datasource}}', _data.val)
                htmlData = htmlData.replace('{{label-y-chart-line}}', this.widget.datasets[i].label);
                htmlData = htmlData.replace('{{rgb-chart-line}}', this.widget.datasets[i].borderColor);
                htmlData = htmlData.replace('{{delete}}', deleteEl);
                html += htmlData;
                i++;
            })
            return html;
        }

        let setElement = () => {
            state.editModalIdSelect.find("#edit_title").val(widget.title_name);
            state.editModalIdSelect.find("#edit_time_interval").val(widget.timeInterval);
            state.editModalIdSelect.find(".axis_x").val(widget.axis_x);
            state.editModalIdSelect.find(".axis_y").val(widget.axis_y);
        };

        this.initCreate = () => {
            inputHtml = inputHtml.replace("{{datasources}}", createDatasourceInput())
            this.createModalEdit(inputHtml, bindElement);
            if (state.editModalIdSelect.length)
                bindElement();
            setElement();
        };
    }
}

class ModalEditWidgetGauges extends ModalEditWidget {
    constructor(widget) {
        super(widget);
        let datasourceInput = `  <div class="row">
                                    <div class="col-6">
                                        <label for="">Datasource</label>
                                        ${$("#layout_datasource").html()}
                                    </div>
                                    <div class="col-6">
                                        <label for="">Value</label>
                                        <input class="form-control value-datasource" value="{{value-datasource}}">
                                        <ul class="list-group data-list">
                                    </div>
                                </div>`;

        let inputHtml = `<div id="edit-Gauges" class="edit-widget-form"> 
                            <div class="row">
                                <div class="col-12">
                                    <lable>Title</label>
                                    <input type="text" class="form-control" id="edit_title"/>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-4">
                                    <label>limitMin</label>
                                    <input type="number" name="limitMin" id="edit_g_limitMin" class="form-control">
                                </div>

                                <div class="col-4">
                                    <label>limitMax</label>
                                    <input type="number" name="limitMax" id="edit_g_limitMax" class="form-control">
                                </div>

                                <div class="col-4">
                                    <label>Unit</label>
                                    <input type="text" name="unit" id="edit_unit" class="form-control">
                                </div>
                            </div>
                            {{datasources}}
                        </div>`;

        let bindElement = () => {
            this.submitEditClick(onSubmit);
        };

        let onSubmit = () => {
            let title = state.editModalIdSelect.find("#edit_title").val();
            let unit = state.editModalIdSelect.find("#edit_unit").val();
            let limitMin = state.editModalIdSelect.find("#edit_g_limitMin").val();
            let limitMax = state.editModalIdSelect.find("#edit_g_limitMax").val();
            let timeInterval = state.editModalIdSelect.find("#edit_time_interval").val();
            let unitId = this.widget.itemId.replace("item-", "unit_");
            $(this.findTitleWidget()).html(title);
            $("#" + this.widget.widgetId).empty();
            this.widget.gaugeWidget = {};
            this.widget.gaugeWidget = new JustGage({
                id: this.widget.widgetId,
                value: 0,
                min: limitMin,
                max: limitMax,
                symbol: ' ' + unit,
                relativeGaugeSize: true,
                titlePosition: "below"
            });

            let elValueDatasource = state.editModalIdSelect.find(elements.DOMString.class.valueDatasource);

            let value_datasource = [{
                id: elValueDatasource.attr('service_id'),
                type: elValueDatasource.attr('label'),
                val: elValueDatasource.val(),
            }];

            this.widget.datasources = value_datasource;
            $("#" + this.widget.widgetId).height($("#" + this.widgetId).height() - 5);
            this.widget.title_name = title;
            this.widget.limitMax = limitMax;
            this.widget.limitMin = limitMin;
            this.widget.unit = unit;
            this.widget.timeInterval = timeInterval;
            this.widget.updateData();
            this.closeModalEdit();
        };

        let createDatasourceInput = () => {
            let i = 0;
            let html = "";
            this.widget.datasources.map(_data => {
                let htmlData = datasourceInput;
                htmlData = htmlData.replace('{{value-datasource}}', _data.val);
                html += htmlData;
                i++;
            })
            return html;
        }

        let setElement = () => {
            state.editModalIdSelect.find("#edit_title").val(widget.title_name);
            state.editModalIdSelect.find("#edit_g_limitMin").val(widget.limitMin);
            state.editModalIdSelect.find("#edit_g_limitMax").val(widget.limitMax);
            state.editModalIdSelect.find("#edit_time_interval").val(widget.timeInterval);
            state.editModalIdSelect.find("#edit_unit").val(widget.unit);
        };

        this.initCreate = () => {
            inputHtml = inputHtml.replace("{{datasources}}", createDatasourceInput())
            this.createModalEdit(inputHtml, bindElement);
            bindElement();
            setElement();
        };
    }
}


class ModalEditWidgetRader extends ModalEditWidget {
    constructor(widget) {
        super(widget);
        let inputHtml = `<div class="row" id="div-title">
                            <div class="col-12">
                                <lable>Title</label>
                                <input type="text" class="form-control" id="edit_title"/>
                            </div>
                         
                            <div class="col-12 mt-3">
                                <h5>Label Radar</h5>
                                <button class="btn btn-primary btn-sm btn-radius mb-2 btn-add-label">
                                    <i class="fa fa-plus"></i>
                                    Add label
                                </button>  
                                <div id="radar_edit_label">
                                  {{lableInput}}
                                </div>
                                <div class="row mt-3" >
                                    <div class="col-12">
                                        <h5>Datasource Radar</h5>
                                        <button class="btn btn-primary btn-sm btn-radius btn-add-datasource-radar mb-2">
                                            <i class="fa fa-plus"></i>
                                            Add datasource
                                        </button>
                                    </div>
                                </div>
                                <div class="row ">
                                    <div class="col-12 radar-value">
                                    {{form-radar-value}}
                                    </div>
                                </div>
                        </div>`;

        let lableInput = `<div class="input-group">
                                <input type="text" class="form-control radar-labels mt-2"  bind="radar-edit-label-{{i}}" value="{{value}}">
                                <div class="input-group-append">
                                    <button class="btn btn-danger mt-2  remove-radar-labels" type="button" bind="radar-edit-label-{{i}}"><i class="fas fa-times"></i></button>
                                </div>
                          </div>`

        let inputValue = `<div class="row form-group">
                                <div class="col-6">
                                    <label for="">Label</label>
                                    <input class="form-control label-radar-select radar-edit-label-{{i}}" readonly value="{{radar-label}}">
                                </div>
                                <div class="col-6">
                                    <label for="">Value</label>
                                    <input class="form-control value-datasource" value="{{value-datasource}}">
                                    <ul class="list-group data-list" style="display: none">
                                </div>
                            </div>`

        let form_radar_value = ` <div class="form-radar-value">
                                        <i class="fas fa-times d-flex justify-content-end remove-datasource-radar"></i>
                                        <h6>Select Datasource</h6>
                                        <div class="row">
                                            <div class="col-4">
                                                <label for="">Label</label>
                                                <input type="text" class="form-control label-radar" value={{label-radar}} >
                                            </div>
                                            <div class="col-4">
                                                <label for="">Datasource</label>
                                                ${$("#layout_datasource").html()}
                                            </div>
                                            <div class="col-4">
                                                <label for="">Color</label>
                                                <input type="color" class="form-control radar-color" value="{{radar-color}}">
                                            </div>
                                        </div>
                                        <h6>Set Value</h6>
                                        <div class="add-value-radar">
                                            {{inputValue}}
                                        </div>
                                    </div>`;


        let createFormDatasourceRadar = () => {
            let form_rader_value = $(".radar-value > .form-radar-value").html();
            let form = $(".radar-value").append(`<div class="form-radar-value">${form_rader_value}</div>`);
            form.find('.form-radar-value').last().find('.list-group').empty();
            form.find('.form-radar-value').last().find('.label-radar').val('');
            form.find('.form-radar-value').last().find('.value-datasource').val('');
            Datasource.setEventEl(form.find(".select-datasource").last(), widget, true);
        };

        let bindElement = () => {
            this.submitEditClick(onSubmit);

            $(".btn-add-label").unbind().click(function () {
                state.radarLabelEditCount++;
                let radar_edit_label = $(this).next();
                let html = lableInput.replace('{{value}}', "");
                html = html.replace(/{{i}}/g, state.radarLabelEditCount);
                radar_edit_label.append(html);
                state.editModalIdSelect.find(".form-radar-value").each(function () {
                    let el = $(this).find(".add-value-radar");
                    let value_datasource = $(this).find(".select-datasource");
                    let html = inputValue.replace('{{radar-label}}', '');
                    html = html.replace('{{i}}', state.radarLabelEditCount);
                    html = html.replace('{{value-datasource}}', "");
                    el.append(html);
                    Datasource.setEventElRadar(value_datasource, true);

                    el.find('.value-datasource:last').focus(function () {
                        el.find('.data-list.active-data').hide().removeClass('active-data');
                        $(this).next().addClass('active-data');
                        $(this).next().show();
                    })
                })

            });

            state.editModalIdSelect.on("click", ".remove-datasource-radar", function () {
                $(this).parent().remove();
                if (radarEx)
                    radarEx.updateRadarExample();
            });

            state.editModalIdSelect.on("change", ".radar-labels", function () {
                let val = $(this).val();
                let bind = $(this).attr('bind');
                $("." + bind).attr('value', val);
            });

            $(".btn-add-datasource-radar").unbind().click(function () {
                createFormDatasourceRadar();
            });
        };

        let onSubmit = () => {
            let title = state.editModalIdSelect.find("#edit_title").val();
            $(this.findTitleWidget()).html(title);
            this.widget.title_name = title;
            // this.widget.timeInterval = timeInterval;
            this.widget.updatePropWidget();
            this.closeModalEdit();
        };

        let createDatasourceInput = () => {
            let htmlLableSum = "";
            let htmlValueSum = "";

            state.radarLabelEditCount = widget.labels.length;
            widget.labels.map((_data, index) => {
                let htmlLable = "";
                htmlLable = lableInput.replace('{{value}}', _data);
                htmlLable = htmlLable.replace(/{{i}}/g, index + 1);
                htmlLableSum += htmlLable;

            });

            let formSum = "";
            let i = 1;
            let j = 0;

            widget.datasources.map((_data, index) => {
                let htmlValue = ""
                htmlValue = inputValue.replace('{{value-datasource}}', _data.val);
                htmlValue = htmlValue.replace('{{radar-label}}', widget.labels[i - 1]);
                htmlValue = htmlValue.replace('{{i}}', i);
                htmlValueSum += htmlValue;
                if ((index + 1) % widget.labels.length === 0) {
                    let form = form_radar_value;
                    form = form.replace('{{inputValue}}', htmlValueSum);
                    form = form.replace('{{radar-color}}', widget.color[j]);
                    form = form.replace('{{label-radar}}', widget.label[j]);
                    formSum += form;
                    htmlValueSum = "";
                    i = 0;
                    j++;
                }
                i++;
            })


            inputHtml = inputHtml.replace('{{lableInput}}', htmlLableSum);
            inputHtml = inputHtml.replace('{{form-radar-value}}', formSum);
        }

        let setElement = () => {
            state.editModalIdSelect.find("#edit_title").val(widget.title_name);
            state.editModalIdSelect.find("#edit_time_interval").val(widget.timeInterval);
        };

        this.initCreate = () => {
            createDatasourceInput();
            this.createModalEdit(inputHtml, bindElement);
            bindElement();
            setElement();
        };
    }
}

class ModalEditWidgetMap extends ModalEditWidget {
    constructor(widget) {
        super(widget);
        let inputHtml = `<div class="row" id="div-title">
                            <div class="col-12">
                                <lable>Title</label>
                                <input type="text" class="form-control" id="edit_title"/>
                            </div>
                        </div>

                        <h5>Select value of point in map</h5>

                        <div class="row">
                            <div class="col-5">
                                <label for="">Datasource <span class="text-danger">*</span></label>
                                ${$("#layout_datasource").html()}
                            </div>
                        </div>

                        <button class="btn btn-primary btn-sm btn-radius mt-2 btn-add-edit-point-map">
                            <i class="fa fa-plus"></i>
                            Add Point
                        </button>
                        
                            {{datasourceInput}}
                        </div>`;

        let datasourceInput = `  
                            <div class="row value-of-map">
                                <div class="col-3">
                                    <label for="">Latitude <span class="text-danger">*</span></label>
                                    <input class="form-control value-datasource latitude" value="{{latitude}}">
                                    <ul class="list-group data-list">
                                </div>
                                <div class="col-3">
                                    <label for="">Longitude <span class="text-danger">*</span></label>
                                    <input class="form-control value-datasource longitude" value="{{longitude}}">
                                    <ul class="list-group data-list">
                                </div>
                                <div class="col-3">
                                    <label for="">Value <span class="text-danger">*</span></label>
                                    <input type="text" class="form-control value-datasource value-map" value="{{value-map}}">
                                    <ul class="list-group data-list">
                                </div>
                                <div class="col-2">
                                    <label for="">Label <span class="text-danger">*</span></label>
                                    <input type="text" class="form-control label-map" value="{{label-map}}">
                                </div>
                                <div class="col-1 d-flex justify-content-center align-items-center" style="margin-top:30px">
                                    <i class="fas fa-trash-alt remove-value"></i>
                                </div>
                            </div>`;

        let bindElement = () => {
            this.submitEditClick(onSubmit);

            state.editModalIdSelect.on('click', '.btn-add-edit-point-map', function () {
                Datasource.addEventMap(state.editModalIdSelect.find('.modal-body'), true);
            });

        };

        let onSubmit = () => {
            let title = $("#edit_title").val();
            let timeInterval = $("#edit_time_interval").val();
            $(this.findTitleWidget()).html(title);
            this.widget.title_name = title;
            //this.widget.timeInterval = timeInterval;
            this.widget.updatePropWidget();
            this.closeModalEdit();
        };

        let createDatasourceInput = () => {
            let i = 0;
            let html = "";
            this.widget.datasources.map(_data => {
                let htmlData = datasourceInput;
                htmlData = htmlData.replace('{{latitude}}', _data.latitude);
                htmlData = htmlData.replace('{{longitude}}', _data.longitude);
                htmlData = htmlData.replace('{{value-map}}', _data.value);
                htmlData = htmlData.replace('{{label-map}}', _data.label);
                html += htmlData;
                i++;
            })
            return html;
        }

        let setElement = () => {
            state.editModalIdSelect.find("#edit-title").val(widget.title_name);
            //$("#edit_time_interval").val(widget.timeInterval);
        };

        this.initCreate = () => {
            inputHtml = inputHtml.replace("{{datasourceInput}}", createDatasourceInput())
            this.createModalEdit(inputHtml, bindElement);
            bindElement();
            setElement();
        };
    }
}

class ModalEditTextValue extends ModalEditWidget {
    constructor(widget) {
        super(widget);

        let datasourceInput = `  <div class="row">
                                    <div class="col-6">
                                         <label for="">Datasource</label>
                                        ${$("#layout_datasource").html()}
                                    </div>
                                    <div class="col-6">
                                         <label for="">Value</label>
                                        <input class="form-control value-datasource" value="{{value-datasource}}">
                                        <ul class="list-group data-list">
                                    </div>
                                </div>`;

        let inputHtml = `<div class="row" id="div-title">
                            <div class="col-12">
                                <lable>Title</label>
                                <input type="text" class="form-control" id="edit-title"/>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-6">
                                <label>Unit</label>
                                <input id="edit_unit" type="text" class="form-control" />
                            </div>
                            <div class="col-6">
                                <label>Color <span class="text-danger">*</span></label>
                                <input id="edit_color" type="color" class="form-control" value="#f6b73c">
                            </div>
                        </div>
                        {{datasources}}
                        `;

        let bindElement = () => {
            this.submitEditClick(onSubmit);
        };

        let onSubmit = () => {
            let title = state.editModalIdSelect.find("#edit-title").val();
            let unit = state.editModalIdSelect.find("#edit_unit").val();
            let color = state.editModalIdSelect.find("#edit_color").val();
            $(this.findTitleWidget()).html(title);
            $("#" + this.widget.widgetId).next('span').html(unit);
            $("#" + this.widget.widgetId).parent().css({
                "color": color
            });

            this.widget.title_name = title;
            this.widget.unit = unit;
            this.widget.rgb = color;
            this.widget.updatePropWidget();
            this.closeModalEdit();
        };

        let createDatasourceInput = () => {
            let i = 0;
            let html = "";
            this.widget.datasources.map(_data => {
                let htmlData = datasourceInput;
                htmlData = htmlData.replace('{{value-datasource}}', _data.val);
                html += htmlData;
                i++;
            })
            return html;
        }


        let setElement = () => {
            state.editModalIdSelect.find("#edit-title").val(widget.title_name);
            state.editModalIdSelect.find("#edit_unit").val(widget.unit);
            state.editModalIdSelect.find("#edit_color").val(widget.rgb);
        };

        this.initCreate = () => {
            inputHtml = inputHtml.replace("{{datasources}}", createDatasourceInput())
            this.createModalEdit(inputHtml, bindElement);
            bindElement();
            setElement();
        };
    }
}
class ModalEditTextLine extends ModalEditWidget {
    constructor(widget) {
        super(widget);

        let datasourceInput = `  <div class="row">
                                        <div class="col-4">
                                            <label for="">Datasource</label>
                                            ${$("#layout_datasource").html()}
                                        </div>
                                        <div class="col-4">
                                            <label for="">Value</label>
                                            <input class="form-control value-datasource" value="{{value-datasource}}">
                                            <ul class="list-group data-list">
                                        </div>
                                        <div class="col-4">
                                            <label for="">RGB</label>
                                            <input id="rgb" type="color" class="form-control rgb-chart-line" value="{{rgb-chart-line}}">
                                        </div>
                                    </div>`;

        let inputHtml = `<div class="row" id="div-title">
                            <div class="col-12">
                                <lable>Title</label>
                                <input type="text" class="form-control" id="edit_title"/>
                            </div>
                            <div class="col-6">
                                <lable>Unit</label>
                                <input type="text" class="form-control" id="edit_unit"/>
                            </div>
                        </div>
                        {{datasources}}`;

        let bindElement = () => {
            this.submitEditClick(onSubmit);
        };

        let onSubmit = () => {
            let title = state.editModalIdSelect.find("#edit_title").val();
            let unit = state.editModalIdSelect.find("#edit_unit").val();

            let unitId = this.widget.itemId.replace("item-", "unit_");
            $(this.findTitleWidget()).html(title);
            $("#" + unitId).html(unit);
            this.widget.title_name = title;
            this.widget.unit = unit;
            this.widget.updatePropWidget();
            this.closeModalEdit();
        };

        let createDatasourceInput = () => {
            let i = 0;
            let html = "";
            this.widget.datasources.map(_data => {
                console.log(this.widget);
                let htmlData = datasourceInput;
                htmlData = htmlData.replace('{{value-datasource}}', _data.val);
                htmlData = htmlData.replace('{{rgb-chart-line}}', this.widget.rgb);
                html += htmlData;
                i++;
            })
            return html;
        }


        let setElement = () => {
            state.editModalIdSelect.find("#edit_title").val(widget.title_name);
            state.editModalIdSelect.find("#edit_unit").val(widget.unit);
        };

        this.initCreate = () => {
            inputHtml = inputHtml.replace("{{datasources}}", createDatasourceInput())
            this.createModalEdit(inputHtml, bindElement);
            bindElement();
            setElement();
        };
    }
}

class ModalEditTable extends ModalEditWidget {
    constructor(widget) {
        super(widget);

        let tableEx = null;
        let inputHtml = `<div id = "edit_table" class="value-widget">
                            <div class="row">
                                <div class="col-12">
                                    <label>Title</label>
                                    <input type="text" id="edit_title" class="form-control" />
                                </div>
                            </div>
                             <div class="row">
                                <div class="col-6">
                                    <label for="">Datasource</label>
                                    ${$("#layout_datasource").html()}
                                    <div class="mt-2" id="btn-mm-table">
                                        <button type="button" class="btn btn-primary btn-sm btn-radius" id="btn_add_col">Add
                                            column</button>
                                        <button type="button" class="btn btn-danger btn-sm btn-radius" id="btn_remove_col">Remove
                                            column</button>
                                        <button type="button" class="btn btn-primary btn-sm btn-radius" id="btn_add_row">Add
                                            row</button>
                                        <button type="button" class="btn btn-danger btn-sm btn-radius" id="btn_remove_row">Remove
                                            row</button>
                                    </div>
                                </div>
                            </div>
                            <div class="row mt-3">
                                <table class="table table-bordered edit_example_table">
                                    <thead>
                                    </thead>
                                    <tbody>
                                    </tbody>
                                </table>
                            </div>
                        </div> `;

        let bindElement = () => {
            this.submitEditClick(onSubmit);
            tableEx = new TableEx(state.editModalIdSelect.find(".edit_example_table"), {
                col: {
                    amount: this.widget.table.col_labels.length,
                },
                row: {
                    amount: this.widget.table.rows.length,
                }
            })

            tableEx.createTableEx();
            tableEx.setValue(this.widget);

            state.editModalIdSelect.find("#btn_add_col").unbind().click(function () {
                tableEx.addCol();
                Datasource.addEventTable(state.editModalIdSelect.find(".select-datasource"), true);
            });

            state.editModalIdSelect.find("#btn_remove_col").unbind().click(function () {
                tableEx.removeCol();
            });

            state.editModalIdSelect.find("#btn_add_row").unbind().click(function () {
                tableEx.addRow();
                Datasource.addEventTable(state.editModalIdSelect.find(".select-datasource"), false);
            });

            state.editModalIdSelect.find("#btn_remove_row").unbind().click(function () {
                tableEx.removeRow();
            });

        };

        let onSubmit = () => {
            let title = state.editModalIdSelect.find("#edit_title").val();
            $(this.findTitleWidget()).html(title);
            this.widget.title_name = title;
            this.widget.updatePropWidget(tableEx);
            this.closeModalEdit();
        };


        let setElement = () => {
            state.editModalIdSelect.find("#edit_title").val(widget.title_name);

        };

        this.initCreate = () => {
            this.createModalEdit(inputHtml, bindElement);
            bindElement();
            setElement();
        };
    }
}

class ModalEditWidgetTextBox extends ModalEditWidget {
    constructor(widget) {
        super(widget);
        let inputHtml = `<div id = "edit-text-box" class="value-widget">
                            <div class="row">
                                <div class="col-6">
                                    <label>Text</label>
                                    <input type="text" id="edit-text-custom" class="form-control" />
                                </div>
                                <div class="col-6">
                                    <label>Font Size (px)</label>
                                    <input type="number" id="edit-font-size" class="form-control" />
                                </div>
                            </div>
                        </div> `;

        let bindElement = () => {
            this.submitEditClick(onSubmit);
        };

        let onSubmit = () => {
            $("#" + widget.widgetId).html(state.editModalIdSelect.find("#edit-text-custom").val());
            $("#" + widget.widgetId).css({
                "font-size": $("#edit-font-size").val() + "px"
            });
            widget.textbox = state.editModalIdSelect.find("#edit-text-custom").val();
            widget.fontsize = state.editModalIdSelect.find("#edit-font-size").val();
            this.closeModalEdit();
        };

        let setElement = () => {
            state.editModalIdSelect.find("#edit-text-custom").val(widget.textbox);
            state.editModalIdSelect.find("#edit-font-size").val(widget.fontsize);
        };

        this.initCreate = () => {
            this.createModalEdit(inputHtml, bindElement);
            bindElement();
            setElement();
        };
    }
}

class Widget {
    constructor(widget, gridData = null) {

        this.itemId = widget.itemId;
        this.widgetId = widget.widgetId;
        this.apiName = widget.apiName;
        this.datasources = widget.datasources;
        this.type = widget.type;
        this.lastUpdateId = widget.lastUpdateId;
        this.title_name = widget.title_name;
        this.lastUpdate = widget.lastUpdate;
        this.timeInterval = widget.timeInterval;
        this.wi = widget.wi;
        this.download = widget.download;
        this.gridData = gridData;
        this.isAllow = true;

        this.updateLastUpdate = (time = null) => {
            if (time) {
                this.lastUpdate = moment(new Date(time)).format('llll');
                $("#" + this.lastUpdateId).html(this.lastUpdate);
            } else {
                this.lastUpdate = moment(new Date()).format('llll');
                $("#" + this.lastUpdateId).html(this.lastUpdate);
            }
        };

        let options = {
            cellHeight: 80,
            verticalMargin: 10,
            float: false
        };

        let items = [{
            x: 0,
            y: 0,
            width: 6,
            height: 7,
        }];

        let grid = null;

        let ModalDeleteWidget = null;

        this.findUniqueDatasources = () => {
            let result = Array.from(new Set(this.datasources.map(d => d.id)))
                .map(service_id => {

                    return {
                        id: service_id,
                        type: this.datasources.find(d => d.id == service_id).type,
                        val: this.datasources.find(d => d.id == service_id).val,
                    }
                });
            return result;
        }

        let generateId = () => {
            let id = Math.floor(100000 + Math.random() * 900000);
            let type = this.type.toLowerCase();
            this.itemId = `item-${id}`;
            this.widgetId = `${type}-${id}`;
            this.lastUpdateId = `${type}-lastupdate-${id}`;
            this.editModalId = `editWidget_${type}_${id}`
        };

        let onEditWidgetClick = (el) => {
            let _el = $(el);
            let itemId = _el.attr("item");
            let widget = Dashboard.getWidgetById(itemId);

            let modal = null;
            if (widget.type === WIDGET_TYPE.MUTILINE || widget.type === WIDGET_TYPE.MUTILINE_STATIC) {
                modal = new ModalEditWidgetMutiLine(widget);
            } else if (widget.type === WIDGET_TYPE.TEXTLINE) {
                modal = new ModalEditTextLine(widget);
            } else if (widget.type === WIDGET_TYPE.GAUGES) {
                modal = new ModalEditWidgetGauges(widget);
            } else if (widget.type === WIDGET_TYPE.RADAR) {
                modal = new ModalEditWidgetRader(widget);
            } else if (widget.type === WIDGET_TYPE.MAP) {
                modal = new ModalEditWidgetMap(widget);
            } else if (widget.type === WIDGET_TYPE.TEXTVALUE) {
                modal = new ModalEditTextValue(widget);
            } else if (widget.type === WIDGET_TYPE.TEXTBOX) {
                modal = new ModalEditWidgetTextBox(widget);
            } else if (widget.type === WIDGET_TYPE.TABLE || widget.type === WIDGET_TYPE.TABLE_STATIC) {
                modal = new ModalEditTable(widget);
            }

            modal.initCreate();
        };

        this.sendUpdateSocket = () => {
            this.datasources.map(_d => {
                state.dashboard.pushAllDatasource(_d.id, _d.type);
            });
            socket_dashboards.emit('update-datasources', state.allDatasource);
        }

        let bindWidgetElement = () => {

            $("#type_report").change(function () {
                let footer = $(this).parent().parent();
                let val = $(this).val();
                footer.find(".daily").hide();
                footer.find(".monthly").hide();
                footer.find(".yearly").hide();
                if (val === "daily") {
                    footer.find(".daily").show();
                } else if (val === "monthly") {
                    footer.find(".monthly").show();
                } else if (val === "yearly") {
                    footer.find(".yearly").show();
                }
            });

            $(".btn-delete-wi").unbind().click(function () {
                onDeleteWidgetClick($(this));
            });

            $(".btn-edit-wi").unbind().click(function () {
                onEditWidgetClick($(this));
            });

            $(".btn-full-screen").unbind().click(function () {
                onFullScreenClick($(this));
            });

            $(".btn-download").unbind().click(function () {
                let widget = Dashboard.getWidgetById($(this).attr('item'));
                // var printPlugin = L.easyPrint({
                //     hidden: true,
                //     sizeModes: ['Current', 'A4Landscape', 'A4Portrait'],
                // }).addTo(widget.myMap); 
                // printPlugin.printMap('CurrentSize', 'MyManualPrint')
                if (widget.type === WIDGET_TYPE.GAUGES) {
                    try {
                        saveSvgAsPng(document.getElementById(widget.widgetId).getElementsByTagName('svg')[0], "diagram.png", {
                            scale: 5
                        });
                    } catch (e) {
                        console.log(alert('error'));
                    }
                } else {
                    let target = state.selectItemId ? document.getElementById(widget.timeSeries) : document.getElementById(widget.widgetId);
                    html2canvas(target, {
                        allowTaint: true,
                        useCORS: true,
                    }).then(canvas => {
                        FileSaver.saveAs(canvas.toDataURL(), 'file-name.png');
                    });
                }
            });

            $(".btn-download-excel").unbind().click(function () {
                let widget = Dashboard.getWidgetById($(this).attr('item'));
                widget.exportToExcel();
            });

            $(".btn-time-series").unbind().click(function () {
                $(this).next().toggle();
                let item = $(this).attr("item");
                let obj = Dashboard.getWidgetById(item);
                let footer = $(this).parent().parent().parent();
                let download = $("#" + item).find(".download");
                obj.updateTimeSeries()
                // let period = $("#"+item).find("select[name='period']")
                // period.change();

                if (footer.hasClass('active-time')) {
                    //download.hide();
                    state.selectItemId = null;
                    $(`#${obj.widgetId}`).show();
                    $(`#${obj.timeSeries}`).hide();
                    footer.removeClass('active-time')
                } else {
                    //download.show();
                    state.selectItemId = item;
                    $(`#${obj.widgetId}`).hide();
                    $(`#${obj.timeSeries}`).show();
                    footer.addClass('active-time');

                }

                if (obj.type === WIDGET_TYPE.MUTILINE) {
                    obj.isWidgetRealTime = !obj.isWidgetRealTime;
                }

                footer.find('.time-series-static').slideToggle('fast', function () {
                    if ($(this).is(':visible'))
                        obj.fullChart.resize();
                });

            });

            $(".period").unbind().change(function () {
                let period_custom = $(this).parent().parent().find('.period-custom');
                let item = $(this).attr('item');
                let widget = Dashboard.getWidgetById(item);
                widget.periodType = $(this).val();
                if ($(this).val() === PERIOD.CUSTOM) {
                    period_custom.show();
                } else {
                    period_custom.hide();
                }
                let today = new Date();
                let startDate = null;
                let endDate = null;
                switch ($(this).val()) {
                    case PERIOD.TODAY:
                        endDate = moment(today).endOf('day').format('YYYY-MM-DD HH:mm:ss');
                        startDate = moment(today).startOf('day').format('YYYY-MM-DD HH:mm:ss');
                        break;
                    case PERIOD.YESTERDAY:
                        let yesterday = moment(today).subtract(1, 'days').format('YYYY-MM-DD');
                        endDate = moment(yesterday).endOf('day').format('YYYY-MM-DD HH:mm:ss');
                        startDate = moment(yesterday).startOf('day').format('YYYY-MM-DD HH:mm:ss');
                        break;
                    case PERIOD.CURRENT_WEEK:
                        startDate = moment(today).startOf('week').format('YYYY-MM-DD HH:mm:ss');
                        endDate = moment(today).endOf('week').format('YYYY-MM-DD HH:mm:ss');
                        break;
                    case PERIOD.WEEK_1:
                        startDate = moment(today).subtract(7, 'days').format('YYYY-MM-DD HH:mm:ss');
                        endDate = moment(today).format('YYYY-MM-DD HH:mm:ss');
                        break;
                    case PERIOD.WEEK_2:
                        startDate = moment(today).subtract(14, 'days').format('YYYY-MM-DD HH:mm:ss');
                        endDate = moment(today).format('YYYY-MM-DD HH:mm:ss');
                        break;
                    case PERIOD.WEEK_4:
                        startDate = moment(today).subtract(28, 'days').format('YYYY-MM-DD HH:mm:ss');
                        endDate = moment(today).format('YYYY-MM-DD HH:mm:ss');
                        break;
                    case PERIOD.CURRENT_MONTH:
                        startDate = moment(today).startOf('month').format('YYYY-MM-DD HH:mm:ss')
                        endDate = moment(today).endOf('month').format('YYYY-MM-DD HH:mm:ss');
                        break;
                    case PERIOD.LAST_MONTH:
                        startDate = moment(today).subtract(1, 'months').startOf('month').format('YYYY-MM-DD  HH:mm:ss');
                        endDate = moment(today).subtract(1, 'months').endOf('month').format('YYYY-MM-DD  HH:mm:ss')
                        break;
                    case PERIOD.MONTH_3:
                        startDate = moment(today).subtract(90, 'days').format('YYYY-MM-DD');
                        endDate = moment(today).format('YYYY-MM-DD HH:mm:ss');
                        break;
                    case PERIOD.MONTH_6:
                        startDate = moment(today).subtract(180, 'days').format('YYYY-MM-DD');
                        endDate = moment(today).format('YYYY-MM-DD HH:mm:ss');
                        break;
                    case PERIOD.MONTH_12:
                        startDate = moment(today).subtract(360, 'days').format('YYYY-MM-DD');
                        endDate = moment(today).format('YYYY-MM-DD HH:mm:ss');
                        break;
                    default:
                        break;
                }
                widget.endDate = endDate;
                widget.startDate = startDate;
                widget.updateTimeSeries();
            });


            $(".start_date").unbind().change(function () {
                let period_custom = $(this).parent().parent().find('.period-custom');
                let item = $(this).attr('item');
            })

            $(".start_date").unbind().change(function () {
                let period_custom = $(this).parent().parent().find('.period-custom');
                let item = $(this).attr('item');
            })

            // if (this.sliderTime) {
            //     this.sliderTime.noUiSlider.on('update', function (values, handle) {
            //         getValueTimeSeries();
            //     });

            //     $(".static_date").change(function () {
            //         let obj = Dashboard.getWidgetById(state.selectItemId);
            //         let time = obj.sliderTime.noUiSlider.get();
            //         if (time) {
            //             getValueTimeSeries();
            //         }
            //         return;
            //     });
            // }
        };

        let getValueTimeSeries = () => {
            try {
                let obj = Dashboard.getWidgetById(state.selectItemId);
                obj.updateTimeSeries();
            } catch (error) {

            }
        }

        let onFullScreenClick = (el) => {
            let obj = Dashboard.getWidgetById(el.attr("item"));
            $("#modal_full_screen").modal('show');
            $("#content-widget").html(obj.selectWiContentFull());
            obj.createFullWidget();
        };

        let onDeleteWidgetClick = (el) => {
            swal({
                title: "Are you sure?",
                text: "Delete this widget",
                icon: "warning",
                buttons: true,
                dangerMode: true,
            }).then((willDelete) => {
                if (willDelete) {
                    submitDeleteWidget($(el));
                } else {
                    return;
                }
            });
        };

        let submitDeleteWidget = (el) => {
            let item = $(el).attr("item");
            grid.removeWidget($('#' + item).closest(".grid-stack-item"));
            let index = widgetList.findIndex(widget => widget.itemId == item);
            widgetList.splice(index, 1);
        };

        this.selectWiContent = () => {
            let valueId = "";
            let unitId = "";
            switch (this.type) {
                case WIDGET_TYPE.MUTILINE:
                    this.timeSeries = `time-${this.widgetId}`;
                    return `<canvas id="${this.widgetId}"></canvas><canvas id="${this.timeSeries}" style="display:none"></canvas>`;
                case WIDGET_TYPE.MUTILINE_STATIC:
                    return `<canvas id="${this.widgetId}"></canvas>`;
                case WIDGET_TYPE.TEXTLINE:
                    valueId = this.itemId.replace("item-", "value-");
                    unitId = this.itemId.replace("item-", "unit-");
                    return ` <h2 class="text-left"><span id="${valueId}">0</span> <span  id="${unitId}">${this.unit}</span></h2>
                             <canvas id="${this.widgetId}"></canvas>
                            `;
                case WIDGET_TYPE.RADAR:
                    return `<canvas id="${this.widgetId}"></canvas>`;
                case WIDGET_TYPE.GAUGES:
                    valueId = this.itemId.replace("item-", "gauges-text-");
                    unitId = this.itemId.replace("item-", "unit_");
                    // <canvas id="${this.widgetId}"></canvas>
                    //<h2><span id="${valueId}">0</span> <span  id="${unitId}">${this.unit}</span></h2>
                    return `
                            <div id="${this.widgetId}"></div>
                            `;
                case WIDGET_TYPE.MAP:
                    return `<div id="${this.widgetId}"></div>`;
                case WIDGET_TYPE.TABLE:

                    return `<div>
                            <table class="table table-bordered" id="${this.widgetId}" >
                                <thead></thead><tbody></tbody>
                            </table>
                            </div>`;
                case WIDGET_TYPE.TABLE_STATIC:

                    return `<div>
                                <table class="table table-bordered" id="${this.widgetId}" >
                                    <thead></thead><tbody></tbody>
                                </table>
                            </div>`;
                case WIDGET_TYPE.TEXTVALUE:
                    return `
                            <h1 style="color:${this.rgb}"><span id="${this.widgetId}">0</span> <span>${this.unit}</span><h1>
                            `;
                case WIDGET_TYPE.TEXTBOX:
                    return `<span id="${this.widgetId}"></span>`;
                default:
                    break;
            }
        };

        this.selectWiContentFull = () => {
            let valueId = "";
            this.fullScreenId = `full-${this.widgetId}`;
            switch (this.type) {
                case WIDGET_TYPE.MUTILINE:
                    return `<canvas id="${this.fullScreenId}"></canvas>`;
                case WIDGET_TYPE.TEXTLINE:
                    valueId = this.itemId.replace("item-", "value_full");
                    return ` <h2 class="text-left"><span id="${valueId}">0</span> ${this.unit}</h2>
                             <canvas id="${this.fullScreenId}"></canvas>
                            `;
                case WIDGET_TYPE.GAUGES:
                    valueId = this.itemId.replace("item-", "gauges-text-full");
                    return `
                            <h2><span id="${valueId}">0</span> <span>${this.unit}</span></h2>
                            <canvas id="${this.fullScreenId}"></canvas>
                            `;
                case WIDGET_TYPE.MAP:
                    return `
                            <div id="${fullScreenId}"></div>
                            `;
                default:
                    break;
            }
        };



        this.createWidget = (gridData = null) => {

            generateId();
            let node = items.pop() || {
                x: 3,
                y: 4,
                width: 6,
                height: 7,
            };

            $(".grid-stack").gridstack(options);
            grid = $(".grid-stack").data("gridstack");

            let layout_widget = "";
            if (this.type !== "TextBox") {
                layout_widget = $("#layout-widget").html();
                if (this.type === WIDGET_TYPE.TEXTVALUE) {
                    node.width = 4;
                    node.height = 4;
                    layout_widget = $("#layout-widget-text-value").html();
                } else if (this.type === WIDGET_TYPE.MUTILINE) {
                    layout_widget = layout_widget.replace(/<<sliderTime>>/g, `slider-${this.itemId}`);
                } else if (this.type.search('static') !== -1) {
                    layout_widget = $("#layout_widget_static").html();
                }
                layout_widget = layout_widget.replace(/div_id/g, this.itemId);
                layout_widget = layout_widget.replace(/widget_id/g, this.widgetId);
                layout_widget = layout_widget.replace("((wi))", this.selectWiContent());
                layout_widget = layout_widget.replace("((title_name))", this.title_name);
                layout_widget = layout_widget.replace("{last_update}", this.lastUpdateId);
                // layout_widget = layout_widget.replace(/<<switch>>/g, `switch-${this.itemId}`);
            } else {
                node.width = 6;
                node.height = 1;
                layout_widget = $("#layout-widget-text").html();
                layout_widget = layout_widget.replace(/div_id/g, this.itemId);
                layout_widget = layout_widget.replace("((wi))", this.selectWiContent());
            }

            node.id = this.itemId;
            let g = null;


            if (this.gridData) {
                g = grid.addWidget(
                    $(layout_widget),
                    this.gridData.x,
                    this.gridData.y,
                    this.gridData.width,
                    this.gridData.height,
                    true, null, null, null, null, node.id
                );
            } else {
                g = grid.addWidget(
                    $(layout_widget),
                    node.x,
                    node.y,
                    node.width,
                    node.height,
                    true, null, null, null, null, node.id
                );
            }

            if (!this.download) {
                g.find('.download').remove();
            }

            // if(this.type === WIDGET_TYPE.TABLE){;
            //     //g.find('.download').show(); 
            // }

            // #set full-screen
            if (this.type !== WIDGET_TYPE.MUTILINE) {
                // g.find('.full-screen > .btn-full-screen').remove();
                g.find('.btn-time-series').remove();
                g.find('.time-series-static').remove();
                g.find('.card-footer').css({
                    height: 'auto'
                });
            } else {
                // this.sliderTime = document.getElementById(`slider-${this.itemId}`);
                // noUiSlider.create(this.sliderTime, {
                //     start: [0, 1440],
                //     connect: true,
                //     // direction: 'rtl',
                //     behaviour: 'tap-drag',
                //     step: 10,
                //     tooltips: [true, true],
                //     range: {
                //         'min': 0,
                //         'max': 1440
                //     },
                //     format: wNumb({
                //         decimals: 2,
                //         mark: ":",
                //         encoder: function (a) {
                //             return aproximateHour(a);
                //         }
                //     }),
                // });
            }

            if (!Datasource.datasourcesHasInCompany(this.datasources, this.itemId) && widget.type != WIDGET_TYPE.TEXTBOX) {
                this.isAllow = false;

            }

            g.data('_gridstack_data', JSON.stringify(Widget.formateDataSave(this)));

            bindWidgetElement();
        };
    }

    static formateDataSave(data) {
        let formateDate = {
            type: data.type,
            apiName: data.apiName,
            datasources: data.datasources,
            download: data.download ? data.download : false,
            timeInterval: data.timeInterval,
        };

        if (data.type === WIDGET_TYPE.MUTILINE || data.type === WIDGET_TYPE.MUTILINE_STATIC) {
            formateDate.isGroupData = data.isGroupData;
            formateDate.title_name = data.title_name;
            formateDate.datasets = data.datasets;
            formateDate.axis_x = data.axis_x;
            formateDate.axis_y = data.axis_y;
        } else if (data.type === WIDGET_TYPE.TEXTLINE) {
            formateDate.title_name = data.title_name;
            formateDate.unit = data.unit;
            formateDate.rgb = data.rgb;
        } else if (data.type === WIDGET_TYPE.RADAR) {
            formateDate.datasets = data.datasets;
            formateDate.title_name = data.title_name;
            formateDate.labels = data.labels;
            formateDate.label = data.label;
            formateDate.color = data.color;
        } else if (data.type === WIDGET_TYPE.GAUGES) {
            formateDate.title_name = data.title_name;
            formateDate.opts = data.opts;
            formateDate.limitMin = data.limitMin;
            formateDate.limitMax = data.limitMax;
            formateDate.unit = data.unit;
        } else if (data.type === WIDGET_TYPE.MAP) {
            formateDate.isGroupData = data.isGroupData;
            formateDate.title_name = data.title_name;
        } else if (data.type === WIDGET_TYPE.TABLE || data.type === WIDGET_TYPE.TABLE_STATIC) {
            formateDate.title_name = data.title_name;
            formateDate.table = data.table;
        } else if (data.type === WIDGET_TYPE.TEXTVALUE) {
            formateDate.title_name = data.title_name;
            formateDate.unit = data.unit;
            formateDate.rgb = data.rgb;
        } else if (data.type === WIDGET_TYPE.TEXTBOX) {
            formateDate.textbox = data.textbox;
            formateDate.fontsize = data.fontsize;
        }

        return formateDate;

    }
}

class MutiLineStatic extends Widget {
    constructor(widget, gridData = null) {
        super(widget, gridData);
        this.chart = null;
        this.datasets = widget.datasets;
        this.axis_x = widget.axis_x;
        this.axis_y = widget.axis_y;
        this.static = null;

        this.periodType = "Today";
        this.end_date = null
        this.start_date = null



        let options = {
            maintainAspectRatio: false,
            scales: {
                yAxes: [{
                    gridLines: {
                        display: false
                    },
                    scaleLabel: {
                        display: true,
                        labelString: 'y-axis'
                    },
                    ticks: {
                        beginAtZero: true,
                        fontFamily: "'Poppins', 'Kanit', 'sans-serif'",
                        fontStyle: "bold",
                    }
                }],
                xAxes: [{
                    scaleLabel: {
                        display: true,
                        labelString: 'x-axis'
                    },
                    gridLines: {
                        display: false
                    },




                }],

            },
            legend: {
                labels: {
                    fontFamily: "'Poppins', 'Kanit', 'sans-serif'",
                    fontColor: 'black'
                }
            },
            // pan: {
            //     enabled: true,
            //     mode: "x",
            //     speed: 10,
            //     threshold: 10
            //   },
            //   zoom: {
            //     enabled: true,
            //     drag: false,
            //     mode: "x",
            //     limits: {
            //       max: 10,
            //       min: 0.5
            //     }
            // },
            tooltips: {
                mode: 'nearest',
                intersect: false
            },
            hover: {
                mode: 'nearest',
                intersect: false
            },
        };


        this.createMutiLine = () => {
            let ctx = document.getElementById(this.widgetId);
            let myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    datasets: deepCopy(this.datasets)
                },
                options: options,
            });

            myChart.config.options.scales.xAxes[0].scaleLabel.labelString = this.axis_x;
            myChart.config.options.scales.yAxes[0].scaleLabel.labelString = this.axis_y;
            this.chart = myChart;
            this.updateStatic();
        };

        let getDataStatic = async () => {
            let url = "";
            await $.ajax({
                url: '/js/company/test-aggr.json',
                data: {},
                headers: {
                    authorization: 'bearer ' + getCookie('token'),
                },
                success: (res, textStatus, xhr) => {
                    checkAuthRes(xhr)
                    this.static = res;
                },
                error: (res) => {

                }
            })
        }

        this.updateStatic = async () => {

            await getDataStatic();
            let myChart = this.chart;
            let i = 0;

            myChart.data.labels = [];
            myChart.data.datasets.forEach((dataset) => {
                dataset.data = [];
            });


            this.static.map(data => {
                //let date = objectPath.get(data, 'date')+"-12-"+"31 10:00:00";
                //console.log(date);
                myChart.data.labels.push(objectPath.get(data, 'date'));
                myChart.data.datasets.forEach((dataset) => {
                    dataset.data.push(objectPath.get(data.data, this.datasources[i].val));
                    i++;
                });
                i = 0;

            })

            // if (time_array.length > 0) {
            //     let min = time_array.reduce(function (a, b) {
            //         return a < b ? a : b;
            //     });
            //     let max = time_array.reduce(function (a, b) {
            //         return a > b ? a : b;
            //     });
            //     let hours = diff_hours(max, min);

            //     if (hours >= 1) {
            //         myChart.options.scales.xAxes[0].time.unit = "hour";
            //         if(hours >= 6){
            //             myChart.options.scales.xAxes[0].time.stepSize = 2;
            //         }
            //         else{
            //             myChart.options.scales.xAxes[0].time.stepSize = 1;
            //         }

            //     } else {
            //         myChart.options.scales.xAxes[0].time.unit = "second";
            //     }
            // }

            // switch (this.periodType) {
            //     case PERIOD.TODAY:
            //     case PERIOD.YESTERDAY:
            //     case PERIOD.CURRENT_WEEK:
            //     case PERIOD.WEEK_1:
            //     case PERIOD.WEEK_2:

            //         break;

            //     default:
            //         break;
            // }

            myChart.update();

        };

        this.updatePropWidget = () => {
            let data_line = [];
            let data_widget = null;
            let el = $("#" + this.editModalId);
            let length_label = el.find(elements.DOMString.class.labelChartLine).length;
            let value_datasource = [];

            el.find(elements.DOMString.class.valueDatasource).each(function () {
                value_datasource.push({
                    id: $(this).attr("service_id"),
                    id: $(this).attr("company_id"),
                    type: $(this).attr("label"),
                    val: $(this).val()
                });
            });




            for (let i = 0; i < length_label; i++) {
                let label_y = el.find(elements.DOMString.class.labelChartLine);
                let rgb = el.find(elements.DOMString.class.colorChartLine);
                let rgba = 'rgba(255,255,255,0.0)';
                let data = null;
                data = {
                    label: $(label_y[i]).val(),
                    backgroundColor: rgba,
                    borderColor: $(rgb[i]).val(),
                    lineTension: 0,
                    pointRadius: 0,
                    borderWidth: 2
                };
                data_line.push(data);
            }

            data_widget = {
                datasources: value_datasource,
                datasets: [...data_line],
            };


            let myChart = this.chart;
            myChart.data.datasets = deepCopy(data_widget.datasets)
            this.datasources = value_datasource;

            this.axis_x = el.find(".axis_x").val();
            this.axis_y = el.find(".axis_y").val();
            myChart.config.options.scales.xAxes[0].scaleLabel.labelString = this.axis_x;
            myChart.config.options.scales.yAxes[0].scaleLabel.labelString = this.axis_y;


            this.sendUpdateSocket();
            this.datasets = deepCopy(data_widget.datasets);

            myChart.update();
            this.updateStatic();
        }

        this.exportToExcel = () => {
            let data = [];
            this.fullChart.data.labels.map((time, index) => {
                let indexTime = index;
                let dataValue = {};

                dataValue['time'] = time;
                this.fullChart.data.datasets.map(_data => {
                    dataValue[_data.label] = _data.data[indexTime];
                });
                data.push(dataValue);
            })
            // const Json2csvParser = require('json2csv').Parser;
            // const fields = Object.keys(data[0]);
            // const opts = {
            //     fields
            // };

            // try {
            //     const parser = new Json2csvParser(opts);
            //     const csv = parser.parse(data);
            //     let blob = new Blob([csv], {type: "text/plain;charset=utf-8"});
            //     FileSaver.saveAs(blob, `report.csv`);
            // } catch (err) {
            //     console.error(err);
            // }

            try {

                json2excel({
                    data,
                    name: 'report',
                    formateDate: 'yyyy/mm/dd HH:MM:ss'
                });

            } catch (e) {
                console.error('export error');
            }
        }

        this.createWidget();
        this.createMutiLine();

    }
}

class MutiLine extends Widget {
    constructor(widget, gridData = null) {
        super(widget, gridData);
        this.axis_x = widget.axis_x;
        this.axis_y = widget.axis_y;
        this.isGroupData = widget.isGroupData;
        this.fullScreenId = widget.fullScreenId;
        this.chart = null;
        this.datasets = widget.datasets;
        this.dateTimeSeries = {
            iot_services: {},
            web_services: {},
        };
        this.firstLoadData = true;

        this.periodType = "Today";
        this.endDate = moment(new Date()).endOf('day').format('YYYY-MM-DD HH:mm:ss');
        this.startDate = moment(new Date()).startOf('day').format('YYYY-MM-DD HH:mm:ss');

        this.isWidgetRealTime = true;


        let time_array = [];

        let options = {
            maintainAspectRatio: false,
            scales: {

                yAxes: [{
                    scaleLabel: {
                        display: true,
                        labelString: 'y-axis'
                    },
                    gridLines: {
                        display: false
                    },
                    ticks: {
                        beginAtZero: true,
                        fontFamily: "'Poppins', 'Kanit', 'sans-serif'",
                        fontStyle: "bold",
                    }
                }],
                xAxes: [{
                    // type: 'realtime',
                    type: 'time',
                    scaleLabel: {
                        display: true,
                        labelString: 'x-axis'
                    },
                    // time: {
                    //     displayFormats: {

                    //        'minute': 'h:mm a',
                    //        'hour': 'hA',
                    //     }
                    // },
                    distribution: 'series',
                    // time: {
                    //     unit: "hour",
                    //     stepSize: 1,
                    // },
                    // time: {
                    //     parser: 'YYYY-MM-DD HH:mm:ss',
                    //     unit: 'day',
                    //     displayFormats: {
                    //        day: 'ddd'
                    //     },
                    //     min: '2017-10-02 18:43:53',
                    //     max: '2017-10-09 18:43:53'
                    // },
                    gridLines: {
                        display: false
                    },
                    // realtime: { // per-axis options
                    //     duration: 20000, // data in the past 20000 ms will be displayed
                    //     delay: 3000, // delay of 1000 ms, so upcoming values are known before plotting a line
                    //     pause: false, // chart is not paused
                    //     ttl: undefined // data will be automatically deleted as it disappears off the chart
                    // },
                    ticks: {
                        fontFamily: "'Poppins', 'Kanit', 'sans-serif'",
                        fontStyle: "bold",
                        // autoSkip: true,
                        // autoSkipPadding: 30,
                        // maxRotation: 90,
                        // padding: 20,
                        // maxTicksLimit: 3,
                        // source: 'auto',


                        callback: function (tick, index, array) {
                            return (index % 3) ? "" : tick;
                        }
                    },

                }],

            },
            // plugins: {
            //     streaming: { // per-chart option
            //         frameRate: 30 // chart is drawn 30 times every second
            //     }
            // },
            legend: {
                labels: {
                    fontFamily: "'Poppins', 'Kanit', 'sans-serif'",
                    fontColor: 'black'
                }
            },
            tooltips: {
                mode: 'nearest',
                intersect: false
            },
            hover: {
                mode: 'nearest',
                intersect: false
            },
        };

        let optionsTimeSeries = {
            maintainAspectRatio: false,
            scales: {
                yAxes: [{
                    gridLines: {
                        display: false
                    },
                    scaleLabel: {
                        display: true,
                        labelString: ''
                    },
                    ticks: {
                        beginAtZero: true,
                        fontFamily: "'Poppins', 'Kanit', 'sans-serif'",
                        fontStyle: "bold",
                    }
                }],
                xAxes: [{
                    type: 'time',
                    scaleLabel: {
                        display: true,
                        labelString: ''
                    },
                    // distribution: 'series',
                    gridLines: {
                        display: false
                    },
                    ticks: {
                        fontFamily: "'Poppins', 'Kanit', 'sans-serif'",
                        fontStyle: "bold",
                        // callback: function(tickValue, index, ticks) {
                        //     console.log(ticks);
                        // }
                    },

                }],

            },
            pan: {
                enabled: true,
                mode: "x",
                speed: 10,
                threshold: 10
            },
            zoom: {
                enabled: true,
                drag: false,
                mode: "x",
                limits: {
                    max: 10,
                    min: 0.5
                }
            },
            legend: {
                labels: {
                    fontFamily: "'Poppins', 'Kanit', 'sans-serif'",
                    fontColor: 'black'
                }
            },
            tooltips: {
                mode: 'nearest',
                intersect: false
            },
            hover: {
                mode: 'nearest',
                intersect: false
            },
        };


        this.createMutiLine = () => {
            if (!this.isAllow) return;

            let ctx = document.getElementById(this.widgetId);
            //console.log(this.datasets);
            let myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    datasets: deepCopy(this.datasets)
                },
                options: options,
                // plugins: [{
                //     beforeInit: function(chart) {
                //        var time = chart.options.scales.xAxes[0].time, // 'time' object reference
                //           timeDiff = moment(time.max).diff(moment(time.min), 'd'); // difference (in days) between min and max date
                //        // populate 'labels' array
                //        // (create a date string for each date between min and max, inclusive)
                //        for (var i = 0; i <= timeDiff; i++) {
                //           var _label = moment(time.min).add(i, 'd').format('YYYY-MM-DD HH:mm:ss');
                //           console.log(_label);
                //           chart.data.labels.push(_label);
                //        }
                //     }
                //  }]
            });
            //myChart.config.options.scales.xAxes[0].realtime.onRefresh = this.updateData(myChart);
            // scaleLabel: {
            //     display: true,
            //     labelString: 'x-axis'
            // },
            myChart.config.options.scales.xAxes[0].scaleLabel.labelString = this.axis_x;
            myChart.config.options.scales.yAxes[0].scaleLabel.labelString = this.axis_y;
            this.chart = myChart;
            this.createFullWidget();
            // if(Datasource.getDatasources() != null){
            //     this.updateFirstData();
            // }
        };

        this.updateFirstData = async () => {
            let myChart = this.chart;
            try {
                if (!this.isGroupData) {

                    let timeLast = null;
                    for (let i = 0; i < myChart.data.datasets.length; i++) {
                        let datasource_daily = await Datasource.getValueFirstData(this.datasources[i]);
                        let path = this.datasources[i].val;
                        datasource_daily.map(_data => {
                            myChart.data.datasets[i].data.push({
                                x: new Date(objectPath.get(_data, 'newDate')),
                                y: objectPath.get(_data, path),
                            })
                            timeLast = objectPath.get(_data, 'newDate');
                        });
                    }
                  
                    this.updateLastUpdate(timeLast);




                    // myChart.data.datasets.map(dataset => {
                    //     let path = this.datasources[i].val;
                    //     datasource_daily.map(_data => {
                    //         // dataset.data.push(objectPath.get(_data, path));


                    //         dataset.data.push({
                    //             x: new Date(objectPath.get(_data, 'date')),
                    //             y: objectPath.get(_data, path),
                    //         })

                    //         // if (i === 0) {
                    //         //     //time_array.push(new Date(objectPath.get(_data, 'date')));
                    //         //     let date = new Date(objectPath.get(_data,'date'));
                    //         //     myChart.data.labels.push(date);
                    //         // }
                    //     });
                    //     i++;
                    // });

                    this.firstLoadData = false;
                } else {
                    dataset.data.push(objectPath.get(Datasource.getDatasources(), this.datasources.replace('[]', i)));
                }
                myChart.update();
            } catch (e) {
                //console.log(e);
            }

        }

        this.updateSocket = (service_id, type) => {

            let myChart = this.chart;
            let d = new Date();
            let apiUpdate = [];
            let timeLast = null;

            this.datasources.map((_data, index) => {
                if (_data.id === service_id && _data.type === type) {
                    apiUpdate.push(index);
                }
            });

            //myChart.data.labels.push(d.toLocaleTimeString());
            //let date = Date.now();
            //myChart.data.labels.push(d);
            apiUpdate.map(_i => {
                if (myChart.data.datasets[_i].data.length > 20) {
                    myChart.data.datasets[_i].data.splice(0, 10);
                } else {
                    myChart.data.datasets[_i].data.splice(0, 1);
                }

                timeLast = Datasource.getValueRealtime(this.datasources[_i], 'newDate');
                myChart.data.datasets[_i].data.push({
                    x: new Date(timeLast),
                    y: Datasource.getValueRealtime(this.datasources[_i])
                })
            })

            // if (myChart.data.labels.length > 10) myChart.data.labels.splice(0, 1);
            myChart.update();
            this.updateLastUpdate(timeLast);
        }

        this.updateData = () => {
            let myChart = this.chart;
            let d = new Date();
            time_array.push(d);
            //myChart.data.labels.push(d.toLocaleTimeString());
            //let date = Date.now();
            let timeLast = null;
            let i = 0;
            myChart.data.labels.push(d);
            myChart.data.datasets.forEach((dataset) => {
                if (dataset.data.length > 20) {
                    dataset.data.splice(0, 10);
                } else {
                    dataset.data.splice(0, 1);
                }

                if (!this.isGroupData) {

                    //dataset.data.push(Datasource.getValueRealtime(this.datasources[i]))
                    timeLast = Datasource.getValueRealtime(this.datasources[_i], 'newDate');
                    dataset.data.push({
                        x: new Date(timeLast),
                        y: Datasource.getValueRealtime(this.datasources[i])
                    });

                    dataset.data.splice(0, 1);
                } else {
                    dataset.data.push(Datasource.getValueRealtime(this.datasources[i], i));
                }
                i++;
            });





            // time_array.splice(0, 1);
            // if (time_array.length > 0) {
            //     let min = time_array.reduce(function (a, b) {
            //         return a < b ? a : b;
            //     });
            //     let max = time_array.reduce(function (a, b) {
            //         return a > b ? a : b;
            //     });
            //     let hours = diff_hours(max, min);
            //     if (hours >= 1) {
            //         myChart.options.scales.xAxes[0].time.unit = "hour";
            //         if(hours >= 6){
            //             myChart.options.scales.xAxes[0].time.stepSize = 2;
            //         }
            //         else{
            //             myChart.options.scales.xAxes[0].time.stepSize = 1;
            //         }

            //     } else {
            //         myChart.options.scales.xAxes[0].time.unit = "second";
            //     }
            // }
            if (myChart.data.labels.length > 10) myChart.data.labels.splice(0, 1);
            myChart.update();
            this.updateLastUpdate(timeLast);
        };

        this.createFullWidget = () => {
            let ctx = document.getElementById(this.timeSeries);
            // state.selectItemId = this.itemId;
            let myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    datasets: deepCopy(this.datasets)
                },
                options: optionsTimeSeries
            });


            myChart.config.options.scales.xAxes[0].scaleLabel.labelString = this.axis_x;
            myChart.config.options.scales.yAxes[0].scaleLabel.labelString = this.axis_y;
            this.fullChart = myChart;
        };


        this.updatePropWidget = () => {
            let data_line = [];
            let data_widget = null;
            let el = $("#" + this.editModalId);
            let length_label = el.find(elements.DOMString.class.labelChartLine).length;
            let value_datasource = [];

            el.find(elements.DOMString.class.valueDatasource).each(function () {
                value_datasource.push({
                    id: $(this).attr("service_id"),
                    company_id: $(this).attr("company_id"),
                    type: $(this).attr("label"),
                    val: $(this).val()
                });
            });


            for (let i = 0; i < length_label; i++) {
                let label_y = el.find(elements.DOMString.class.labelChartLine);
                let rgb = el.find(elements.DOMString.class.colorChartLine);
                let rgba = 'rgba(255,255,255,0.0)';
                let data = null;
                data = {
                    label: $(label_y[i]).val(),
                    backgroundColor: rgba,
                    borderColor: $(rgb[i]).val(),
                    lineTension: 0,
                    pointRadius: 0,
                    borderWidth: 2
                };
                data_line.push(data);
            }

            data_widget = {
                datasources: value_datasource,
                datasets: [...data_line],
            };

            console.log(value_datasource);

            let myChart = this.chart;
            myChart.data.datasets = deepCopy(data_widget.datasets)
            this.datasources = value_datasource;

            this.axis_x = el.find(".axis_x").val();
            this.axis_y = el.find(".axis_y").val();
            myChart.config.options.scales.xAxes[0].scaleLabel.labelString = this.axis_x;
            myChart.config.options.scales.yAxes[0].scaleLabel.labelString = this.axis_y;

            let fullChart = this.fullChart;
            fullChart.data.datasets = deepCopy(data_widget.datasets)
            fullChart.config.options.scales.xAxes[0].scaleLabel.labelString = this.axis_x;
            fullChart.config.options.scales.yAxes[0].scaleLabel.labelString = this.axis_y;


            this.sendUpdateSocket();
            this.datasets = deepCopy(data_widget.datasets);

            myChart.update();
            fullChart.update();
            this.updateFirstData();
        }


        let getDataTimeSeries = async (datasource) => {
            let url = "";
            let param = "";

            //console.log(this.startDate, this.endDate);
            let list = Datasource.findListDatasource(datasource.id, datasource.type);
            if (list) {
                if (datasource.type == "iot_services") {
                    url = `http://203.151.136.15/node/iotService/getInputIoTData_Time`
                    param = {
                        tableDW_name: list.iot_name_DW,
                        start_date: this.startDate,
                        end_date: this.endDate,
                    };
                } else if (datasource.type == "web_services") {
                    url = '/js/company/test-api-static.json';
                    param = {};
                }

                let data = await axios.post(url, param)
                return data.data;
            }

            // await $.ajax({
            //     url: '/js/company/test-api-static.json',
            //     data: {},
            //     headers: {
            //         authorization: 'bearer ' + getCookie('token'),
            //     },
            //     success: (res, textStatus, xhr) => {
            //         checkAuthRes(xhr)
            //         this.dateTimeSeries = res;
            //     },
            //     error: (res) => {

            //     }
            // })
        }

        this.updateTimeSeries = async () => {
            let datasources = this.findUniqueDatasources();
            for (let i = 0; i < datasources.length; i++) {
                let data = await getDataTimeSeries(datasources[i]);
                this.dateTimeSeries[datasources[i].type][datasources[i].id] = data
            }

            let myChart = this.fullChart;
            let i = 0;

            myChart.data.labels = [];
            myChart.data.datasets.forEach((dataset) => {
                dataset.data = [];
            });

            let time_array = [];

            myChart.data.datasets.forEach((dataset) => {
                if (!this.isGroupData) {
                    let datasource = this.dateTimeSeries[this.datasources[i].type][this.datasources[i].id];
                    datasource.map(_d => {
                        dataset.data.push({
                            x: new Date(objectPath.get(_d, 'newDate')),
                            y: objectPath.get(_d, this.datasources[i].val)
                        })
                    })
                } else {

                }
                i++;
            });





            // if (time_array.length > 0) {
            //     let min = time_array.reduce(function (a, b) {
            //         return a < b ? a : b;
            //     });
            //     let max = time_array.reduce(function (a, b) {
            //         return a > b ? a : b;
            //     });
            //     let hours = diff_hours(max, min);

            //     if (hours >= 1) {
            //         myChart.options.scales.xAxes[0].time.unit = "hour";
            //         if(hours >= 6){
            //             myChart.options.scales.xAxes[0].time.stepSize = 2;
            //         }
            //         else{
            //             myChart.options.scales.xAxes[0].time.stepSize = 1;
            //         }

            //     } else {
            //         myChart.options.scales.xAxes[0].time.unit = "second";
            //     }
            // }

            // switch (this.periodType) {
            //     case PERIOD.TODAY:
            //     case PERIOD.YESTERDAY:
            //     case PERIOD.CURRENT_WEEK:
            //     case PERIOD.WEEK_1:
            //     case PERIOD.WEEK_2:

            //         break;

            //     default:
            //         break;
            // }

            myChart.update();

        };

        this.exportToExcel = () => {
            let dataExcel = [];
            let chart = null;
            if (this.isWidgetRealTime) {
                chart = this.chart;
            } else {
                chart = this.fullChart;
            }


            chart.data.datasets.map(_data => {
                let {
                    label,
                    data
                } = _data;
                data.map(_dataChart => {
                    let dataValue = {};
                    dataValue['label'] = label;
                    dataValue[chart.config.options.scales.xAxes[0].scaleLabel.labelString] = _dataChart.x;
                    dataValue[chart.config.options.scales.yAxes[0].scaleLabel.labelString] = _dataChart.y;
                    dataExcel.push(dataValue);
                });


            });


            // chart.data.labels.map((time, index) => {
            //     let indexTime = index;
            //     let dataValue = {};

            //     dataValue['time'] = time;
            //     this.fullChart.data.datasets.map(_data => {
            //         dataValue[_data.label] = _data.data[indexTime];
            //     });
            //     data.push(dataValue);
            // })

            //console.log(data);
            let data = dataExcel

            try {

                json2excel({
                    data,
                    name: 'report',
                    formateDate: 'yyyy/mm/dd HH:MM:ss'
                });

            } catch (e) {
                console.error('export error');
            }
        }




        if (this.type === WIDGET_TYPE.MUTILINE) {
            this.createWidget();
            this.createMutiLine();
        }

    }
}

class ChartTextLine extends Widget {
    constructor(widget, gridData = null) {
        super(widget, gridData);
        this.fullScreenId = widget.fullScreenId;
        this.unit = widget.unit;
        this.rgb = widget.rgb;
        this.firstLoadData = true;

        const optionChartLineNotLable = {
            maintainAspectRatio: false,
            responsive: true,
            scales: {
                yAxes: [{
                    display: false
                }],
                xAxes: [{
                    display: false
                }]
            },
            legend: {
                display: false
            },
            elements: {
                point: {
                    radius: 0
                },
                line: {
                    tension: 0
                }
            },
            layout: {
                padding: {
                    left: 0,
                    right: 0,
                    top: 0,
                    bottom: 30
                }
            },
            stepsize: 100
        };


        this.createTextLine = () => {
            if (!this.isAllow) return;
            let ctx = document.getElementById(this.widgetId);
            let myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [{
                        label: '',
                        data: [],
                        backgroundColor: [
                            'rgba(255, 255, 255, 0)',
                        ],
                        borderColor: [
                            this.rgb
                        ],
                        borderWidth: 2
                    }]
                },
                options: optionChartLineNotLable
            });
            this.chart = myChart;
            return myChart;
        };

        this.createFullWidget = () => {
            let ctx = document.getElementById(this.fullScreenId);
            let myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [{
                        label: '',
                        data: [],
                        backgroundColor: [
                            'rgba(255, 255, 255, 0)',
                        ],
                        borderColor: [
                            this.rgb
                        ],
                        borderWidth: 2
                    }]
                },
                options: optionChartLineNotLable
            });
        };


        this.updatePropWidget = () => {
            let el = $("#" + this.editModalId);

            let rgb = el.find(elements.DOMString.id.rgb).val();
            let elValueDatasource = el.find(elements.DOMString.class.valueDatasource);

            let value_datasource = [{
                id: elValueDatasource.attr('service_id'),
                company_id: elValueDatasource.attr('company_id'),
                type: elValueDatasource.attr('label'),
                val: elValueDatasource.val()
            }];

            let myChart = this.chart;
            myChart.data.datasets[0].borderColor = [];
            myChart.data.labels = [];
            myChart.data.datasets[0].data = [];
            myChart.data.datasets[0].borderColor.push(rgb)
            this.rgb = rgb;
            this.datasources = value_datasource
            this.sendUpdateSocket();
            myChart.update();
            this.updateFirstData();
        };

        this.updateFirstData = async () => {
            let myChart = this.chart;
            let value = null;
            let dataLast = null;
            try {
                if (!this.isGroupData) {

                    let timeLast = null;
                    for (let i = 0; i < myChart.data.datasets.length; i++) {
                        let datasource_daily = await Datasource.getValueFirstData(this.datasources[i]);
                        let path = this.datasources[i].val;
                        datasource_daily.map(_data => {
                            dataLast = objectPath.get(_data, path);
                            timeLast = objectPath.get(_data, 'newDate');
                            myChart.data.labels.push(new Date(timeLast));
                            myChart.data.datasets[i].data.push(objectPath.get(_data, path));
                        });
                    }

                    value = this.widgetId;
                    value = value.replace(this.type.toLowerCase(), "value");
                    $("#" + value).html(dataLast);
                    this.updateLastUpdate(timeLast);

                    this.firstLoadData = false;
                } else {
                    dataset.data.push(objectPath.get(Datasource.getDatasources(), this.datasources.replace('[]', i)));
                }
                myChart.update();
            } catch (e) {
                //console.log(e);
            }

        }

        this.updateData = () => {
            let value = this.widgetId;
            value = value.replace(this.type.toLowerCase(), "value");
            let timeLast = null
            let myChart = this.chart;
            //let data = Math.floor(100 + Math.random() * 900);
            let d = new Date();
            myChart.data.labels.push(d.toLocaleTimeString());
            myChart.data.datasets.forEach((dataset) => {
                if (dataset.data.length > 10) {
                    dataset.data.splice(0, 1);
                    //myChart.data.labels.splice(0, 1);
                }

                timeLast = Datasource.getValueRealtime(this.datasources[0], 'newDate');
                let data = Datasource.getValueRealtime(this.datasources[0]);

                dataset.data.push(data);
                $("#" + value).html(data);
            });

            if (myChart.data.labels.length > 10) myChart.data.labels.splice(0, 1);

            myChart.update();
            this.updateLastUpdate(timeLast);
        };

        this.liveData = () => {
            let value = this.widgetId;
            value = value.replace(this.type, "value_");
            let myChart = this.chart;
            let d = new Date();
            myChart.data.labels.push(d.toLocaleTimeString());
            myChart.data.datasets.forEach((dataset) => {
                if (dataset.data.length > 10) {
                    dataset.data.splice(0, 1);
                    //myChart.data.labels.splice(0, 1);
                }
                let data = dataset.data[dataset.data.length - 1];
                dataset.data.push(data);
            });

            if (myChart.data.labels.length > 10) myChart.data.labels.splice(0, 1);

            myChart.update();
            //this.updateLastUpdate();
        };

        if (this.type === WIDGET_TYPE.TEXTLINE) {
            this.createWidget();
            this.createTextLine();
        }
    }
}

class Radar extends Widget {
    constructor(widget, gridData = null) {
        super(widget, gridData);

        this.datasets = widget.datasets;
        this.labels = widget.labels;
        this.label = widget.label;
        this.color = widget.color;
        this.radar = null;

        this.createWidget();

        let config = {
            type: 'radar',
            data: {
                labels: [],
                datasets: []
            },
            options: {
                maintainAspectRatio: false,
                legend: {
                    position: 'top',
                },
                title: {
                    display: true,
                },
                scale: {
                    ticks: {
                        beginAtZero: true
                    }
                }
            }
        };

        this.createRadar = () => {
            if (!this.isAllow) return;
            let ctx = document.getElementById(this.widgetId);
            let myRadarChart = new Chart(ctx, config);
            let i = 0;
            myRadarChart.data.labels = this.labels;
            myRadarChart.data.datasets = deepCopy(this.datasets);
            myRadarChart.data.datasets.forEach((dataset) => {
                dataset.label = this.label[i];
                dataset.backgroundColor = convertHex(this.color[i], 20);
                dataset.borderColor = this.color[i];
                dataset.pointBackgroundColor = this.color[i];
                dataset.data = [];
                i++;
            });
            myRadarChart.update();
            this.radar = myRadarChart;
            this.updateData();
        };

        this.updateData = () => {
            let i = 0;

            let timeLast = null;
            this.radar.data.datasets.forEach((dataset) => {
                dataset.data = [];
                this.radar.data.labels.map(k => {
                    timeLast = Datasource.getValueRealtime(this.datasources[i], 'newDate');
                    let data = Datasource.getValueRealtime(this.datasources[i]);
                    dataset.data.push(data);
                    i++;
                });
            });
            this.radar.update();
            this.updateLastUpdate(timeLast);
        };

        this.updatePropWidget = () => {
            let datasets = [];
            let labels = [];
            let label = [];
            let value_datasource = [];
            let color = [];

            state.editModalIdSelect.find(elements.DOMString.class.radarLabel).each(function () {
                labels.push($(this).val());
            });

            state.editModalIdSelect.find(elements.DOMString.class.formRadarValue).each(function () {
                datasets.push({});
                label.push($(this).find(elements.DOMString.class.labelRadar).val());

                $(this).find(elements.DOMString.class.valueDatasource).each(function () {
                    value_datasource.push({
                        id: $(this).attr('service_id'),
                        company_id: $(this).attr('company_id'),
                        type: $(this).attr('label'),
                        val: $(this).val(),
                    });
                });

                $(this).find(elements.DOMString.class.radarColor).each(function () {
                    color.push($(this).val());
                });

            });

            this.datasources = value_datasource;
            this.labels = labels;
            this.label = label;
            this.color = color;
            this.datasets = datasets;

            let i = 0;
            this.radar.data.labels = this.labels;
            this.radar.data.datasets = deepCopy(datasets);
            this.radar.data.datasets.forEach((dataset) => {
                dataset.label = this.label[i];
                dataset.backgroundColor = convertHex(this.color[i], 20);
                dataset.borderColor = this.color[i];
                dataset.pointBackgroundColor = this.color[i];
                dataset.data = [];
                i++;
            });
            this.radar.update()
            this.updateData();

        }

        this.exportToExcel = () => {
            let dataExcel = [];
            let chart = this.radar;

            console.log(chart.data.datasets);
            let i = 0;
            chart.data.datasets.map(_data => {
                let {
                    data,
                    label
                } = _data;
                let dataValue = {};
                dataValue['label'] = label;
                data.map(_dataChart => {
                    dataValue[this.labels[i]] = _dataChart
                    i++;
                });
                i = 0;
                dataExcel.push(dataValue);


            });


            let data = dataExcel

            try {

                json2excel({
                    data,
                    name: 'report',
                    formateDate: 'yyyy/mm/dd HH:MM:ss'
                });

            } catch (e) {
                console.error('export error');
            }
        }

        this.createRadar();
    }
}

class RadarEx {
    constructor() {

        let colorEx = {
            0: 'rgb(255, 99, 132)',
            1: 'rgb(255, 159, 64)',
            2: 'rgb(255, 205, 86)',
            3: 'rgb(75, 192, 192)',
            4: 'rgb(54, 162, 235)',
            5: 'rgb(153, 102, 255)',
        };

        let config = {
            type: 'radar',
            data: {
                labels: [],
                datasets: []
            },
            options: {
                legend: {
                    position: 'top',
                },
                title: {
                    display: true,
                },
                scale: {
                    ticks: {
                        beginAtZero: true
                    }
                }
            }
        };

        this.createRadarExample = () => {
            if (radarEx === null) {
                let ctx = document.getElementById("example_radar");
                let myRadarChart = new Chart(ctx, config);
                radarEx = myRadarChart;
                this.updateRadarExample();
            }
        };

        let removeRaderExample = () => {
            radarEx.data.labels = [];
            radarEx.data.datasets = [];
        };

        this.updateRadarExample = () => {
            let lables = [];
            let lable = [];
            let data = [];
            let colorInput = [];
            let color = Chart.helpers.color;


            $(".radar-labels:visible").each(function () {
                lables.push($(this).val());
                data.push(getRandomInt(0, 50));
            });


            removeRaderExample();

            $(".label-radar:visible").each(function () {
                lable.push($(this).val());
                radarEx.data.datasets.push({});
            });

            $(".radar-color").each(function () {
                colorInput.push($(this).val());
            });

            // dataset.backgroundColor = color(colorEx[colorIndex]).alpha(0.2).rgbString();
            // dataset.borderColor = colorEx[colorIndex];
            // dataset.pointBackgroundColor = colorEx[colorIndex];

            let i = 0;
            radarEx.data.labels = lables;
            radarEx.data.datasets.forEach((dataset) => {
                dataset.label = lable[i];
                dataset.backgroundColor = convertHex(colorInput[i], 20);
                dataset.borderColor = colorInput[i];
                dataset.pointBackgroundColor = colorInput[i];
                dataset.data = data;
                data = data.map(n => {
                    return n + getRandomInt(0, 10);
                });
                i++;
            });
            radarEx.update();
        };
    }
}

class Gauges extends Widget {
    constructor(widget, gridData = null) {
        super(widget, gridData);
        this.fullScreenId = widget.fullScreenId;
        this.textId = widget.textId;
        this.gaugeWidget = null;
        this.opts = widget.opts;
        this.limitMax = widget.limitMax ? widget.limitMax : 100;
        this.limitMin = widget.limitMin ? widget.limitMin : 0;
        this.unit = widget.unit;

        this.createWidget();

        this.createGages = () => {
            if (!this.isAllow) return;
            this.gaugeWidget = new JustGage({
                id: this.widgetId,
                value: 0,
                min: this.limitMin,
                max: this.limitMax,
                symbol: ' ' + this.unit,
                relativeGaugeSize: true,
                titlePosition: "below"
            });
            $("#" + this.widgetId).height($("#" + this.widgetId).height() - 5);
            $("#" + this.widgetId).addClass('container');


            this.updateData();

            // let target = document.getElementById(this.widgetId); // your canvas element
            // let gauge = new Gauge(target).setOptions(this.opts); // create sexy gauge!
            // gauge.maxValue = this.limitMax; // set max gauge value
            // gauge.setMinValue(0);  // Prefer setter over gauge.minValue = 0
            // gauge.animationSpeed = 32; // set animation speed (32 is default value)
            // gauge.set(0); // set actual value
            // this.gaugeWidget = gauge;
            // this.updateData();
        };

        // this.updateSocket = (apiName) => {

        //     if(apiName === this.datasource[0].split('.')[0]){
        //         let data = Datasource.getValueRealtime(this.datasource[0]);

        //         this.gaugeWidget.refresh(data ? data : 0);
        //         this.updateLastUpdate();
        //     }
        // };

        this.updateData = () => {
            //getRandomInt(Number(this.limitMin), Number(this.limitMax))

            let data = Datasource.getValueRealtime(this.datasources[0]);

            this.gaugeWidget.refresh(data ? data : 0);
            let timeLast = Datasource.getValueRealtime(this.datasources[0], 'newDate');
            this.updateLastUpdate(timeLast);

            // let data = Math.floor(Math.random() * (100 - 1));
            // $("#" + this.textId).html(data);
            // this.gaugeWidget.set(data);
            // this.updateLastUpdate();


        };

        this.createGages();
    }
}

class Map extends Widget {
    constructor(widget, gridData = null) {
        super(widget, gridData);
        this.isGroupData = widget.isGroupData;
        this.markers = null;
        this.start = widget.start;
        this.end = widget.end;
        this.fullScreenId = widget.fullScreenId;
        this.myMap = null;

        this.createWidget();

        this.createMap = () => {
            if (!this.isAllow) return;
            let mymap;
            let mapid = this.widgetId;
            let height = $("#" + this.itemId).height() - 100;
            $('#' + mapid).css('height', height);
            $('#' + mapid).css('width', 'auto');

            mymap = L.map(mapid, {
                dragging: true,
                zoomControl: true,
                scrollWheelZoom: false,
                zoomAnimation: false,
                renderer: L.canvas(),
            });


            $.getJSON('https://raw.githubusercontent.com/apisit/thailand.json/master/thailand.json').then(function (geoJSON) {
                var osm = new L.TileLayer.BoundaryCanvas("https://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}", {
                    boundary: geoJSON,
                    minZoom: 5,
                    maxZoom: 9,
                    attribution: '&copy; Tiles &copy; Esri &mdash; Esri, DeLorme, NAVTEQ'
                });
                mymap.addLayer(osm);
                var ukLayer = L.geoJSON(geoJSON);
                mymap.fitBounds(ukLayer.getBounds());
            }).then(() => {

            });

            function disableGrid() {
                let grid = $('.grid-stack').data('gridstack');
                grid.enableMove(false);
            }

            function enableGrid() {
                let grid = $('.grid-stack').data('gridstack');
                grid.enableMove(true);
            }

            $('.grid-stack').on('change', function (e, items) {
                if (mymap != null) {
                    mymap.invalidateSize(true);
                }
            });

            // mymap.on('mousemove', disableGrid);
            // mymap.on('mouseout', enableGrid);

            this.myMap = mymap;
            //this.updateData();
        };

        this.updateData = () => {
            this.myMap.invalidateSize(true);
            if (this.markers) {
                this.markers.clearLayers();
            }
            let heat = [];
            if (!this.isGroupData) {
                this.markers = L.layerGroup().addTo(this.myMap);
                this.datasources.map(data => {
                    let datasource = Datasource.getDatasourceRealtime(data.id, data.type);
                    console.log(data)
                    let lat = objectPath.get(datasource, data.latitude) //objectPath.get(Datasource.getDatasources(), data.latitude);
                    let lon = objectPath.get(datasource, data.longitude) //objectPath.get(Datasource.getDatasources(), data.longitude);
                    let label = data.label;
                    let value = objectPath.get(datasource, data.value) //objectPath.get(Datasource.getDatasources(), data.value);

                    L.marker([lat, lon]).addTo(this.markers).bindPopup(`${label} : ${value}`);



                    // heat.push([lat, lon, value  / 100]);


                    // L.heatLayer(heat, {
                    //     radius: 75,
                    // }).addTo(this.markers);

                });

            } else {
                let datasource = objectPath.get(Datasource.getDatasources(), this.datasources.groupData);
                for (let i in datasource) {
                    let lat = objectPath.get(Datasource.getDatasources(), this.datasources.latitude.replace('[]', i));
                    let lon = objectPath.get(Datasource.getDatasources(), this.datasources.longitude.replace('[]', i));
                    let label = objectPath.get(Datasource.getDatasources(), this.datasources.label.replace('[]', i));
                    let value = objectPath.get(Datasource.getDatasources(), this.datasources.value.replace('[]', i));
                    L.marker([lat, lon]).addTo(this.myMap).bindPopup(`${label} : ${value}`);
                    heat.push([lat, lon, value / 100]);

                }
                // L.heatLayer(heat, {
                //     radius: 75
                // }).addTo(this.myMap);
            }

            // $.ajax({
            //     dataType: "json",
            //     url: '/js/company/test-api.json',
            //     async: false,
            //     success: function (data) {
            //         var heat = [];
            //         var WeatherForecasts = data.WeatherForecasts;
            //         for (let i in WeatherForecasts) {
            //             L.marker([WeatherForecasts[i].location.lat, WeatherForecasts[i].location.lon]).addTo(mymap).bindPopup(WeatherForecasts[i].location.province + " " + "อ ุณหภูมิที่ระดับพื้นผิว : " + WeatherForecasts[i].forecasts[1].data.tc + " °C");
            //             heat.push([WeatherForecasts[i].location.lat, WeatherForecasts[i].location.lon, WeatherForecasts[i].forecasts[1].data.tc / 100]);

            //         }
            //         L.heatLayer(heat, {
            //             radius: 75
            //         }).addTo(mymap);
            //     }
            // });
            this.updateLastUpdate();
        }

        this.updatePropWidget = () => {
            let datasource = [];

            state.editModalIdSelect.find(elements.DOMString.class.valueOfMap).each(function () {
                let lat = $(this).find(".latitude").val();
                let long = $(this).find(".longitude").val();
                let value = $(this).find(".value-map").val();
                let label = $(this).find(".label-map").val();

                datasource.push({
                    id: $(this).find(".latitude").attr('service_id'),
                    company_id: $(this).find(".latitude").attr('company_id'),
                    type: $(this).find(".latitude").attr('label'),
                    latitude: lat,
                    longitude: long,
                    value: value,
                    label: label
                });


            })
            console.log(datasource);
            this.datasources = datasource;
            this.updateData();
        }

        this.createFullWidget = () => {
            let mymap;
            let mapid = this.fullScreenId;
            let height = "450px";
            $('#' + mapid).css('height', height);
            $('#' + mapid).css('width', 'auto');

            mymap = L.map(mapid, {
                dragging: true,
                zoomControl: true,
                scrollWheelZoom: false,
                zoomAnimation: false,
            });

            $.getJSON('https://raw.githubusercontent.com/apisit/thailand.json/master/thailand.json').then(function (geoJSON) {
                var osm = new L.TileLayer.BoundaryCanvas("https://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}", {
                    boundary: geoJSON,
                    minZoom: 5,
                    maxZoom: 9,
                    attribution: '&copy; Tiles &copy; Esri &mdash; Esri, DeLorme, NAVTEQ'
                });
                mymap.addLayer(osm);
                var ukLayer = L.geoJSON(geoJSON);
                mymap.fitBounds(ukLayer.getBounds());


            }).then(() => {
                setTimeout(() => {
                    mymap.invalidateSize(true);
                    $.ajax({
                        dataType: "json",
                        url: '/js/company/test-api.json',
                        headers: {
                            authorization: 'bearer ' + getCookie('token'),
                        },
                        async: false,
                        success: function (data) {
                            var heat = [];
                            var WeatherForecasts = data.WeatherForecasts;
                            for (let i in WeatherForecasts) {
                                L.marker([WeatherForecasts[i].location.lat, WeatherForecasts[i].location.lon]).addTo(mymap).bindPopup(WeatherForecasts[i].location.province + " " + "อ ุณหภูมิที่ระดับพื้นผิว : " + WeatherForecasts[i].forecasts[1].data.tc + " °C");
                                heat.push([WeatherForecasts[i].location.lat, WeatherForecasts[i].location.lon, WeatherForecasts[i].forecasts[1].data.tc / 100]);

                            }
                            L.heatLayer(heat, {
                                radius: 75
                            }).addTo(mymap);
                        }
                    });

                }, 1000);
            });
        };

        this.exportToExcel = () => {
            let data = [];
            this.datasources.map(_data => {
                let datasource = Datasource.getDatasourceRealtime(_data.id, _data.type);
                let dataExcel = {};
                dataExcel["latitude"] = objectPath.get(datasource, _data.latitude)
                dataExcel["longitude"] = objectPath.get(datasource, _data.longitude)
                dataExcel["label"] = _data.label;
                dataExcel["value"] = objectPath.get(datasource, _data.value)
                data.push(dataExcel)
            });


            try {
                json2excel({
                    data,
                    name: 'report',
                    formateDate: 'yyyy/mm/dd HH:MM:ss'
                });

            } catch (e) {
                console.error('export error');
            }
        }

        this.createMap();
    }
}

class Table extends Widget {
    constructor(widget, gridData = null) {
        super(widget, gridData);
        this.table = widget.table;
        this.static = null;

        this.createWidget();

        this.createTable = () => {
            if (!this.isAllow) return;
            this.el = $('#' + this.widgetId);
            this.el.find('thead').append('<tr></tr>');
            for (let i = 0; i < this.table.col_labels.length; i++) {
                this.el.find('thead tr').append(`<th>${this.table.col_labels[i]}</th>`);
            };

            for (let i = 0; i < this.table.rows.length; i++) {
                let rows = '';
                for (let j = 0; j < this.table.col_labels.length; j++) {
                    if (j === 0) {
                        rows += `<td>${this.table.rows[i].label}</td>`;
                    } else {
                        rows += `<td></td>`;
                    }
                }
                this.el.find('tbody').append(`<tr>${rows}</tr>`);
            };

            $('#' + this.widgetId).parent().addClass('table-responsive');
            $('#' + this.widgetId).css({
                "width": "100%",
                "overflow-x": "auto",
                "overflow-y": "auto"
            });

            this.updateData();
        }


        this.updateData = () => {
            let timeLast = null
            try {
                let i = 0;
                let rows = this.table.rows;
                this.el.find('tbody tr').each(function () {
                    let j = 0;
                    $(this).find('td').not(':first').each(function () {
                        timeLast = Datasource.getValueRealtime(rows[i].data[j], 'newDate');
                        let data = Datasource.getValueRealtime(rows[i].data[j]);
                        $(this).html(data);
                        j++;
                    });
                    i++;
                });
                this.updateLastUpdate(timeLast);
            } catch (error) {

            }
        }

        this.updatePropWidget = (tableEx) => {
            this.table = tableEx.getValue();
            this.datasources = tableEx.getValue().datasources;
            $('#' + this.widgetId).find('thead').empty();
            $('#' + this.widgetId).find('tbody').empty();
            this.createTable();
        }

        this.exportToExcel = () => {
            let head = [];
            let data = [];
            this.el.find('thead tr th').each(function () {
                head.push($(this).html());
            });

            let i = 0;
            this.el.find('tbody tr').each(function () {
                let dataExcel = {};
                $(this).find('td').each(function () {
                    dataExcel[head[i]] = $(this).html();
                    i++;
                })
                data.push(dataExcel);
                i = 0;
            });

            console.log(data)
            try {

                json2excel({
                    data,
                    name: 'report',
                    formateDate: 'yyyy/mm/dd HH:MM:ss'
                });

            } catch (e) {
                console.error('export error');
            }
        };

        this.createTable();
    }
}


class TableStatic extends Widget {
    constructor(widget, gridData = null) {
        super(widget, gridData);
        this.table = widget.table;
        this.static = null;

        let self = this;

        this.createWidget();

        this.createTable = async () => {
            if (!this.isAllow) return;
            await getDataStatic()
            this.el = $('#' + this.widgetId);
            this.el.find('thead').append('<tr></tr>');
            for (let i = 0; i < this.table.col_labels.length; i++) {
                this.el.find('thead tr').append(`<th>${this.table.col_labels[i]}</th>`);
            };

            for (let k = 0; k < this.static.length; k++) {
                let rows = '';
                let date = null;
                for (let i = 0; i < this.table.rows.length; i++) {
                    rows += `<tr class="table-${k}">`;
                    for (let j = 0; j < this.table.col_labels.length; j++) {
                        if (j === 0) {
                            rows += `<td>${this.table.rows[i].label}</td>`;
                        } else {
                            let data = objectPath.get(this.static[k].data, this.table.rows[i].data[j - 1].val);
                            date = objectPath.get(this.static[k], 'date');
                            rows += `<td>${data}</td>`;
                        }
                    }
                    rows += '</tr>';
                }

                this.el.find('tbody').append(
                    `
                <tr class="text-left bg-light">
                    <td colspan="${this.table.col_labels.length}"><b>${date}</b> 
                    <i class="fas fa-angle-down table-dropdown" bind="table-${k}" style="float: right;"></i></td>
                </tr>
                ${rows}
                `);
            }



            $('#' + this.widgetId).parent().addClass('table-responsive');
            $('#' + this.widgetId).parent().css({
                "overflow-x": "auto",

            });
            // $('#' + this.widgetId).css({
            //     "width": "100%",
            // });

            $("#" + this.widgetId).on('click', '.table-dropdown', function () {
                let trToggle = $("#" + self.widgetId).find("." + $(this).attr('bind'));

                if ($(this).hasClass('fa-angle-down')) {
                    $(this).removeClass('fa-angle-down');
                    $(this).addClass('fa-angle-up')
                } else {
                    $(this).removeClass('fa-angle-up');
                    $(this).addClass('fa-angle-down')
                }

                trToggle.toggle();

            });

            //this.updateStatic();
        }

        let getDataStatic = async () => {
            await $.ajax({
                url: '/js/company/test-aggr.json',
                data: {},
                headers: {
                    authorization: 'bearer ' + getCookie('token'),
                },
                success: (res, textStatus, xhr) => {
                    checkAuthRes(xhr)
                    this.static = res;

                },
                error: (res) => {

                }
            })
        }


        this.updateStatic = async () => {
            await getDataStatic()
            try {
                let i = 0;

                let rows = this.table.rows;
                this.el.find('tbody tr').each(function () {
                    let j = 0;
                    $(this).find('td').not(':first').each(function () {
                        console.log(self.static);
                        let data = objectPath.get(self.static[i].data, rows[i].data[j].val);

                        $(this).html(data);
                        j++;
                    });
                    i++;
                });
                this.updateLastUpdate();
            } catch (error) {
                console.log(error);
            }
        }

        this.updatePropWidget = (tableEx) => {
            this.table = tableEx.getValue();
            this.datasources = tableEx.getValue().datasources;
            $('#' + this.widgetId).find('thead').empty();
            $('#' + this.widgetId).find('tbody').empty();
            this.createTable();
        }

        this.exportToExcel = () => {
            let head = [];
            let data = [];
            this.el.find('thead tr th').each(function () {
                head.push($(this).html());
            });

            let i = 0;
            this.el.find('tbody tr').each(function () {
                let dataExcel = {};
                $(this).find('td').each(function () {
                    dataExcel[head[i]] = $(this).html();
                    i++;
                })
                data.push(dataExcel);
                i = 0;
            });

            try {

                json2excel({
                    data,
                    name: 'report',
                    formateDate: 'yyyy/mm/dd HH:MM:ss'
                });

            } catch (e) {
                console.error('export error');
            }
        };

        this.createTable();
    }
}

class TextValue extends Widget {
    constructor(widget, gridData = null) {
        super(widget, gridData);
        this.textValue = widget.textValue;
        this.unit = widget.unit;
        this.rgb = widget.rgb;

        this.createWidget();

        this.createTextValue = () => {
            if (!this.isAllow) return;
            this.updateData();
        };

        this.updatePropWidget = () => {
            let el = $("#" + this.editModalId);
            let elValueDatasource = el.find(elements.DOMString.class.valueDatasource);
            let value_datasource = [{
                id: elValueDatasource.attr('service_id'),
                company_id: elValueDatasource.attr('company_id'),
                type: elValueDatasource.attr('label'),
                val: elValueDatasource.val(),
            }];
            this.datasources = value_datasource;
            this.sendUpdateSocket();
            this.updateData();
        }

        this.updateData = () => {
            //let data = Math.floor(Math.random() * (100 - 1));
            let data = Datasource.getValueRealtime(this.datasources[0])
            $("#" + this.widgetId).html(data);
            let timeLast = Datasource.getValueRealtime(this.datasources[0], 'newDate');
            this.updateLastUpdate(timeLast);
        };

        this.createTextValue();
    }
}

class TextBox extends Widget {
    constructor(widget, gridData = null) {
        super(widget, gridData);
        this.textbox = widget.textbox;
        this.fontsize = widget.fontsize;

        this.createWidget();

        this.createTextBox = () => {
            // console.log($("#" + this.widgetId));
            $("#" + this.widgetId).html(this.textbox);
            $("#" + this.widgetId).css({
                "font-size": this.fontsize + "px"
            });
        };

        this.createTextBox();
    }
}

var widgetList = [];





class Datasources {
    constructor() {
        let listDatasource = null;

        let webservices = null;

        let datasources = {
            web_services: {
                realtime: {},
                firstData: {},
            },
            iot_services: {
                realtime: {},
                firstData: {},
            }
        };

        let ex = {
            web_services: {
                realtime: {},
                static: {},
                firstData: {},
            },
            iot_services: {
                realtime: {},
                static: {},
                firstData: {},
            }
        }


        let apiSelect = 'datasources';

        let keyInput = [];

        let dataAccess = [];

        let modalEdit = null;

        let apiCount = 0;

        let self = this;

        // let getWebServices = async () => {        
        //     await $.ajax({
        //         url: END_POINT + API.getWebServices,
        //         headers: {
        //             authorization: 'bearer ' + getCookie('token'),
        //         },
        //         success: (res, textStatus, xhr) => {
        //             checkAuthRes(xhr)
        //             listDatasource = res.data;
        //             webservices = res.data;
        //             listDatasource.map(data => {
        //                 $("#list_web_service").append(`
        //                 <div class="custom-control custom-checkbox mb-3">
        //                     <input type="checkbox" class="custom-control-input" id="id_${data.webservice_id}"  value="${data.webservice_id}" name="webservice_id">
        //                     <label class="custom-control-label" for="id_${data.webservice_id}" >${data.service_name}</label>
        //                 </div>`)
        //                 //$("#webservice_id").append(`<option value="${data.webservice_id}">${data.service_name}</option>`);
        //             });
        //         },
        //         error: (res) => {
        //             console.log(res);
        //         }
        //     });
        // };

        let getDatasource = async () => {
            let url  = "";
            let param = null;
            if(state.config.user_id == "Me"){
                url = END_POINT + API.getDatasource;
                param = {};
            }
            else{
                url = END_POINT + API.getDatasourcesCustomer;
                param = {
                    user_id : state.config.user_id
                }
            }
            await $.ajax({
                url: url,
                method: 'GET',
                headers: {
                    authorization: 'bearer ' + getCookie('token'),
                },
                data: param,
                success: (res, textStatus, xhr) => {
                    checkAuthRes(xhr)
                    listDatasource = res.data;
                    updateListDatasource();
                },
                error: (res) => {
                   
                    console.log(res);
                }
            });
        };

        let addDatasource = () => {
            let webservice_id = [];
            let iot_service_id = [];

            $("input[name='webservice_id']").each(function () {
                webservice_id.push($(this).val());
            });

            $("input[name='iot_service_id']").each(function () {
                iot_service_id.push($(this).val());
            });

            $.ajax({
                url: END_POINT + API.addDatasource,
                method: 'POST',
                headers: {
                    authorization: 'bearer ' + getCookie('token'),
                },
                data: {
                    dashboard_id: $("#dashboard_id").html(),
                    name: $("#name_datasource").val(),
                    webservice_id: webservice_id,
                    timeInterval: 4500,
                },
                success: (res, textStatus, xhr) => {
                    checkAuthRes(xhr)
                    getDatasource();
                    $("#addDatasource").modal('hide');
                },
                error: (res) => {
                    console.log(res);
                }
            });
        };

        let updateListDatasource = () => {
            $("#list_datasource").empty();
            $(".select-datasource").empty();
            let html = "" //"<h5>Datasource</h5>";
            let opt = "<option value=''>--Select datasource--</option>";
            opt += `<optgroup label="Web services">`
            listDatasource.webservices.map((data, index) => {
                // html += `<div class="row">
                //             <div class="col-2 edit-datasource" title="Edit" index=${index} style="cursor:pointer"> 
                //                 ${data.name}
                //             </div>
                //             <div class="col-2 unActiveApi" id="datasource-isActive-${index}">
                //                 <b>Not active</b>
                //             </div>
                //             <div class="col-3" id="datasource-${index}">

                //             </div>
                //             <div class="col-1">
                //                 <i class="fas fa-trash-alt remove-datasource" id="${data.id}"></i>
                //             </div>
                //         </div>`;
                opt += `<option value='${data.webservice_id}'>${data.service_name}</option>`;
                //apiCount++;
                //await getApiDatasource(index);
            });

            opt += `</optgroup>`
            opt += `<optgroup label="IoT services">`
            listDatasource.iot.map(async (data, index) => {
                opt += `<option value='${data.iotservice_id}'>${data.iot_name}</option>`;
                //apiCount++;
                //await getApiDatasource(index);
            });
            opt += `</optgroup>`


            // $(".edit-datasource").unbind().click(function () {

            // });


            socket_dashboards.on('broadcast', function (data) {
                //console.log(data)
                if (data.type === "web_services") {
                    datasources.web_services.realtime[data.service_id] = data.data;
                } else if (data.type === "iot_services") {
                    datasources.iot_services.realtime[data.service_id] = data.data;
                }



                widgetList.map(widget => {
                    if (widget.isAllow) {
                        if (widget.updateSocket) {
                            widget.updateSocket(data.service_id, data.type);
                        } else if (widget.updateData) {
                            if (widget.datasources[0].id === data.service_id && widget.datasources[0].type === data.type) {
                                widget.updateData();
                            }
                        }
                    }
                })
            });

            // setInterval(() => {
            //     checkTimeToUpdate();
            // }, 1000);


            $(".select-datasource").html(opt);

            // let list_datasource = $("#list_datasource").html(html);

            // list_datasource.find('.remove-datasource').unbind().click(function () {
            //     let id = $(this).attr('id');
            //     let datasource = findDatasource(id);
            //     let check = false;
            //     widgetList.map(widget => {
            //         widget.datasource.map(_datasource => {
            //             if (_datasource.split('.')[0] === datasource.name) {
            //                 check = true;
            //             }
            //         })

            //     })
            //     if (!check) {
            //         swal({
            //             title: "Are you sure?",
            //             text: `to delete datasource name : ${datasource.name}`,
            //             icon: "warning",
            //             buttons: true,
            //             dangerMode: true,
            //         }).then((willDelete) => {
            //             if (willDelete) {
            //                 deleteDatasource(id, datasource.name);

            //             } else {
            //                 return;
            //             }
            //         });
            //     } else {
            //         swal({
            //             title: "Warning !",
            //             text: `Can't delete datasource name : ${datasource.name} because have widget used this datasource`,
            //             icon: "warning",
            //             dangerMode: true,
            //         });
            //     }
            // });
        };

        let deleteDatasource = (id, name) => {
            $.ajax({
                url: END_POINT + API.deleteDatasource,
                method: 'DELETE',
                headers: {
                    authorization: 'bearer ' + getCookie('token'),
                },
                data: {
                    dashboard_id: $("#dashboard_id").html(),
                    id: id,
                },
                success: (res, textStatus, xhr) => {
                    checkAuthRes(xhr)
                    // let index = datasources.findIndex(datasource => datasource.name == name);
                    // datasources.splice(index, 1);
                    $(`.remove-datasource[id='${id}']`).parent().parent().remove();
                },
                error: (res) => {
                    console.log(res);
                }
            });
        };

        // let onEditDatasourceClick = () => {
        //     if (modalEdit === null) {
        //         modalEdit = `    <div class="modal fade" id="addDatasource">
        //                             <div class="modal-dialog modal-lg">
        //                                 <div class="modal-content">

        //                                     <div class="modal-header">
        //                                         <h4 class="modal-title">Edit Datasource</h4>
        //                                         <button type="button" class="close" data-dismiss="modal">&times;</button>
        //                                     </div>

        //                                     <div class="modal-body">
        //                                         <div class="row">
        //                                             <div class="col-12">
        //                                                 <label for="">Name</label>
        //                                                 <input type="text" id="edit-name-datasource" class="form-control">
        //                                             </div>
        //                                         </div>
        //                                         <div class="row">
        //                                             <div class="col-6">
        //                                                 <label for="">Channel</label>
        //                                                 <select name="" id="edit-webservice_id" class="form-control">
        //                                                     <option value="">--Select Channel--</option>
        //                                                 </select>
        //                                             </div>
        //                                             <div class="col-6">
        //                                                 <label for="">Set time interval (s)</label>
        //                                                 <input type="number" id="add-data-time-interval" class="form-control">
        //                                             </div>
        //                                         </div>
        //                                     </div>

        //                                     <div class="modal-footer">
        //                                         <a class="btn btn-success btn-block" id="btn-add-new-datasource" href="#">Save</a>
        //                                     </div>
        //                                 </div>
        //                             </div>
        //                         </div>`;
        //     }
        // };

        // let checkTimeToUpdate = () => {
        //     listDatasource.map(async (data, index) => {
        //         let diff = Dashboard.diffTime(data.lastUpdate, data.timeInterval);
        //         if (diff >= data.timeInterval) {
        //             await getApiDatasource(index);
        //         }
        //         return;
        //     });

        // };

        let getApiDatasource = async (index) => {
            //url: '/js/company/test-api2.json',
            let url = listDatasource[index].URL;
            let name = listDatasource[index].name;
            await $.ajax({
                url: '/js/company/test-api2.json',
                headers: {
                    authorization: 'bearer ' + getCookie('token'),
                },
                success: async (res, textStatus, xhr) => {
                    checkAuthRes(xhr)
                    // let lastUpdate = new Date();
                    // listDatasource[index].lastUpdate = lastUpdate;
                    // $("#datasource-" + index).html(lastUpdate.toDateString() + " " + lastUpdate.toLocaleTimeString());
                    // $("#datasource-isActive-" + index).html('<b>Active</b>');
                    // $("#datasource-isActive-" + index).removeClass('unActiveApi');
                    // $("#datasource-isActive-" + index).addClass('activeApi');
                    datasources['web_service']['realtime'][name] = res;
                    // if (apiCount === listDatasource.length) {
                    //     state.loadingApi = true;
                    // }
                },
                error: (res) => {
                    console.log(res);
                }
            });

            await $.ajax({
                url: '/js/company/test-api-static.json',
                headers: {
                    authorization: 'bearer ' + getCookie('token'),
                },
                success: async (res, textStatus, xhr) => {
                    checkAuthRes(xhr)
                    let lastUpdate = new Date();
                    listDatasource[index].lastUpdate = lastUpdate;
                    $("#datasource-" + index).html(lastUpdate.toDateString() + " " + lastUpdate.toLocaleTimeString());
                    $("#datasource-isActive-" + index).html('<b>Active</b>');
                    $("#datasource-isActive-" + index).removeClass('unActiveApi');
                    $("#datasource-isActive-" + index).addClass('activeApi');
                    datasources['web_service']['firstData'][name] = res;
                    if (apiCount === listDatasource.length) {
                        state.loadingApi = true;
                    }
                },
                error: (res) => {
                    console.log(res);
                }
            });
        };

        let findDatasource = (id, label) => {
            if (label === "web_services") {
                return listDatasource.webservices.find(data => {
                    return data.webservice_id == id;
                });
            } else if (label === "iot_services") {
                return listDatasource.iot.find(data => {
                    return data.iotservice_id == id;
                });
            }
        };

        let getKeyDatasource = (index, data) => {
            if (typeof (data) == 'object') {
                if (index == keyInput.length) {
                    return [Object.keys(data), data] ? [Object.keys(data), data] : [];
                }
                return getKeyDatasource(index + 1, data[keyInput[index]]);
            }
        };

        let getKeyObject = (data) => {
            if (typeof (data) == 'object') {
                return Object.keys(data);
            }
        };

        let forList = async (dataList, exData) => {
            let keys = Object.keys(exData);
            let html = "";
            await keys.map((_key) => {
                html += `<li class="value-data list-group-item" style="cursor:pointer" value="${_key}">${_key} : ${exData[_key]}</li>`;
            });

            await dataList.html(html);

            return true;
        }

        let createDataList2 = async (el, datasource, label, isRealtime = true) => {

            el.attr('label', label);
            let dataList = el.parent().find(".data-list");
            let loader = el.parent().find(".loader");

            loader.show();

            // dataList.mCustomScrollbar('destroy');

            dataList.empty();

            let exData = null;

            if (label === "web_services") {
                el.attr("service_id", datasource.webservice_id)
                el.attr("company_id", datasource.company_id)
                exData = await getFlatObjectV2(state.isRealTime === true ? ex.web_services.realtime[datasource.webservice_id] : ex.web_services.static[datasource.webservice_id]);
            } else if (label === "iot_services") {
                el.attr("service_id", datasource.iotservice_id)
                el.attr("company_id", datasource.company_id)
                exData = await getFlatObjectV2(state.isRealTime === true ? ex.iot_services.realtime[datasource.iotservice_id] : ex.iot_services.static[datasource.iotservice_id]);
            }

            await forList(dataList, exData)



            loader.hide();

            // dataList.mCustomScrollbar({
            //     theme: "minimal-dark"
            // });

            dataList.parent().find(".data-list").hover(function () {
                $(this).closest('.value-datasource').focus();
            }, function () {
                $(this).prev().blur();
                $(this).hide();
            });

            dataList.find('.value-data').unbind().click(function () {
                let el_val = $(this).parent().parent().find('.value-datasource,.value-group-data');
                let a = $(this).attr("value");
                el_val.val(a);
                el_val.focus();
            });
        }

        let createDataList = (api, el = null) => {
            $(el).parent().find(".data-list").empty();
            //let js = apiSelect + "['" + api + "']";
            let js = api;
            $(el).val(js);
            updateDataList(js, el);
        };

        let updateDataList = (value, el = null) => {

            try {
                keyInput = value.match(REG);
                //let key = getKeyDatasource(2, datasources[keyInput[1]]);
                let key = getKeyObject(objectPath.get(datasources.realtime, value));
                el.parent().find(".data-list").empty();

                let html = "";
                if (keyInput.length > 1)
                    html += `<li class="back-value-data list-group-item" back="${keyInput.slice(0, keyInput.length - 1).join('.')}" style="cursor:pointer">Back</li>`;

                key.map(_key => {
                    let data = objectPath.get(datasources.realtime, `${value}.${_key}`);
                    html += `<li class="value-data list-group-item" style="cursor:pointer" value="${_key}">${_key} : ${data}</li>`;
                });
                let data_list = el.parent().find(".data-list").append(html);

                data_list.parent().find('.data-list').hover(function () {
                    $(this).closest('.value-datasource').focus();
                }, function () {
                    $(this).prev().blur();
                    $(this).hide();
                });

                data_list.find('.value-data').unbind().click(function () {
                    let el_val = $(this).parent().parent().find('.value-datasource,.value-group-data');
                    let a = $(el_val).val();
                    a += `.${$(this).attr('value')}`;
                    $(el_val).val(a);
                    updateDataList($(el_val).val(), el_val);
                    $(el_val).focus();

                    $(".value-group-data").change();
                });

                data_list.find('.back-value-data').unbind().click(function () {
                    let back = $(this).attr('back');
                    // let value = "datasource";
                    // for (let i = 1; i < back.length; i++) {
                    //     value += `['${back[i]}']`;
                    // }
                    $(this).parent().parent().find('.value-datasource,.value-group-data').val(back);
                    updateDataList(back, $(this).parent().parent().find('.value-datasource,.value-group-data'));
                });
                $(".data-list").scrollTop(0);


            } catch (error) {

            }

            // $("#Mutiline_value  .data-list,#Radar  .data-list,#Table  .data-list").hover(function () {
            //     $(this).closest('.value-datasource').focus();
            // }, function () {
            //     $(this).prev().blur();
            //     $(this).hide();
            // });

            // $(".value-data").unbind().click(function () {
            //     let el_val = $(this).parent().parent().find('.value-datasource,.value-group-data');
            //     let a = $(el_val).val();
            //     a += `['${$(this).attr('value')}']`;
            //     $(el_val).val(a);
            //     updateDataList($(el_val).val(), el_val);
            //     $(el_val).focus();

            //     $(".value-group-data").change();
            // });

            // $(".back-value-data").unbind().click(function () {
            //     let back = $(this).attr('back').split(',');
            //     let value = "datasource";
            //     for (let i = 1; i < back.length; i++) {
            //         value += `['${back[i]}']`;
            //     }
            //     $(this).parent().parent().find('.value-datasource,.value-group-data').val(value);
            //     updateDataList(value, $(this).parent().parent().find('.value-datasource,.value-group-data'));
            // });
        };


        let groupData = {
            createGroupData: (api, el = null) => {
                el.find(".data-list").empty();
                el.find('.value-group-data').val(api);
                groupData.updateDataGroup(api, el);
            },

            updateDataGroup: (api, el) => {
                try {
                    let key = getKeyObject(objectPath.get(datasources.realtime, api));
                    el.find(".data-list").empty();
                    let html = "";
                    key.map(_key => {
                        html += `<li class="value-data list-group-item" style="cursor:pointer" value="${_key}">${_key}</li>`;
                    });


                    let data_list = el.find(".data-list-group").append(html);

                    data_list.find('.value-data').unbind().click(function () {
                        let el_val = el.parent().parent().find('.value-group-data');
                        let a = $(el_val).val();
                        a += `.${$(this).attr('value')}`;
                        $(el_val).val(a);
                        groupData.updateDataGroup($(el_val).val(), el);
                        $(el_val).focus();

                        $(".value-group-data").change();
                    });

                    data_list.parent().find(".data-list").hover(function () {
                        $(this).closest('.value-datasource').focus();
                    }, function () {
                        $(this).prev().blur();
                        $(this).hide();
                    });

                    $(".data-list").scrollTop(0);
                    // if (keyInput.length > 2)
                    //     el.parent().find(".data-list").prepend(`<li class="back-value-data list-group-item" back="${keyInput.slice(0, keyInput.length - 1).join(',')}" style="cursor:pointer">Back</li>`);

                } catch (error) {
                    console.log(error);
                }

                $("#Mutiline_group_data .group-data .back-value-data,#map_group_data .group-data .back-value-data").unbind().click(function () {
                    let back = $(this).attr('back').split(',');
                    let value = "datasource.realtime";
                    for (let i = 1; i < back.length; i++) {
                        value += `['${back[i]}']`;
                    }
                    $(this).parent().parent().find('.value-datasource,.value-group-data').val(value);
                    updateDataList(value, $(this).parent().parent().find('.value-datasource,.value-group-data'));
                });
            },


            createDataValue: (api, el) => {
                try {
                    let key = getKeyObject(objectPath.get(datasources.realtime, api));
                    el.find(".data-list-value").empty();
                    let html = "";
                    key.map(_key => {
                        let data = objectPath.get(datasources.realtime, `${$(".value-group-data").val()}.0.${_key}`);
                        html += `<li class="value-data list-group-item" style="cursor:pointer" value="${_key}">${_key} : ${data}</li>`;
                    });

                    let data_list = el.find(".data-list-value").append(html);

                    data_list.find('.value-data').unbind().click(function () {
                        let el_val = $(this).parent().parent().find('.value-datasource');
                        let a = $(el_val).val();
                        a += `.${$(this).attr('value')}`;
                        $(el_val).val(a);
                        $(el_val).focus();
                        groupData.updateDataValue(a, el_val)
                    });;

                    data_list.parent().find(".data-list").hover(function () {
                        $(this).closest('.value-datasource').focus();
                    }, function () {
                        $(this).prev().blur();
                        $(this).hide();
                    });

                    $(".data-list-value").scrollTop(0);
                    // if (keyInput.length > 2)
                    //     el.parent().find(".data-list").prepend(`<li class="back-value-data list-group-item" back="${keyInput.slice(0, keyInput.length - 1).join(',')}" style="cursor:pointer">Back</li>`);

                } catch (error) {
                    console.log(error);
                }


                // $(".back-value-data").unbind().click(function () {
                //     let back = $(this).attr('back').split(',');
                //     let value = "datasource";
                //     for (let i = 1; i < back.length; i++) {
                //         value += `['${back[i]}']`;
                //     }
                //     $(this).parent().parent().find('.value-datasource,.value-group-data').val(value);
                //     updateDataList(value, $(this).parent().parent().find('.value-datasource,.value-group-data'));
                // });
            },

            updateDataValue: (api, el) => {
                try {

                    let key = getKeyObject(objectPath.get(datasources.realtime, $(".value-group-data").val() + '.0' + el.val()));
                    console.log($(".value-group-data").val() + '.0' + el.val());

                    let keyInput = [];
                    if (api != "") {
                        keyInput = api.match(REG);
                    }

                    el.parent().find(".data-list-value").empty();
                    let html = "";

                    if (keyInput.length == 1)
                        html += `<li class="back-value-data list-group-item" back="" style="cursor:pointer">Back</li>`;
                    else {
                        html += `<li class="back-value-data list-group-item" back="${keyInput.slice(0, keyInput.length - 1).join('.')}" style="cursor:pointer">Back</li>`;
                    }

                    key.map(_key => {
                        let data = objectPath.get(datasources.realtime, `${$(".value-group-data").val()}.0${el.val()}.${_key}`);
                        //console.log(`${datasources}${$(".value-group-data").val()}.0${api}.${_key}`, api, data);
                        html += `<li class="value-data list-group-item" style="cursor:pointer" value="${_key}">${_key} : ${data} </li>`;
                    });

                    $(".data-list-value").scrollTop(0);

                    let data_list = el.parent().find(".data-list-value").append(html);

                    data_list.find(".value-data").unbind().click(function () {
                        let el_val = $(this).parent().parent().find('.value-datasource');
                        let a = $(el_val).val();
                        a += `.${$(this).attr('value')}`;
                        $(el_val).val(a);
                        $(el_val).focus();
                        groupData.updateDataValue(a, el_val)
                    });

                    data_list.find(".back-value-data").unbind().click(function () {
                        let value_datasource = $(this).parent().parent().find('.value-datasource')
                        let back = $(this).attr('back');
                        if (back == '') {
                            value_datasource.val('');
                        } else {
                            value_datasource.val('.' + back);

                        };
                        groupData.updateDataValue(back, value_datasource)

                    });

                    data_list.parent().find(".data-list").hover(function () {
                        $(this).closest('.value-datasource').focus();
                    }, function () {
                        $(this).prev().blur();
                        $(this).hide();
                    });


                } catch (error) {
                    console.log(error);
                }
            }
        }

        // this.setDataAccess = (data) => {
        //     dataAccess = data;
        // };

        // this.getDatasourceValue = (index, data) => {
        //     if (typeof (data[dataAccess[index]]) == 'object') {
        //         return this.getDatasourceValue(index + 1, data[dataAccess[index]]);
        //     }
        //     return data[dataAccess[index]];
        // };

        // this.fatoryGetDatasourceValue = (inputDataAccess, key) => {
        //     try {
        //         dataAccess = inputDataAccess;
        //         return this.getDatasourceValue(2, datasources[key]);
        //     } catch (error) {

        //     }
        // };

        this.getDatasources = () => {
            return datasources;
        };

        let getLabelSelectGroup = (el) => {
            let selected = $(':selected', el);
            return selected.closest('optgroup').attr('label').toLowerCase().replace(' ', '_');
        }

        let getRawData = async (datasource, label) => {
            //url: '/js/company/test-api2.json',
            let data = null;
            if (label === "web_services") {
                data = await axios.get('/js/company/test-api2.json');
                ex.web_services.realtime[datasource.webservice_id] = data.data;
            } else if (label === "iot_services") {
                data = await axios.post('http://203.151.136.15/node/iotService/getInputIoTData', {
                    tableDW_name: datasource.iot_name_DW
                });

                ex.iot_services.realtime[datasource.iotservice_id] = data.data[0];

            }
        }

        let getStaticData = async (datasource, label) => {
            //url: '/js/company/test-api2.json',
            let data = await axios.get('/js/company/test-aggr.json');
            if (label === "web_services") {
                ex.web_services.static[datasource.webservice_id] = data.data[0].data;
            } else if (label === "iot_services") {
                ex.iot_services.static[datasource.iotservice_id] = data.data[0].data;
            }
        }


        this.addEventTable = async (el, isAddCol) => {
            el.find(".data-list").hide();
            let el_value = el.parent().parent().next().find('table');

            if (el.val() != "") {
                let label = getLabelSelectGroup(el);
                let datasource = findDatasource(el.val(), label);

                state.isRealTime = true;
                await getStaticData(datasource, label);

                let elSend = null;
                if (isAddCol) {
                    elSend = el_value.find("tbody tr").find('td:last .value-datasource');
                } else {
                    elSend = el_value.find("tbody tr:last > td .value-datasource")
                }

                createDataList2(elSend, datasource, label, state.isRealTime);

                elSend.on('focus', function () {
                    console.log('te');
                    el.find('.data-list.active-data').hide().removeClass('active-data');
                    $(this).parent().find('.list-group').addClass('active-data');
                    $(this).parent().find('.list-group').show();
                });

                elSend.on('keyup', function () {
                    let value = $(this).val().toLowerCase();
                    let datalist = $(this).next().next();
                    datalist.find(".value-data").filter(function () {
                        $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)
                    });
                });


            } else {
                el.find(".data-list").empty();
            }
        }


        this.addEventMap = async (el = elements.mapValue, refresh = false) => {
            let formhtml = $("#map_value_layout").first().html();
            let html = el.append(formhtml);
            let apiId = el.find(elements.DOMString.class.selectDatasource).val();
            if (apiId != '') {

                let label = getLabelSelectGroup(el.find(elements.DOMString.class.selectDatasource));
                let datasource = findDatasource(apiId, label);
                await getRawData(datasource, label);
                state.apiName = datasource.name;
                html.find('.value-of-map:last ' + elements.DOMString.class.valueDatasource).next().hide();
                createDataList2(html.find('.value-of-map:last ' + elements.DOMString.class.valueDatasource), datasource, label);
            } else {
                $(".value-of-map").find(elements.DOMString.class.dataList).empty();
            }

            if (refresh) {
                html.find('.value-of-map:last ' + elements.DOMString.class.valueDatasource).on('focus', function () {
                    state.editModalIdSelect.find('.data-list.active-data').hide().removeClass('active-data');
                    $(this).parent().find('.data-list').addClass('active-data');
                    $(this).parent().find('.data-list').show();
                });

                html.find('.value-of-map:last ' + elements.DOMString.class.valueDatasource).keyup(function () {
                    let value = $(this).val().toLowerCase();
                    let datalist = $(this).next();
                    datalist.find(".value-data").filter(function () {
                        $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)
                    });
                });
            }

        }



        this.setEventEl = async (el, widget, isAdd = false) => {
            el.unbind().change(async function () {
                if (widget.type !== WIDGET_TYPE.TABLE) {
                    let value = null;
                    if (widget.type !== WIDGET_TYPE.RADAR) {
                        if (widget.type === WIDGET_TYPE.MAP) {
                            value = el.parent().parent().parent();
                        } else {
                            value = el.parent().parent();
                        }
                    } else {
                        value = el.parent().parent().next().next();
                    }


                    value.find(".value-datasource").val('');
                    value.find(".data-list").hide();

                    if ($(this).val() != '') {
                        let label = getLabelSelectGroup(this);
                        let datasource = findDatasource($(this).val(), label);
                        if (widget.type.search("static") < 0) {
                            state.isRealTime = true;
                            await getRawData(datasource, label);
                        } else {
                            state.isRealTime = false;
                            await getStaticData(datasource, label);
                        }
                        state.apiName = datasource.name;
                        //$(this).parent().parent().next().find(".value-datasource").focus();
                        createDataList2(value.find(".value-datasource"), datasource, label, state.isRealTime);
                        //createDataList(datasource.name, value.find(".value-datasource"));
                    } else {
                        value.find(".data-list").empty();
                    }
                } else {

                }
            });

            if (!isAdd) {
                let value = null;
                if (widget.type !== WIDGET_TYPE.RADAR) {
                    if (widget.type === WIDGET_TYPE.MAP) {
                        value = el.parent().parent().parent();
                    } else {
                        value = el.parent().parent();
                    }
                } else {
                    value = el.parent().parent().next().next();
                }


                value.find(".data-list").hide();

                if (el.val() != "") {
                    let label = getLabelSelectGroup(el);
                    let datasource = findDatasource(el.val(), label);
                    if (widget.type.search("static") < 0) {
                        state.isRealTime = true;
                        await getRawData(datasource, label);
                    } else {
                        state.isRealTime = false;
                        await getStaticData(datasource, label);
                    }
                    if (widget.type != WIDGET_TYPE.TABLE) {
                        createDataList2(value.find(".value-datasource"), datasource, label, state.isRealTime);
                    } else {
                        createDataList2(state.editModalIdSelect.find(".value-datasource"), datasource, label, state.isRealTime);
                    }

                } else {
                    value.find(".data-list").empty();
                }
            }


            $(`#${widget.editModalId} .modal-body `).unbind().find('.value-datasource').on('focus', function () {
                $(`#${widget.editModalId} .modal-body`).find('.data-list.active-data').hide().removeClass('active-data');
                $(this).parent().find('.list-group').addClass('active-data');
                $(this).parent().find('.list-group').show();
            });

            $(`#${widget.editModalId} .modal-body .value-datasource`).keyup(function () {
                let value = $(this).val().toLowerCase();
                let datalist = $(this).parent().find('.data-list').first();
                datalist.find(".value-data").filter(function () {
                    $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)
                });
            });

            $(`#${widget.editModalId} .modal-body`).unbind().on('click', '.remove-value', function () {
                $(this).parent().parent().remove();
            });



            $(`#${widget.editModalId} .modal-body .remove-radar-labels`).unbind().on('click', function () {
                let radarBind = $(this).attr('bind');
                $("." + radarBind).parent().parent().remove();
                $(this).parent().parent().remove();
            });

            // $(`#${widget.editModalId} .modal-body`).unbind().on('click', '.remove-datasource-radar', function () {
            //     $(this).parent().remove();
            //     if (radarEx)
            //         radarEx.updateRadarExample();
            // });



        }


        this.setEventElRadar = async (el, isSetLast = false) => {

            let el_value = el.parent().parent().next().next();

            if (!isSetLast) {
                el_value.find(".value-datasource").val('');
                el_value.find(".data-list").hide();
                el_value.find(".data-list").empty();
            }

            if (el.val() != '') {

                let label = getLabelSelectGroup(el);
                let datasource = findDatasource(el.val(), label);
                await getRawData(datasource, label);
                state.apiName = datasource.name;
                if (!isSetLast) {
                    createDataList2(el_value.find(".value-datasource"), datasource, label);
                } else {
                    createDataList2(el_value.find(".value-datasource:last"), datasource, label);
                }
                //createDataList(datasource.name, $(el_value).find(".value-datasource"));
            }

        }



        let bindElement = async () => {
            $("#btn_add_param").unbind().click(function () {
                let html = $("#layout_param_add").html();

                let form_add_param = $("#form_add_param").append(html);
                form_add_param.find(".remove-param").unbind().click(function () {
                    $(this).parent().parent().remove();
                });
            });

            $("#btn-add-datasource").unbind().click(function () {
                $("#addDatasource").modal('show');
            });

            $("#btn-add-new-datasource").unbind().click(function () {
                addDatasource();
            });

            $('#Gauges,#TextValue,#text-line').on('change', '.select-datasource', async function () {
                $(this).parent().next().find(".value-datasource").val('');
                $(this).parent().next().find(".data-list").hide();
                let value = $(this).parent().parent();

                if ($(this).val() != '') {
                    let label = getLabelSelectGroup(this);
                    let datasource = findDatasource($(this).val(), label);
                    await getRawData(datasource, label);
                    state.apiName = datasource.name;
                    $(this).parent().next().find(".value-datasource").focus();
                    createDataList2(value.find(".value-datasource"), datasource, label);
                    //createDataList(datasource.name, $(this).parent().next().find(".value-datasource"));
                } else {
                    $(this).parent().next().find(".data-list").empty();
                }
            });

            $("#Mutiline_value").on('change', '.select-datasource', async function () {
                let value = $(this).parent().parent();
                value.find(".value-datasource").val('');
                value.find(".data-list").hide();

                if ($(this).val() != '') {
                    let label = getLabelSelectGroup(this);
                    let datasource = findDatasource($(this).val(), label);
                    if (state.isRealTime) {
                        await getRawData(datasource, label);
                    } else {
                        await getStaticData(datasource, label);
                    }
                    state.apiName = datasource.name;
                    $(this).parent().parent().next().find(".value-datasource").focus();
                    createDataList2(value.find(".value-datasource"), datasource, label, state.isRealTime);
                    //createDataList(datasource.name, value.find(".value-datasource"));
                } else {
                    value.find(".data-list").empty();
                }
            });


            $("#map_value").on('change', '.select-datasource', async function () {
                $("#map_value").find(".value-datasource").val('');
                $("#map_value").find(".data-list").hide();

                if ($(this).val() != '') {
                    let label = getLabelSelectGroup(this);
                    let datasource = findDatasource($(this).val(), label);
                    await getRawData(datasource, label);
                    state.apiName = datasource.name;
                    //$(this).parent().parent().next().find(".value-datasource").focus();
                    createDataList2($("#map_value").find(".value-datasource"), datasource, label);
                    //createDataList(datasource.name, $("#map_value").find(".value-datasource"));
                } else {
                    $("#map_value").find(".list-group").empty();
                }
            });

            $("#Mutiline_group_data,#map_group_data").on('change', '.select-datasource', function () {
                $("#Mutiline_group_data,#map_group_data").find(".value-datasource").val('');
                $("#Mutiline_group_data,#map_group_data").find(".data-list").hide();
                if ($(this).val() != '') {
                    let datasource = findDatasource($(this).val());
                    state.apiName = datasource.name;
                    groupData.createGroupData(datasource.name, $("#Mutiline_group_data,#map_group_data"));
                } else {
                    $(".data-list").empty();
                    $(".value-group-data").val('');
                }
            });


            $("#Mutiline_group_data,#map_group_data").on('change', '.value-group-data', function () {
                let el = $("#Mutiline_group_data,#map_group_data");
                let data = objectPath.get(datasources.realtime, $(this).val());
                if (validate.isArray(data)) {
                    el.find("input[name='end']").val(data.length - 1);
                    groupData.createDataValue($(this).val() + ".0", el);
                } else {
                    $(".data-list-value,data-list-label").empty();
                }

            });

            $("#Mutiline_group_data").on('change', '.data-list-value', function () {

            });

            $("#Table").on('change', '.select-datasource', async function () {
                $("#Table").find(".value-datasource").val('');
                $("#Table").find(".data-list").hide();
                $("#Table").find(".data-list").empty();

                let value = $(this).parent().parent();


                if ($(this).val() != '') {
                    // let datasource = findDatasource($(this).val());
                    // state.apiName = datasource.name;
                    // createDataList(datasource.name, $("#Table").find(".value-datasource"));
                    let label = getLabelSelectGroup(this);
                    let datasource = findDatasource($(this).val(), label);
                    if (state.isRealTime) {
                        await getRawData(datasource, label);
                    } else {
                        await getStaticData(datasource, label);
                    }
                    state.apiName = datasource.name;
                    createDataList2($("#Table").find(".value-datasource"), datasource, label);
                }
            });

            $('#Radar_value').on('change', '.select-datasource', function () {
                self.setEventElRadar($(this));
            });

            $("#addWidget .modal-body").on('focus', '.value-datasource,.value-group-data', function () {
                $("#addWidget").find('.data-list.active-data').hide().removeClass('active-data');
                $(this).parent().find('.list-group').addClass('active-data');
                $(this).parent().find('.list-group').show();
            });

            $('#Mutiline_value,#Gauges,#TextValue,#text-line,#Radar,#Table,#map_value').on('keyup', '.value-datasource', function () {
                //updateDataList($(this).val(), $(this));
                let value = $(this).val().toLowerCase();
                let datalist = $(this).parent().find('.data-list');
                datalist.find(".value-data").filter(function () {
                    $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)
                });
            });

            $("#btn-add-value-Mutiline").unbind().click(function () {
                let formhtml = $("#line_value_layout").first().html();
                let html = elements.mutiLineValue.append(formhtml);
                //let apiId = elements.mutiLineValue.find(elements.DOMString.class.selectDatasource).val();
                // if (apiId != '') {
                //     let datasource = findDatasource(apiId);
                //     html.find(elements.DOMString.class.dataList).hide();
                //     html.find(elements.DOMString.class.dataList).removeClass('active-data');
                //     createDataList(datasource.name, html.find(elements.DOMString.class.valueDatasource).last());
                // } else {
                //     $(this).parent().parent().next().find(elements.DOMString.class.dataList).empty();
                // }

            });

            $(".btn-add-point-map").click(function () {
                self.addEventMap();

            });
        };

        this.getValueRealtime = (datasource, val = null) => {
            if (datasource.type === "web_services") {
                return objectPath.get(datasources.web_services.realtime[datasource.id], val ? val : datasource.val);
            } else if (datasource.type === "iot_services") {
                return objectPath.get(datasources.iot_services.realtime[datasource.id], val ? val : datasource.val);
            }
        }

        this.getDatasourceRealtime = (service_id, type) => {
            if (type === "web_services") {
                return datasources.web_services.realtime[service_id];
            } else if (type === "iot_services") {
                return datasources.iot_services.realtime[service_id];
            }
        }

        this.getValueFirstData = async (datasource) => {
            if (datasource.type == "web_services") {
                if (!datasources.web_services.firstData[datasource.id]) {
                    await this.getFirstApi(datasource.id, datasource.type)
                }
                return datasources.web_services.firstData[datasource.id];
            } else if (datasource.type == "iot_services") {
                if (!datasources.iot_services.firstData[datasource.id]) {
                    await this.getFirstApi(datasource.id, datasource.type)
                }
                return datasources.iot_services.firstData[datasource.id];
            }
        }

        this.getValueRealtimeGroup = (datasource_path, i) => {
            return objectPath.get(datasources.realtime, datasource_path.replace('[]', i));
        }

        let hasService = (service_id, type) => {
            if (type === "web_services") {
                if (datasources.web_services.firstData[service_id]) {
                    return true;
                }
            } else if (type === "iot_services") {
                if (datasources.iot_services.firstData[service_id]) {
                    return true;
                }
            }

            return false;
        }

        this.findListDatasource = (service_id, type) => {
            let list = null;
            if (type === "web_services") {
                list = listDatasource.webservices.filter(_data => {
                    return _data.webservice_id == service_id;
                })
            } else if (type === "iot_services") {
                list = listDatasource.iot.filter(_data => {
                    return _data.iotservice_id == service_id;
                })
            }
            if (list.length > 0) {
                return list[0];
            } else {
                return null;
            }
        }


        this.getFirstApi = async (service_id, type) => {
            let realtime = null;
            let firstData = null
            let list = this.findListDatasource(service_id, type);
            if (list) {
                let end_date = new Date();
                let start_date = new Date(moment(end_date).subtract(24, 'hours').format('YYYY-MM-DD HH:mm:ss'));
                if (type === "web_services") {
                    if (!hasService(service_id, type)) {
                        realtime = await axios.get('/js/company/test-api2.json');
                        datasources.web_services.realtime[service_id] = realtime.data
                    }
                    firstData = await axios.get('/js/company/test-api-static.json');
                    datasources.web_services.firstData[service_id] = firstData.data
                } else if (type === "iot_services") {
                    if (!hasService(service_id, type)) {
                        realtime = await axios.post('http://203.151.136.15/node/iotService/getInputIoTData', {
                            tableDW_name: list.iot_name_DW
                        });
                        datasources.iot_services.realtime[service_id] = realtime.data[0]
                    }
                    firstData = await axios.post('http://203.151.136.15/node/iotService/getInputIoTData_Time', {
                        tableDW_name: list.iot_name_DW,
                        start_date: start_date,
                        end_date: end_date
                    });
                    datasources.iot_services.firstData[service_id] = firstData.data
                }
            }
            return true;
        };

        this.datasourcesHasInCompany = (datasources, itemId) => {
            let has = true;
            if (state.config.type_user === "COMPANY") {
                for (let i = 0; i < datasources.length; i++) {
                    let list = this.findListDatasource(datasources[i].id, datasources[i].type);
                    if (list) {
                        if (list.company_id == state.config.company_id) {
                            has = true;
                        } else {
                            has = false;
                            break;
                        }
                    } else {
                        if (datasources[i].company_id == state.config.company_id) {
                            has = true;
                            continue;
                        }
                        has = false;
                        break;
                    }
                }
            }
            if (!has) {
                $("#" + itemId).find('.tool').remove();
                $("#" + itemId).find(".btn-time-series").remove();
                $("#" + itemId).find(".ui-resizable-handle").remove();
                $("#" + itemId).find(".card-header > div >h5").empty();
                $("#" + itemId).find(".card-header > div >h5").append('<span class="badge badge-pill badge-danger ml-2">Not Allow</span>')
                let card_body = $("#" + itemId).find(".card-body")
                card_body.addClass(' d-flex align-items-center align-content-center justify-content-center');
                card_body.html(`<h4 class="text-danger"><i class="fas fa-exclamation-circle"></i> Can't access this widget !</h4>`)
            }
            return has;
        };

        this.initCreate = async () => {
            await bindElement();
            //await getWebServices();
            await getDatasource();
        };
    }
}


class Dashboard {
    constructor() {

        let options = {
            cellHeight: 80,
            verticalMargin: 10,
            float: false
        };

        let grid = null;

        let time = null;

        let radarEx = null;
        let tableEx = null;

        let isGroupDataMutiLine = false;
        let isGroupDataMap = false;

        let sliderTime = null;

        let isRealTime = true;

        let closeAddWidgetModal = () => {
            $("#addWidget").modal('hide');
        }

        let getWigetType = () => {
            return elements.selectWidgetType.val();
        };

        let getTitleName = () => {
            return elements.inputTitleName.val();
        };

        let getTimeInterval = () => {
            return elements.inputTimeInterVal.val();
        };

        let getDateTimeNow = () => {
            let d = new Date();
            //return d.getDate() + "-" + d.getMonth() + "-" + d.getFullYear() + " " + d.getHours() + ":" + d.getMinutes() + ":" + d.getSeconds();
            return d.toUTCString();
        };

        let checkHasService = async (datasources) => {
            let check = null;
            for (let i = 0; i < datasources.length; i++) {
                check = await Datasource.getFirstApi(datasources[i].id, datasources[i].type);
            }
            return check;
        }

        let getValueMutiLine = async (divId) => {
            let data_line = [];
            let data_widget = null;
            if (!isGroupDataMutiLine) {
                let length_label = elements.mutiLine.find(elements.DOMString.class.labelChartLine).length;
                let value_datasource = [];

                elements.mutiLineValue.find(elements.DOMString.class.valueDatasource).each(function () {
                    value_datasource.push({
                        id: $(this).attr("service_id"),
                        company_id: $(this).attr("company_id"),
                        type: $(this).attr("label"),
                        val: $(this).val()
                    });
                });


                for (let i = 0; i < length_label; i++) {
                    let label_y = elements.mutiLineValue.find(elements.DOMString.class.labelChartLine);
                    let rgb = elements.mutiLineValue.find(elements.DOMString.class.colorChartLine);
                    let rgba = 'rgba(255,255,255,0.0)';
                    let data = null;
                    data = {
                        label: $(label_y[i]).val(),
                        backgroundColor: rgba,
                        borderColor: $(rgb[i]).val(),
                        lineTension: 0,
                        pointRadius: 0,
                        borderWidth: 2
                    };
                    data_line.push(data);
                }

                data_widget = {
                    axis_x: $(elements.DOMString.id.axis_x).val(),
                    axis_y: $(elements.DOMString.id.axis_y).val(),
                    isGroupData: false,
                    // apiName: state.apiName,
                    datasources: value_datasource,
                    fullScreenId: "myChartFull_" + divId,
                    download: true,
                    type: getWigetType(),
                    title_name: getTitleName(),
                    lastUpdate: getDateTimeNow(),
                    timeInterval: getTimeInterval(),
                    datasets: [...data_line],
                };

                console.log(data_widget);

                await checkHasService(value_datasource);


            } else {
                let groupData = $(elements.DOMString.class.valueGroupData).val();
                let start = $(elements.DOMString.id.start).val();
                let end = $(elements.DOMString.id.end).val();
                let value = $("input[name='value-data']:visible").val();
                let label = $("input[name='label-data']:visible").val();
                for (let i = start; i <= end; i++) {
                    let data = null;
                    let hex = randomHexColor();
                    data = {
                        label: objectPath.get(Datasource.getDatasources(), `${groupData}.${i}${label}`),
                        backgroundColor: 'rgba(255,255,255,0.0)',
                        borderColor: hex,
                        borderWidth: 2
                    };
                    data_line.push(data);
                }

                data_widget = {
                    isGroupData: true,
                    apiName: state.apiName,
                    datasource: `${groupData}.[]${value}`,
                    fullScreenId: "myChartFull_" + divId,
                    download: true,
                    type: getWigetType(),
                    title_name: getTitleName(),
                    lastUpdate: getDateTimeNow(),
                    timeInterval: getTimeInterval(),
                    datasets: [...data_line],
                };
            }
            return data_widget;
        };

        let getValueTextLine = () => {
            let unit = elements.textLine.find(elements.DOMString.id.unit).val();
            let rgb = elements.valueTextLine.find(elements.DOMString.id.rgb).val();
            let elValueDatasource = elements.textLine.find(elements.DOMString.class.valueDatasource);

            let value_datasource = [{
                id: elValueDatasource.attr('service_id'),
                company_id: elValueDatasource.attr("company_id"),
                type: elValueDatasource.attr('label'),
                val: elValueDatasource.val()
            }];

            let data_widget = {
                apiName: state.apiName,
                datasources: value_datasource,
                //fullScreenId: "myChartFull_" + divId,
                download: true,
                type: getWigetType(),
                title_name: getTitleName(),
                lastUpdate: getDateTimeNow(),
                timeInterval: getTimeInterval(),
                rgb: rgb,
                unit: unit,
            };
            return data_widget;
        };

        let getValueRader = () => {
            let datasets = [];
            let labels = [];
            let label = [];
            let value_datasource = [];
            let color = [];

            elements.radarLabel.find(elements.DOMString.class.radarLabel).each(function () {
                labels.push($(this).val());
            });

            elements.radarValue.find(elements.DOMString.class.formRadarValue).each(function () {
                datasets.push({});
                label.push($(this).find(elements.DOMString.class.labelRadar).val());

                $(this).find(elements.DOMString.class.valueDatasource).each(function () {
                    value_datasource.push({
                        id: $(this).attr('service_id'),
                        company_id: $(this).attr('company_id'),
                        type: $(this).attr('label'),
                        val: $(this).val(),
                    });
                });

                $(this).find(elements.DOMString.class.radarColor).each(function () {
                    color.push($(this).val());
                });

            });


            let data_widget = {
                datasets: datasets,
                labels: labels,
                label: label,
                color: color,
                apiName: state.apiName,
                datasources: value_datasource,
                type: getWigetType(),
                title_name: getTitleName(),
                lastUpdate: getDateTimeNow(),
                timeInterval: getTimeInterval(),
                download: true,
            };
            return data_widget;
        };

        let getValueGauges = (divId) => {
            let limitMin = elements.gauges.find(elements.DOMString.id.g_limitMin).val();
            let limitMax = elements.gauges.find(elements.DOMString.id.g_limitMax).val();
            let unit = elements.gauges.find(elements.DOMString.id.unit).val();
            let elValueDatasource = elements.gauges.find(elements.DOMString.class.valueDatasource);

            let value_datasource = [{
                id: elValueDatasource.attr('service_id'),
                company_id: elValueDatasource.attr('company_id'),
                type: elValueDatasource.attr('label'),
                val: elValueDatasource.val(),
            }];

            let data_widget = {
                textId: "gauges-text-" + divId,
                apiName: state.apiName,
                datasources: value_datasource,
                fullScreenId: "gaugesFull-" + divId,
                download: true,
                type: getWigetType(),
                title_name: getTitleName(),
                lastUpdate: getDateTimeNow(),
                timeInterval: getTimeInterval(),
                limitMax: limitMax,
                limitMin: limitMin,
                unit: unit,
                opts: {
                    angle: 0, // The span of the gauge arc
                    lineWidth: 0.23, // The line thickness
                    radiusScale: 1, // Relative radius
                    pointer: {
                        length: 0.6, // // Relative to gauge radius
                        strokeWidth: 0.035, // The thickness
                        color: '#000000' // Fill color
                    },
                    limitMax: false, // If false, max value increases automatically if value > maxValue
                    limitMin: false, // If true, the min value of the gauge will be fixed
                    colorStart: '#6FADCF', // Colors
                    colorStop: '#8FC0DA', // just experiment with them
                    strokeColor: '#E0E0E0', // to see which ones work best for you
                    generateGradient: true,
                    highDpiSupport: true, // High resolution support
                    staticLabels: {
                        font: "10px Poppins", // Specifies font
                        labels: [0, Number(limitMax)], // Print labels at these values
                        color: "#000000", // Optional: Label text color
                        fractionDigits: 0 // Optional: Numerical precision. 0=round off.
                    },
                },
            };

            return data_widget;
        };

        let getValueMap = (divId) => {
            let map = null;
            let data_widget = null;
            if (!isGroupDataMap) {
                let datasource = [];
                elements.mapValue.find(elements.DOMString.class.valueOfMap).each(function () {
                    let lat = $(this).find(".latitude").val();
                    let long = $(this).find(".longitude").val();
                    let value = $(this).find(".value-map").val();
                    let label = $(this).find(".label-map").val();

                    datasource.push({
                        id: $(this).find(".latitude").attr('service_id'),
                        company_id: $(this).find(".latitude").attr('company_id'),
                        type: $(this).find(".latitude").attr('label'),
                        latitude: lat,
                        longitude: long,
                        value: value,
                        label: label
                    });
                })

                data_widget = {
                    isGroupData: false,
                    apiName: state.apiName,
                    datasources: datasource,
                    fullScreenId: "mapFull-" + divId,
                    download: false,
                    type: getWigetType(),
                    title_name: getTitleName(),
                    lastUpdate: getDateTimeNow(),
                    timeInterval: getTimeInterval(),
                };
            } else {
                map = $("#map_group_data");
                let groupData = $(".value-group-data:visible").val();
                let start = $("input[name='start']:visible").val();
                let end = $("input[name='end']:visible").val();
                let latitude = $("input[name='latitude']:visible").val();
                let longitude = $("input[name='longitude']:visible").val();
                let value = $("input[name='value_data']:visible").val();
                let label = $("input[name='label_data']:visible").val();
                data_widget = {
                    isGroupData: true,
                    apiName: state.apiName,
                    datasource: {
                        groupData: groupData,
                        latitude: `${groupData}.[]${latitude}`,
                        longitude: `${groupData}.[]${longitude}`,
                        value: `${groupData}.[]${value}`,
                        label: `${groupData}.[]${label}`,
                    },
                    start: start,
                    end: end,
                    fullScreenId: "mapFull-" + divId,
                    download: false,
                    type: getWigetType(),
                    title_name: getTitleName(),
                    lastUpdate: getDateTimeNow(),
                    timeInterval: getTimeInterval(),
                };
            }
            return data_widget;
        };

        let getValueTable = () => {
            let data_widget = {
                apiName: state.apiName,
                datasources: tableEx.getValue().datasources,
                download: true,
                type: getWigetType(),
                title_name: getTitleName(),
                lastUpdate: getDateTimeNow(),
                timeInterval: getTimeInterval(),
                table: tableEx.getValue(),
            };
            return data_widget;
        }

        let getTextValue = (divId) => {
            let unit = elements.textValue.find(elements.DOMString.id.unit).val();
            let rgb = elements.textValue.find(elements.DOMString.id.rgb).val();
            let elValueDatasource = elements.textValue.find(elements.DOMString.class.valueDatasource);
            let value_datasource = [{
                id: elValueDatasource.attr('service_id'),
                company_id: elValueDatasource.attr('company_id'),
                type: elValueDatasource.attr('label'),
                val: elValueDatasource.val(),
            }];
            let data_widget = {
                apiName: state.apiName,
                datasources: value_datasource,
                fullScreenId: "textValueFull-" + divId,
                download: false,
                type: getWigetType(),
                title_name: getTitleName(),
                lastUpdate: getDateTimeNow(),
                timeInterval: getTimeInterval(),
                unit: unit,
                rgb: rgb
            };

            return data_widget;
        };

        let getValueWigetText = () => {
            let textbox = elements.textBox.find(elements.DOMString.id.inputTextCustom).val();
            let fontsize = elements.textBox.find(elements.DOMString.id.inputFontSize).val();
            let data_widget = {
                type: getWigetType(),
                download: false,
                title_name: null,
                lastUpdate: null,
                timeInterval: null,
                textbox: textbox,
                fontsize: fontsize
            };

            return data_widget;
        };

        let createFormBodyInputWidget = (type) => {
            state.isRealTime = true;
            if (type.search('static') !== -1) {
                state.isRealTime = false;
            }

            elements.divValueWidget.hide();
            elements.divDefaultValue.show();
            elements.btnAddWidget.show();

            if (type === WIDGET_TYPE.MUTILINE || type === WIDGET_TYPE.MUTILINE_STATIC) {
                elements.mutiLine.show();
            } else if (type === WIDGET_TYPE.TEXTLINE) {
                elements.textLine.show();
            } else if (type === WIDGET_TYPE.RADAR) {
                elements.radar.show();
                radarEx = new RadarEx();
                radarEx.createRadarExample();

                $("#addWidget").on("change", ".radar-labels,.label-radar", function () {
                    let val = $(this).val();
                    let bind = $(this).attr('bind');
                    $("." + bind).attr('value', val);
                    radarEx.updateRadarExample();
                });

                $("#btn_add_datasource_radar").unbind().click(function () {
                    createFormDatasourceRadar();
                    radarEx.updateRadarExample();
                });

                $(document).on("click", ".remove-datasource-radar", function () {
                    $(this).parent().remove();
                    if (radarEx)
                        radarEx.updateRadarExample();
                });

                $("#btn-edit-label-radar").unbind().click(function () {
                    swal({
                        title: "Are you sure?",
                        text: "When you edit lables datasource will reset",
                        icon: "warning",
                        buttons: true,
                        dangerMode: true,
                    }).then((willDelete) => {
                        if (willDelete) {
                            $("#btn-add-label-radar").show();
                            $("#btn-edit-label-radar").hide();
                            $("#Radar_value").empty();
                            $(".radar-labels").prop('disabled', false);
                            $(".remove-radar-labels").prop('disabled', false);
                            radarEx.updateRadarExample();
                        } else {
                            return;
                        }
                    });
                });
            } else if (type === WIDGET_TYPE.TABLE || type === WIDGET_TYPE.TABLE_STATIC) {
                elements.table.show();
                tableEx = new TableEx($("#example_table"), {
                    col: {
                        amount: 3,
                    },
                    row: {
                        amount: 3
                    }
                })

                tableEx.createTableEx();

                $("#btn_add_col").unbind().click(function () {
                    tableEx.addCol();
                    Datasource.addEventTable($("#addWidget").find(".select-datasource"), true);
                });

                $("#btn_remove_col").unbind().click(function () {
                    tableEx.removeCol();
                });

                $("#btn_add_row").unbind().click(function () {
                    tableEx.addRow();
                    Datasource.addEventTable($("#addWidget").find(".select-datasource"), false);
                });


                $("#btn_remove_row").unbind().click(function () {
                    tableEx.removeRow();
                });

            } else if (type === WIDGET_TYPE.GAUGES) {
                elements.gauges.show();
            } else if (type === WIDGET_TYPE.TEXTVALUE) {
                elements.textValue.show();
            } else if (type === WIDGET_TYPE.TEXTBOX) {
                elements.textBox.show();
                elements.divDefaultValue.hide();

            } else if (type === WIDGET_TYPE.MAP) {
                $("#map").show();
            } else {
                $("#add-new-widget").hide();
                $("#default_value").hide();
                $("#form-input-widget").html("");
            }
        };

        let createFormDatasourceRadar = () => {
            if ($(".form-radar-value:visible").length == 0) {
                let layout_radar_value = $("#layout-radar-value").html();
                let layout_add_value_radar = $("#layout-add-value-radar").html();
                $("#Radar_value").append(layout_radar_value);
                $(".radar-labels:visible").each(function () {
                    let html = layout_add_value_radar.replace('((value-radar))', $(this).val());
                    $(".add-value-radar:visible").append(html);
                });
            } else {
                let form_rader_value = $("#Radar_value > .form-radar-value").html();
                let form = $("#Radar_value").append(`<div class="form-radar-value">${form_rader_value}</div>`);
                form.find('.list-group').empty();
                resetInputValidate();
            }
        };


        let onAddWidgetClick = async () => {
            let type = getWigetType();
            let obj_widget = null;
            let widget = null;
            if (type === WIDGET_TYPE.MUTILINE || type === WIDGET_TYPE.MUTILINE_STATIC) {
                widget = await getValueMutiLine();
                if (state.isRealTime) {
                    obj_widget = new MutiLine(widget);
                } else {
                    obj_widget = new MutiLineStatic(widget);
                }

            } else if (type === WIDGET_TYPE.TEXTLINE) {
                widget = getValueTextLine();
                obj_widget = new ChartTextLine(widget);
            } else if (type === WIDGET_TYPE.RADAR) {
                widget = getValueRader();
                obj_widget = new Radar(widget);

            } else if (type === WIDGET_TYPE.GAUGES) {
                widget = getValueGauges();
                obj_widget = new Gauges(widget);

            } else if (type === WIDGET_TYPE.MAP) {
                widget = getValueMap();
                obj_widget = new Map(widget);

            } else if (type === WIDGET_TYPE.TABLE || type === WIDGET_TYPE.TABLE_STATIC) {
                widget = getValueTable();
                if (state.isRealTime) {
                    obj_widget = new Table(widget);
                } else {
                    obj_widget = new TableStatic(widget);
                }

            } else if (type === WIDGET_TYPE.TEXTVALUE) {
                widget = getTextValue();
                obj_widget = new TextValue(widget);

            } else if (type === WIDGET_TYPE.TEXTBOX) {
                widget = getValueWigetText();
                obj_widget = new TextBox(widget);
            }

            if (obj_widget.type != WIDGET_TYPE.TABLE && obj_widget.type != WIDGET_TYPE.TEXTBOX) {
                obj_widget.datasources.map(_d => {
                    this.pushAllDatasource(_d.id, _d.type);
                })
            }

            socket_dashboards.emit('update-datasources', state.allDatasource);

            if (obj_widget.updateFirstData) {
                obj_widget.updateFirstData();
            } else {
                //obj_widget.updateData();
            }

            widgetList.push(obj_widget);

            closeAddWidgetModal();
        };

        let saveGrid = () => {
            let serializedData = _.map($('.grid-stack > .grid-stack-item:visible'), function (el) {
                el = $(el);
                let node = el.data('_gridstack_node');
                //var widget = el.data('_gridstack_data');
                let wi = Dashboard.getWidgetById(node.id);
                return {
                    x: node.x,
                    y: node.y,
                    width: node.width,
                    height: node.height,
                    widget: Widget.formateDataSave(wi)
                };
            });

            $.ajax({
                url: END_POINT + `dashboards/layout`,
                method: "PUT",
                headers: {
                    authorization: 'bearer ' + getCookie('token'),
                },
                data: {
                    dashboard_id: $("#dashboard_id").html(),
                    dashboard: JSON.stringify(serializedData, null, ''),
                },
                success: (res, textStatus, xhr) => {
                    checkAuthRes(xhr)
                    console.log(res);
                },
                error: (res) => {
                    console.log(res);
                }
            });
            //console.log(JSON.stringify(serializedData, null, '        '))
            //setStorage("dashboard", serializedData);
            // $('#saved-data').val(JSON.stringify(serializedData, null, '        '));
        };

        let bindElement = () => {
            //validate
            addEventValidate(validateInput.create.mutiline);
            addEventValidate(validateInput.create.map);
            addEventValidate(validateInput.create.textbox);
            addEventValidate(validateInput.create.table);
            addEventValidate(validateInput.create.textline);
            addEventValidate(validateInput.create.radar);

            elements.btnSettingWidget.unbind().click(function () {
                $(".btn-time-series").hide();
                clearInterval(time);
                $(this).hide();
                $(".btn-time-series").hide();
                $(".edit-widget").show();
                elements.btnAdd.show();
                elements.btnSaveWidget.show();
                elements.btnCancelWidget.show();
                grid.enableMove(true);
                grid.enableResize(true);
            });

            elements.selectWidgetType.change(function () {
                createFormBodyInputWidget(getWigetType());
            });

            elements.btnAdd.unbind().click(function () {
                //$("input[type=text]").val("");
                resetInputValidate();
                $("select").val('');
                $("#addWidget").modal('show');
                state.radarLabelCount = 4,

                    $(".value-widget").hide();
                $("#add-new-widget").hide();
                elements.divDefaultValue.hide();

                //reset
                $(".value-widget").find("input[name='text'],input[name='number']").val('');
                $(".select-datasource").val('');
                $(".list-group ").empty();

            });

            elements.btnAddWidget.unbind().click(function () {
                onAddWidgetClick();
            });

            elements.btnSaveWidget.unbind().click(function () {
                $(".btn-time-series").show();
                elements.btnSaveWidget.hide();
                elements.btnAdd.hide();
                elements.btnCancelWidget.hide();
                elements.btnSettingWidget.show();
                $(".edit-widget").hide();
                $(".btn-time-series").show();
                //updateDatalast();
                saveGrid();
                grid.enableMove(false);
                grid.enableResize(false);
            });

            elements.btnCancelWidget.unbind().click(function () {
                $(".btn-time-series").show();
                elements.btnSaveWidget.hide();
                elements.btnAdd.hide();

                $(".edit-widget").hide();
                $("#cancelW").hide();
                $("#settingW").show();
                $(".btn-time-series").show();
                //updateDatalast();
                grid.enableMove(false);
                grid.enableResize(false);
            });

            $("#btn-detail-toggle").unbind().click(function () {
                $("#top-header").slideToggle("fast");
                $(this).toggleClass('flip');
            });

            $('#addWidget .modal-body').on('click', '.remove-value', function () {
                $(this).parent().parent().remove();
            });

            $('#addWidget').unbind().on('click', '#btn-add-label-radar', function () {
                state.radarLabelCount++;
                $("#Radar_label").append(`  <div class="input-group">
                                                <input type="text" class="form-control radar-labels mt-2"  bind="radar-label-${state.radarLabelCount}" value="">
                                                <div class="input-group-append">
                                                    <button class="btn btn-danger mt-2  remove-radar-labels" type="button" bind="radar-label-${state.radarLabelCount}"><i class="fas fa-times"></i></button>
                                                </div>
                                            </div>`);
                $("#Radar_value .form-radar-value").each(function () {
                    let el = $(this).find(".add-value-radar");
                    let value_datasource = $(this).find(".select-datasource");
                    el.append(`<div class="row form-group">
                                        <div class="col-6">
                                            <label for="">Label</label>
                                            <input class="form-control label-radar-select radar-label-${state.radarLabelCount}" readonly value="">
                                        </div>
                                        <div class="col-6">
                                            <label for="">Value</label>
                                            <input class="form-control value-datasource">
                                            <ul class="list-group data-list" style="display: none">
                                        </div>
                                    </div>`);
                    Datasource.setEventElRadar(value_datasource, true);


                });
                radarEx.updateRadarExample();


            });

            $("#Radar_value").on('change', '.radar-color', function () {
                radarEx.updateRadarExample();
            });

            $('#Radar_label').unbind().on('click', '.remove-radar-labels', function () {
                state.radarLabelCount--;
                let radarBind = $(this).attr('bind');
                $("." + radarBind).parent().parent().remove();
                $(this).parent().parent().remove();
                radarEx.updateRadarExample();
            });

            $("input[name='isGroupDataMutiLine']").change(function () {
                isGroupDataMutiLine = $(this).val();
                if (isGroupDataMutiLine == 1) {
                    isGroupDataMutiLine = true;
                    $("#Mutiline_value").hide();
                    $("#Mutiline_group_data").show();
                    return;
                }
                isGroupDataMutiLine = false;
                $("#Mutiline_value").show();
                $("#Mutiline_group_data").hide();
            })

            $("input[name='isGroupDataMap']").change(function () {
                isGroupDataMap = $(this).val();
                if (isGroupDataMap == 1) {
                    isGroupDataMap = true;
                    $("#map_value").hide();
                    $("#map_group_data").show();
                    return;
                }
                isGroupDataMap = false;
                $("#map_value").show();
                $("#map_group_data").hide();
            })

        };

        let updateDatalast = async () => {
            // time = setInterval(() => {
            //     // && state.loadingApi
            //     if (widgetList.length > 0 /*&& state.loadingApi*/ ) {
            //         updateData([...widgetList]);
            //     }
            // }, 1000);
            if (widgetList.length > 0 /*&& state.loadingApi*/ ) {
                updateData([...widgetList]);
            } else {
                $("#loading").remove();
            }
        };

        let updateData = (widgets) => {
            for (var i = 0; i < widgets.length; i++) {
                let widget = widgets[i];

                if (widget.updateData && widget.isAllow) {
                    if (true /*Dashboard.diffTime(widget.lastUpdate, widget.timeInterval) >= widget.timeInterval || state.firstTime*/ ) {

                        if (!widget.firstLoadData) {
                            widget.updateData();
                        } else {
                            widget.updateFirstData();
                        }

                    } else if (widget.liveData) {
                        widget.liveData();
                    }
                }
            }
            if (state.firstTime == true) {
                $("#loading").remove();
                $(".grid-stack").show('fade');
            }
            state.firstTime = false;
            clearInterval(time);
        };

        this.pushAllDatasource = (id, type) => {
            let hasId = true;
            if (type === "web_services") {
                if (state.allDatasource.web_services.length > 0) {
                    let data = state.allDatasource.web_services.find(_id => {
                        return _id == id
                    });
                    if(typeof(data) === 'undefined'){
                        hasId = false;
                    }
                }
                else{
                    hasId = false;
                }
                if (!hasId) {
                    state.allDatasource.web_services.push(id);
                }
            } else if (type === "iot_services") {
                if (state.allDatasource.iot_services.length > 0) {
                    let data = state.allDatasource.iot_services.find(_id => {
                        return _id == id
                    });
                    if(typeof(data) === 'undefined'){
                        hasId = false;
                    }
                }
                else{
                    hasId = false;
                }

                if (!hasId) {
                   
                    state.allDatasource.iot_services.push(id)
                }
            }

          
        }

        let createDashboardInit = async (dashboard) => {
            let obj_widget = null;
            let widgets = null;
            let datasources = null;

            let gridData = null;
            let type = "";

            dashboard.map((data, key) => {
                obj_widget = null;
                widgets = data.widget;

                datasources = data.widget.datasources;

                if (datasources) {
                    datasources.map(_d => {
                        this.pushAllDatasource(_d.id, _d.type);
                    });
                }

                gridData = {
                    x: data.x,
                    y: data.y,
                    width: data.width,
                    height: data.height,
                };

                type = widgets.type;
                widgets.lastUpdate = getDateTimeNow();
                if (type === WIDGET_TYPE.MUTILINE) {
                    obj_widget = new MutiLine(widgets, gridData);
                } else if (type === WIDGET_TYPE.MUTILINE_STATIC) {
                    obj_widget = new MutiLineStatic(widgets, gridData);
                } else if (type === WIDGET_TYPE.GAUGES) {
                    obj_widget = new Gauges(widgets, gridData);
                } else if (type === WIDGET_TYPE.RADAR) {
                    obj_widget = new Radar(widgets, gridData);
                } else if (type === WIDGET_TYPE.TEXTLINE) {
                    obj_widget = new ChartTextLine(widgets, gridData);
                } else if (type === WIDGET_TYPE.MAP) {
                    obj_widget = new Map(widgets, gridData);
                } else if (type === WIDGET_TYPE.TABLE) {
                    obj_widget = new Table(widgets, gridData);
                } else if (type === WIDGET_TYPE.TABLE_STATIC) {
                    obj_widget = new TableStatic(widgets, gridData);
                } else if (type === WIDGET_TYPE.TEXTVALUE) {
                    obj_widget = new TextValue(widgets, gridData);
                } else if (type === WIDGET_TYPE.TEXTBOX) {
                    obj_widget = new TextBox(widgets, gridData);
                }

                if (obj_widget !== null) {
                    widgetList.push(obj_widget);
                }
            })

            for (let i = 0; i < state.allDatasource.web_services.length; i++) {
                await Datasource.getFirstApi(state.allDatasource.web_services[i], "web_services");
            }

            for (let i = 0; i < state.allDatasource.iot_services.length; i++) {
                await Datasource.getFirstApi(state.allDatasource.iot_services[i], "iot_services");
            }

            socket_dashboards.emit('update-datasources', state.allDatasource);

            $(".edit-widget").hide();
        };


        this.initDashboard = async () => {
            Datasource = new Datasources();

            let dashboard = "";
            // set widget $.ajax
            await Datasource.initCreate();

            console.log('load datasource');

            await $.ajax({
                url: END_POINT + API.getStatic + $("#dashboard_id").html(),
                method: 'GET',
                headers: {
                    authorization: 'bearer ' + getCookie('token'),
                },
                success: (res, textStatus, xhr) => {
                    checkAuthRes(xhr)
                    console.log(res)
                    if (res.data) {
                        state.type_user = res.data[0].type_user;
                        dashboard = GridStackUI.Utils.sort(JSON.parse(res.data[0].dashboard));
                    }
                },
                error: (res) => {
                    console.log(res);
                }
            });

            console.log('load dashboard');

            await createDashboardInit(dashboard);

            console.log('create dashboard success');

            $(".grid-stack").gridstack(options);
            grid = $(".grid-stack").data("gridstack");
            grid.enableMove(false);
            grid.enableResize(false);

            await updateDatalast();

            // $("#loading").remove();
            // $(".grid-stack").show();

            bindElement();

            $("#tool_widget").show('fade')
        };
    }

    static diffTime(lastUpdate, timeInterval = 0) {
        //console.log(lastUpdate);
        let current = new Date();
        let _lastUpdate = new Date(lastUpdate);

        let diff = (current.getTime() - _lastUpdate.getTime()) / 1000;
        //หน่วยวินาที
        // diff /= 60;

        return Math.abs(Math.round(diff));
    }

    static updateGridData(id) {

    }

    static getWidgetById(itemId) {
        return widgetList.find(widget => {
            return widget.itemId == itemId;
        });
    }
}


export function FatoryCreateManagmentDashboard(config) {
    // state.Calculation.calculate("2+666+3333");

    state.config = config;
    state.edit_type = $("#edit_type").html();



    socket_dashboards = io(`${WS_URL}dashboards?id=${USER_ID}`, {
        transports: ['websocket']
    });

    socket_dashboards.on('connect', function (data) {

    });

    socket_dashboards.on('disconnect', function (data) {

    });

    $("#sidebarCollapse").click();
    state.dashboard = new Dashboard();
    state.dashboard.initDashboard();

    $('.grid-stack').on('gsresizestop', function (event, elem) {
        let el = $(elem);
        let data_widget = JSON.parse(el.data('_gridstack_data'));
        let node = el.data('_gridstack_node');
        let type = data_widget.type;
        if (type === "Gauges") {} else if (type === "MutiLine") {
            let element = event.target;
            let width = el.find('.card-body').width();
            let height = el.find('.card-body').height();
            let panel = el.find('.card-body');
            let id = $(panel).find('canvas');

            // var canvas = document.getElementById($(id).attr('id'));
            // canvas.toBlob(function (blob) {
            //     saveAs(blob, "pretty image.png");
            // });
        } else if (type === "Map") {
            let map = Dashboard.getWidgetById(node.id);
            map.myMap.invalidateSize();
        }
    });
}
